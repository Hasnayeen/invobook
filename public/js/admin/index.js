webpackJsonp([3],{"/+wo":function(e,t,n){var s=n("VU/8")(n("sAqP"),n("L+WO"),!1,null,null,null);e.exports=s.exports},"1d1r":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mx-2 md:mx-auto",class:{hidden:"activity"!=e.activeTab}},[n("div",{staticClass:"text-grey-darker text-lg mb-4"},[e._v(e._s(e._f("localize")("Filters")))]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap text-grey-darkest -ml-4 mb-8"},[n("div",{staticClass:"mx-4 py-4 flex flex-row items-center relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.activity,expression:"activity"}],staticClass:"w-full block appearance-none bg-white border border-grey rounded text-grey-darker py-3 px-4 pr-8",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.activity=t.target.multiple?n:n[0]}}},[n("option",{attrs:{value:"activity",disabled:"",hidden:""}},[e._v(e._s(e._f("localize")("Filter by Activity")))]),e._v(" "),n("option",{staticClass:"my-2 text-lg",domProps:{value:1}},[e._v("name")])]),e._v(" "),n("i",{staticClass:"fa fa-chevron-down pointer-events-none items-center text-grey-dark absolute pin-r mr-3"})]),e._v(" "),n("div",{staticClass:"mx-4 py-4 flex flex-row items-center relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.user,expression:"user"}],staticClass:"w-full block appearance-none bg-white border border-grey rounded text-grey-darker py-3 px-4 pr-8",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.user=t.target.multiple?n:n[0]}}},[n("option",{attrs:{value:"user",disabled:"",hidden:""}},[e._v(e._s(e._f("localize")("Filter by User")))]),e._v(" "),n("option",{staticClass:"my-2 text-lg",domProps:{value:2}},[e._v("name")])]),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none items-center text-grey-dark absolute pin-r mr-3"})]),e._v(" "),n("div",{staticClass:"mx-4 py-4 flex flex-row items-center relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.date,expression:"date"}],staticClass:"w-full block appearance-none bg-white border border-grey rounded text-grey-darker py-3 px-4 pr-8",on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.date=t.target.multiple?n:n[0]}}},[n("option",{attrs:{value:"date",disabled:"",hidden:""}},[e._v(e._s(e._f("localize")("Filter by Date")))]),e._v(" "),n("option",{staticClass:"my-2 text-lg",domProps:{value:3}},[e._v("name")])]),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none items-center text-grey-dark absolute pin-r mr-3"})]),e._v(" "),n("div",{staticClass:"mx-4 py-4"},[n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-8 rounded"},[e.loading?[n("i",{staticClass:"fas fa-spinner fa-spin"})]:e._e(),e._v("\n      "+e._s(e._f("localize")("Apply"))+"\n    ")],2)])]),e._v(" "),n("div",{staticClass:"text-grey-darker"},[e._l(e.activities,function(t,s){return[n("div",{staticClass:"bg-white border p-3 text-grey-dark inline-flex rounded"},[e._v(e._s(s))]),e._v(" "),e._l(t,function(t){return[n("div",{staticClass:"h-16 border-l ml-2 md:ml-6 -my-4"}),e._v(" "),n("div",{staticClass:"flex flex-row items-center"},[e._m(0,!0),e._v(" "),n("div",{staticClass:"text-sm px-4 md:mr-4"},[e._v(e._s(t.time))]),e._v(" "),n("div",{staticClass:"flex-grow bg-white border px-4 md:px-8 py-4 rounded"},[n("a",{staticClass:"text-blue font-medium cursor-pointer no-underline",attrs:{href:"/users/"+t.causer.username}},[e._v(e._s(t.causer.name))]),e._v("\n            "+e._s(t.description)+" "+e._s(t.subject_type)+"\n            "),t.subject?n("a",{staticClass:"text-blue font-medium cursor-pointer no-underline",attrs:{href:t.subject_type+"s/"+t.subject_id}},[e._v(e._s(t.subject.name))]):e._e()])])]}),e._v(" "),n("div",{staticClass:"h-8 border-l ml-2 md:ml-6"})]}),e._v(" "),n("div",{staticClass:"h-16 border-l border-grey-lighter -mt-8 ml-2 md:ml-6"})],2),e._v(" "),n("div",{staticClass:"flex flex-row justify-center mt-16 mb-8"},[n("div",{staticClass:"p-3 bg-white rounded shadow text-teal cursor-pointer"},[e._v("\n      "+e._s(e._f("localize")("Load More"))+"\n    ")])])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"border-l flex flex-row items-center ml-2 md:ml-6 self-stretch"},[t("div",{staticClass:"rounded-full bg-grey-lighter border border-pink p-1 -ml-2 md:mr-4"},[t("div",{staticClass:"rounded-full bg-pink p-1"})])])}]}},"1yv/":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown","roleId"],data:function(){return{permissions:[],permission_id:null}},mounted:function(){var e=this;axios.get("admin/permissions").then(function(t){e.permissions=t.data.permissions}).catch(function(e){console.log(e.response.data.message)})},methods:{closeForm:function(){this.$emit("close")},assignPermission:function(){var e=this;axios.post("/admin/roles/"+this.roleId+"/permissions",{permission_id:this.permission_id}).then(function(t){e.permission_id=null,e.$emit("permission-assigned",t.data.permission)}).catch(function(e){console.log(e.message)})}}}},"3vL4":function(e,t,n){var s=n("VU/8")(n("SFZo"),n("M/V+"),!1,null,null,null);e.exports=s.exports},7:function(e,t,n){e.exports=n("lLZ8")},"7EUu":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(e){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(e)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(e){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.notificationShown=!1}}}},"8tCw":function(e,t,n){var s=n("VU/8")(n("7EUu"),n("fN9P"),!1,null,null,null);e.exports=s.exports},Aazl:function(e,t,n){var s=n("VU/8")(n("Atvs"),n("z+Rf"),!1,null,null,null);e.exports=s.exports},Atvs:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{activeTab:{required:!0,type:String}},data:function(){return{loading:!1,showUpdateModal:!1,version:0,lastUpdated:"",message:""}},created:function(){this.version=document.querySelector('meta[name="app-version"]').content,this.lastUpdated=document.querySelector('meta[name="last-updated"]').content},methods:{checkForUpdates:function(){var e=this;this.loading=!0,axios.get("/admin/check-for-update").then(function(t){e.loading=!1,e.message=t.data.message,e.showUpdateModal=!0}).catch(function(t){e.loading=!1,e.message=t.response.data.message,e.showUpdateModal=!0})},closeUpdateModal:function(){this.loading=!1,this.showUpdateModal=!1},updateSoftware:function(){var e=this;this.loading=!0,axios.get("/admin/update-software").then(function(t){e.loading=!1,e.message=t.data.message,e.showUpdateModal=!1}).catch(function(t){e.loading=!1,e.message=t.response.data.message,e.showUpdateModal=!1})}}}},BDRz:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[t("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),t("div",{staticClass:"md:flex"},[t("div",{staticClass:"flex flex-row border-l h-full"},[t("notification-dropdown"),this._v(" "),t("profile-dropdown")],1)])])},staticRenderFns:[]}},BU7v:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{showInviteMemberForm:!1,name:"",email:""}},methods:{openModal:function(){this.showInviteMemberForm=!0},closeModal:function(){this.showInviteMemberForm=!1},sendInvitation:function(){var e=this;axios.post("/register/invite",{name:this.name,email:this.email}).then(function(t){"success"==t.data.status&&(EventBus.$emit("notification",t.data.message,t.data.status),e.name="",e.email="",e.showInviteMemberForm=!1)}).catch(function(t){EventBus.$emit("notification",t.response.data.message,t.response.data.status),e.name="",e.email="",e.showInviteMemberForm=!1})}}}},C3H6:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("Aazl"),i=n.n(s),o=n("komk"),r=n.n(o),a=n("3vL4"),l=n.n(a),c=n("d8ea"),u=n.n(c);t.default={components:{aboutBoard:i.a,authBoard:r.a,usersBoard:l.a,activityBoard:u.a},props:{users:{required:!0,type:Array}},data:function(){return{active:"users"}},methods:{activateThisTab:function(e){e!=this.active&&(this.active=e)}}}},"Ce+Y":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{activeTab:{required:!0,type:String}},data:function(){return{activity:"activity",user:"user",date:"date",loading:!1,activities:[]}},created:function(){var e=this;axios.get("admin/activities").then(function(t){e.activities=t.data.activities}).catch(function(e){console.log(e.response)})}}},DK0p:function(e,t,n){var s=n("VU/8")(n("JIAB"),n("PCCy"),!1,null,null,null);e.exports=s.exports},EYNr:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"20vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[n("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[e._v("\n                  Roles\n              ")]),e._v(" "),n("div",{staticClass:"flex flex-row items-center"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.roleId,expression:"roleId"}],staticClass:"w-5/6 block appearance-none w-full bg-grey-lighter border border-grey-lighter text-grey-darker py-3 px-4 pr-8 rounded",attrs:{id:"user"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.roleId=t.target.multiple?n:n[0]}}},[n("option",{attrs:{selected:"",disabled:"",hidden:""}},[e._v("Select Permission to Add to Role")]),e._v(" "),e._l(e.roles,function(t){return[n("option",{staticClass:"my-2 text-lg",domProps:{value:t.id}},[e._v(e._s(t.name))])]})],2),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none flex items-center text-grey-darker -ml-8"})])])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.attachPermission}},[e._v("Attach")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[]}},FByL:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg z-50",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),t("div",{staticClass:"inline",on:{click:this.closeNotification}},[t("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},GExr:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:e.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[e._v("\n      "+e._s(e.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),e._v(" "),e.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded z-50",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:e.profileUrl}},[e._m(0),e._v("\n      "+e._s(e._f("localize")("Your Profile"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[e._m(1),e._v("\n      "+e._s(e._f("localize")("Admin"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[e._m(2),e._v("\n      "+e._s(e._f("localize")("Settings"))+"\n    ")]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:e.url.logout},on:{click:e.logoutUser}},[e._m(3),e._v("\n      "+e._s(e._f("localize")("Logout"))+"\n    ")])]):e._e(),e._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:e.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}})])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-user"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-cog font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},I6uN:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"12vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[e._m(0),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4",attrs:{id:"grid-last-name",type:"text",placeholder:"New Role",required:""},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.createRole}},[e._v("Create")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[this._v("\n                  Name "),t("span",{staticClass:"text-grey capitalize"},[this._v("(required)")])])}]}},JIAB:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("ulRP"),i=n.n(s),o=n("wlaG"),r=n.n(o);t.default={components:{createRoleForm:i.a,assignPermissionForm:r.a},props:{activeColumn:{required:!0,type:String}},data:function(){return{roles:[],createRoleFormShown:!1,assignPermissionFormShown:!1,roleId:0}},beforeUpdate:function(){var e=this;this.roles.length<1&&axios.get("/admin/roles").then(function(t){e.roles=t.data.roles}).catch(function(e){console.log(e)})},methods:{showCreateRoleForm:function(){this.createRoleFormShown=!0},closeCreateRoleForm:function(){this.createRoleFormShown=!1},newRoleCreated:function(e){this.roles.push(e),this.createRoleFormShown=!1},deleteRole:function(e,t){var n=this;axios.delete("/admin/roles/"+e).then(function(e){n.roles.splice(t,1)}).catch(function(e){console.log(e.response.data.message)})},showAssignPermissionForm:function(e){this.roleId=e,this.assignPermissionFormShown=!0},closeAssignPermissionForm:function(){this.assignPermissionFormShown=!1},permissionAssigned:function(e){var t=this;this.roles.filter(function(e){return e.id===t.roleId})[0].permissions.some(function(t){return t.id===e.id})||this.roles.filter(function(e){return e.id===t.roleId})[0].permissions.push(e),this.assignPermissionFormShown=!1},revokePermission:function(e,t,n){var s=this;axios.delete("/admin/roles/"+e+"/permissions",{permission_id:t}).then(function(t){s.roles.filter(function(t){return t.id===e})[0].permissions.splice(n,1)}).catch(function(e){console.log(e.response.data.message)})}}}},"L+WO":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded-b",class:{hidden:"permissions"!==e.activeColumn}},[n("attach-permission-form",{attrs:{permissionId:e.permissionId,"form-shown":e.attachPermissionFormShown},on:{close:e.closeAttachPermissionForm,"permission-attached":e.permissionAttachedToRole}}),e._v(" "),n("div",{staticClass:" px-6 py-8 flex flex-row flex-wrap justify-center text-grey-darker"},e._l(e.permissions,function(t){return n("div",{staticClass:"bg-white shadow-xl w-80 my-4 md:m-6 rounded-lg"},[n("div",{staticClass:"p-4 text-xl uppercase text-indigo bg-grey-lighter rounded-t-lg"},[e._v("\n        "+e._s(t.name)+"\n      ")]),e._v(" "),n("div",{staticClass:"px-4 pb-2 bg-grey-lighter text-sm flex flex-row"},[n("span",[e._v("\n          "+e._s(e._f("localize")("Roles"))+"\n        ")]),e._v(" "),n("div",{on:{click:function(n){e.showAttachPermissionForm(t.id)}}},[n("i",{staticClass:"ml-2 fas fa-plus-circle text-indigo cursor-pointer"})])]),e._v(" "),t.roles.length>0?n("div",{staticClass:"flex flex-row flex-wrap m-2"},e._l(t.roles,function(t){return n("div",{staticClass:"py-1 px-2 m-2 rounded-full font-medium bg-pink text-white text-sm flex flex-row items-center"},[e._v("\n          "+e._s(t.name)+" "),n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer"})])})):n("div",{staticClass:"py-1 px-2 m-2 font-medium text-grey-darker"},[e._v("\n        "+e._s(e._f("localize")("Don't belongs to any role yet"))+"\n      ")])])}))],1)},staticRenderFns:[]}},LU2D:function(e,t,n){var s=n("VU/8")(n("C3H6"),n("jz3i"),!1,null,null,null);e.exports=s.exports},"M/V+":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full",class:{hidden:"users"!=e.activeTab}},[n("invite-modal"),e._v(" "),n("div",{staticClass:"md:bg-white md:rounded md:shadow text-grey-darkest"},[n("div",{staticClass:"text-center text-3xl md:p-4 text-grey-darker"},[e._v("All Users")]),e._v(" "),e._m(0),e._v(" "),e._l(e.users,function(t){return n("div",{staticClass:"flex flex-row items-center text-left m-4 md:m-0 md:p-4 bg-teal-lighter md:bg-white rounded md:rounded-none shadow md:shadow-none relative"},[e._m(1,!0),e._v(" "),n("div",{staticClass:"w-1/4 md:w-1/6 px-2 md:px-0"},[n("img",{staticClass:"w-12 h-12 rounded-full",attrs:{src:e.generateUrl(t.avatar)}})]),e._v(" "),n("div",{staticClass:"w-3/4 md:w-5/6 flex flex-col md:flex-row md:items-center md:px-0 bg-white"},[n("div",{staticClass:"md:w-1/5 text-left text-xl font-semibold text-grey-darker p-2 md:p-0"},[e._v(e._s(t.name))]),e._v(" "),n("div",{staticClass:"md:w-2/5 flex flex-row text-sm p-2 md:px-0 bg-grey-lightest md:bg-white"},[n("div",{staticClass:"w-1/2 text-left"},[e._v("@"+e._s(t.username))]),e._v(" "),n("div",{staticClass:"w-1/2 text-right md:text-left"},[e._v(e._s(t.role))])]),e._v(" "),n("div",{staticClass:"md:w-2/5 flex flex-row text-sm p-2 md:px-0 bg-grey-lightest md:bg-white"},[n("div",{staticClass:"w-1/2"},[e._v(e._s(t.email))]),e._v(" "),n("div",{staticClass:"w-1/2"},[e._v(e._s(t.timezone))])])])])})],2)],1)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"hidden md:flex flex-row text-left bg-grey-lighter text-grey-dark p-4"},[n("div",{staticClass:"w-1/6"},[e._v("Avatar")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Name")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Username")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Role")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Email")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Timezone")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"absolute pin-t pin-r m-2 text-grey-darker h-full md:flex flex-row items-center md:m-0 md:mr-4"},[t("i",{staticClass:"fas fa-ellipsis-h cursor-pointer"})])}]}},Mjfo:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("DK0p"),i=n.n(s),o=n("/+wo"),r=n.n(o);t.default={components:{rolesBoard:i.a,permissionsBoard:r.a},props:{activeTab:{required:!0,type:String}},data:function(){return{activeColumn:""}},beforeUpdate:function(){""===this.activeColumn&&(this.activeColumn="roles")},methods:{activateThisColumn:function(e){e!=this.active&&(this.activeColumn=e)}}}},PCCy:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded-b",class:{hidden:"roles"!==e.activeColumn}},[n("create-role-form",{attrs:{"form-shown":e.createRoleFormShown},on:{close:e.closeCreateRoleForm,"role-created":e.newRoleCreated}}),e._v(" "),n("assign-permission-form",{attrs:{roleId:e.roleId,"form-shown":e.assignPermissionFormShown},on:{close:e.closeAssignPermissionForm,"permission-assigned":e.permissionAssigned}}),e._v(" "),n("div",{staticClass:"mx-4 text-center"},[n("button",{staticClass:"no-underline p-3 m-8 -mb-4 text-white text-base bg-teal-light rounded shadow-xl",on:{click:e.showCreateRoleForm}},[e._v("Add New Role")])]),e._v(" "),n("div",{staticClass:"px-6 py-8 flex flex-row flex-wrap justify-center text-grey-darker"},e._l(e.roles,function(t,s){return n("div",{staticClass:"bg-white shadow-xl w-80 my-4 md:m-6 rounded-lg"},[n("div",{staticClass:"p-4 text-xl uppercase text-indigo bg-grey-lighter rounded-t-lg flex flex-row"},[e._v("\n        "+e._s(t.name)+"\n          "),n("div",{on:{click:function(n){e.deleteRole(t.id,s)}}},[t.deletable?n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer text-base"}):e._e()])]),e._v(" "),n("div",{staticClass:"px-4 pb-2 bg-grey-lighter text-sm flex flex-row"},[n("span",[e._v("\n          "+e._s(e._f("localize")("Permissions"))+"\n        ")]),e._v(" "),n("div",{on:{click:function(n){e.showAssignPermissionForm(t.id)}}},[n("i",{staticClass:"ml-2 fas fa-plus-circle text-indigo cursor-pointer"})])]),e._v(" "),t.permissions.length>0?n("div",{staticClass:"flex flex-row flex-wrap m-2"},e._l(t.permissions,function(s,i){return n("div",{staticClass:"py-1 px-2 m-2 rounded-full font-medium bg-pink text-white text-sm flex flex-row items-center"},[e._v("\n          "+e._s(s.name)+" \n          "),n("div",{on:{click:function(n){e.revokePermission(t.id,s.id,i)}}},[n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer"})])])})):n("div",{staticClass:"py-1 px-2 m-2 font-medium text-grey-darker"},[e._v("\n        "+e._s(e._f("localize")("Don't have any permission yet"))+"\n      ")])])}))],1)},staticRenderFns:[]}},SFZo:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("dpfw"),i=n.n(s);t.default={props:{activeTab:{required:!0,type:String},users:{required:!0,type:Array}},components:{inviteModal:i.a}}},"VU/8":function(e,t){e.exports=function(e,t,n,s,i,o){var r,a=e=e||{},l=typeof e.default;"object"!==l&&"function"!==l||(r=e,a=e.default);var c,u="function"==typeof a?a.options:a;if(t&&(u.render=t.render,u.staticRenderFns=t.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),i&&(u._scopeId=i),o?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=c):s&&(c=s),c){var d=u.functional,f=d?u.render:u.beforeCreate;d?(u._injectStyles=c,u.render=function(e,t){return c.call(t),f(e,t)}):u.beforeCreate=f?[].concat(f,c):[c]}return{esModule:r,exports:a,options:u}}},WRGp:function(e,t,n){"use strict";var s=n("iuzX"),i=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(e){return e?(e=e.toString(),window.location.protocol+"//"+window.location.host+"/"+e):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(e){return e?(e=e.toString(),window.lang[e]?window.lang[e]:e):""}),window.EventBus=new Vue},Wfqs:function(e,t,n){var s=n("VU/8")(n("aWzK"),n("FByL"),!1,null,null,null);e.exports=s.exports},ZyTV:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mb-8",class:{hidden:"auth"!=e.activeTab}},[n("div",{staticClass:"bg-white shadow rounded-t text-grey-darkest mt-4"},[n("div",{staticClass:"flex flex-row text-center text-grey"},[n("div",{staticClass:"w-1/2 font-semibold p-4 rounded-tl",class:["roles"===e.activeColumn?"text-indigo border-indigo border-b-2":"bg-white cursor-pointer"],on:{click:function(t){e.activateThisColumn("roles")}}},[e._v("\n        "+e._s(e._f("localize")("Roles"))+"\n      ")]),e._v(" "),n("div",{staticClass:"w-1/2 font-semibold p-4",class:["permissions"===e.activeColumn?"text-indigo border-indigo border-b-2":"bg-white cursor-pointer"],on:{click:function(t){e.activateThisColumn("permissions")}}},[e._v("\n        "+e._s(e._f("localize")("Permissions"))+"\n      ")])]),e._v(" "),n("roles-board",{attrs:{activeColumn:e.activeColumn}}),e._v(" "),n("permissions-board",{attrs:{activeColumn:e.activeColumn}})],1)])},staticRenderFns:[]}},aWzK:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(e,t){var n=this;this.message=e,this.messageType=t,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},d8ea:function(e,t,n){var s=n("VU/8")(n("Ce+Y"),n("1d1r"),!1,null,null,null);e.exports=s.exports},dBZW:function(e,t,n){var s=n("VU/8")(n("fDZG"),n("GExr"),!1,null,null,null);e.exports=s.exports},dh5Q:function(e,t,n){var s=n("VU/8")(n("i5Iv"),n("EYNr"),!1,null,null,null);e.exports=s.exports},dpfw:function(e,t,n){var s=n("VU/8")(n("BU7v"),n("m31y"),!1,null,null,null);e.exports=s.exports},fDZG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(e){e.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(e){this.profileDropdownShown?(this.hideProfileDropdown(e),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(e){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.profileDropdownShown=!1}}}},fN9P:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:e.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),e._v(" "),e.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):e._e()]),e._v(" "),e.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-5 mr-8 py-4 shadow-lg rounded z-50",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(0)]),e._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(1)]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[e._v("\n            View All\n        ")])]):e._e()])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},i5Iv:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown","permissionId"],data:function(){return{roles:[],roleId:null}},mounted:function(){var e=this;axios.get("admin/roles").then(function(t){e.roles=t.data.roles}).catch(function(e){console.log(e.response.data.message)})},methods:{closeForm:function(){this.$emit("close")},attachPermission:function(){var e=this;axios.post("/admin/roles/"+this.roleId+"/permissions",{permission_id:this.permissionId}).then(function(t){e.roleId=null,e.$emit("permission-attached",t.data.role)}).catch(function(e){console.log(e.message)})}}}},iuzX:function(e,t){!function(){function e(e){this.value=e}function t(t){var n,s;function i(n,s){try{var r=t[n](s),a=r.value;a instanceof e?Promise.resolve(a.value).then(function(e){i("next",e)},function(e){i("throw",e)}):o(r.done?"return":"normal",r.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):s=null}this._invoke=function(e,t){return new Promise(function(o,r){var a={key:e,arg:t,resolve:o,reject:r,next:null};s?s=s.next=a:(n=s=a,i(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();var n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},o=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},a=function(){function e(t){n(this,e),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(t),this.connect()}return s(e,[{key:"setOptions",value:function(e){return this.options=i(this._defaultOptions,e),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),e}},{key:"csrfToken",value:function(){var e=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(e=document.querySelector('meta[name="csrf-token"]'))?e.getAttribute("content"):null}}]),e}(),l=function(){function e(){n(this,e)}return s(e,[{key:"notification",value:function(e){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",e)}},{key:"listenForWhisper",value:function(e,t){return this.listen(".client-"+e,t)}}]),e}(),c=function(){function e(t){n(this,e),this.setNamespace(t)}return s(e,[{key:"format",value:function(e){return"."===e.charAt(0)||"\\"===e.charAt(0)?e.substr(1):(this.namespace&&(e=this.namespace+"."+e),e.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(e){this.namespace=e}}]),e}(),u=function(e){function t(e,s,i){n(this,t);var o=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.name=s,o.pusher=e,o.options=i,o.eventFormatter=new c(o.options.namespace),o.subscribe(),o}return o(t,l),s(t,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"stopListening",value:function(e){return this.subscription.unbind(this.eventFormatter.format(e)),this}},{key:"on",value:function(e,t){return this.subscription.bind(e,t),this}}]),t}(),d=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,u),s(t,[{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),f=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,u),s(t,[{key:"here",value:function(e){return this.on("pusher:subscription_succeeded",function(t){e(Object.keys(t.members).map(function(e){return t.members[e]}))}),this}},{key:"joining",value:function(e){return this.on("pusher:member_added",function(t){e(t.info)}),this}},{key:"leaving",value:function(e){return this.on("pusher:member_removed",function(t){e(t.info)}),this}},{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),h=function(e){function t(e,s,i){n(this,t);var o=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.events={},o.name=s,o.socket=e,o.options=i,o.eventFormatter=new c(o.options.namespace),o.subscribe(),o.configureReconnector(),o}return o(t,l),s(t,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"on",value:function(e,t){var n=this,s=function(e,s){n.name==e&&t(s)};this.socket.on(e,s),this.bind(e,s)}},{key:"configureReconnector",value:function(){var e=this,t=function(){e.subscribe()};this.socket.on("reconnect",t),this.bind("reconnect",t)}},{key:"bind",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"unbind",value:function(){var e=this;Object.keys(this.events).forEach(function(t){e.events[t].forEach(function(n){e.socket.removeListener(t,n)}),delete e.events[t]})}}]),t}(),p=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,h),s(t,[{key:"whisper",value:function(e,t){return this.socket.emit("client event",{channel:this.name,event:"client-"+e,data:t}),this}}]),t}(),v=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,p),s(t,[{key:"here",value:function(e){return this.on("presence:subscribed",function(t){e(t.map(function(e){return e.user_info}))}),this}},{key:"joining",value:function(e){return this.on("presence:joining",function(t){return e(t.user_info)}),this}},{key:"leaving",value:function(e){return this.on("presence:leaving",function(t){return e(t.user_info)}),this}}]),t}(),m=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),o=0;o<s;o++)i[o]=arguments[o];var a=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return o(t,a),s(t,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new u(this.pusher,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new d(this.pusher,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new f(this.pusher,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e,n){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),t}(),_=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),o=0;o<s;o++)i[o]=arguments[o];var a=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return o(t,a),s(t,[{key:"connect",value:function(){var e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new h(this.socket,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new p(this.socket,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new v(this.socket,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),t}(),x=function(){function e(t){n(this,e),this.options=t,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new _(this.options))}return s(e,[{key:"registerVueRequestInterceptor",value:function(){var e=this;Vue.http.interceptors.push(function(t,n){e.socketId()&&t.headers.set("X-Socket-ID",e.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var e=this;axios.interceptors.request.use(function(t){return e.socketId()&&(t.headers["X-Socket-Id"]=e.socketId()),t})}},{key:"registerjQueryAjaxSetup",value:function(){var e=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(t){e.socketId()&&t.setRequestHeader("X-Socket-Id",e.socketId())}})}},{key:"listen",value:function(e,t,n){return this.connector.listen(e,t,n)}},{key:"channel",value:function(e){return this.connector.channel(e)}},{key:"private",value:function(e){return this.connector.privateChannel(e)}},{key:"join",value:function(e){return this.connector.presenceChannel(e)}},{key:"leave",value:function(e){this.connector.leave(e)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),e}();e.exports=x},jK9D:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"20vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[n("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[e._v("\n                  Permissions\n              ")]),e._v(" "),n("div",{staticClass:"flex flex-row items-center"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.permission_id,expression:"permission_id"}],staticClass:"w-5/6 block appearance-none w-full bg-grey-lighter border border-grey-lighter text-grey-darker py-3 px-4 pr-8 rounded",attrs:{id:"user"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.permission_id=t.target.multiple?n:n[0]}}},[n("option",{attrs:{selected:"",disabled:"",hidden:""}},[e._v("Select Permission to Add to Role")]),e._v(" "),e._l(e.permissions,function(t){return[n("option",{staticClass:"my-2 text-lg",domProps:{value:t.id}},[e._v(e._s(t.name))])]})],2),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none flex items-center text-grey-darker -ml-8"})])])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.assignPermission}},[e._v("Assign")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[]}},jz3i:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container md:mx-auto md:px-4 md:my-6 w-full md:w-md lg:w-lg xl:w-xl xxl:w-2xl border-t md:border-0"},[n("div",{staticClass:"flex flex-row justify-between md:justify-around md:my-6 py-2 md:py-4 bg-white shadow md:rounded text-grey"},[n("div",{class:["users"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-2 md:pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("users")}}},[n("i",{staticClass:"fas fa-users text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v(e._s(e._f("localize")("Users")))])]),e._v(" "),n("div",{class:["auth"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-2 md:pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("auth")}}},[n("i",{staticClass:"fas fa-lock-open text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v(e._s(e._f("localize")("Roles & Permissions")))])]),e._v(" "),n("div",{class:["activity"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-2 md:pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("activity")}}},[n("i",{staticClass:"fas fa-bolt text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v(e._s(e._f("localize")("Activities")))])]),e._v(" "),n("div",{class:["about"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("about")}}},[n("i",{staticClass:"fas fa-info-circle text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v(e._s(e._f("localize")("About")))])])]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-start mt-4"},[n("usersBoard",{attrs:{users:e.users,activeTab:e.active}}),e._v(" "),n("authBoard",{attrs:{users:e.users,activeTab:e.active}}),e._v(" "),n("activityBoard",{attrs:{activeTab:e.active}}),e._v(" "),n("aboutBoard",{attrs:{activeTab:e.active}})],1)])},staticRenderFns:[]}},komk:function(e,t,n){var s=n("VU/8")(n("Mjfo"),n("ZyTV"),!1,null,null,null);e.exports=s.exports},lLZ8:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("WRGp");var s=n("LU2D"),i=n.n(s),o=n("pQE+"),r=n.n(o),a=n("Wfqs"),l=n.n(a);new Vue({el:"#app",components:{index:i.a,navbar:r.a,notificationPopup:l.a}})},m31y:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mb-4 text-center"},[n("button",{staticClass:"no-underline p-2 my-4 mb-0 bg-white text-base text-teal rounded shadow",on:{click:e.openModal}},[e._v("Invite New Member")]),e._v(" "),n("div",{class:{hidden:!e.showInviteMemberForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey z-10",on:{click:e.closeModal}}),e._v(" "),n("div",{staticClass:"fixed pin-x md:w-1/3 z-10 bg-grey-lighter mx-2 md:mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"John Doe"},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}})]),e._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.email,expression:"email"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"john@example.com"},domProps:{value:e.email},on:{input:function(t){t.target.composing||(e.email=t.target.value)}}})]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-light hover:font-bold",on:{click:e.closeModal}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:e.sendInvitation}},[e._v("Send Invitation")])])])])])},staticRenderFns:[]}},p2sa:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown"],data:function(){return{name:""}},methods:{closeForm:function(){this.$emit("close")},createRole:function(){var e=this;axios.post("/admin/roles",{name:this.name}).then(function(t){e.name="",e.$emit("role-created",t.data.role)}).catch(function(e){console.log(e.message)})}}}},"pQE+":function(e,t,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);e.exports=s.exports},qjuG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("8tCw"),i=n.n(s),o=n("dBZW"),r=n.n(o);t.default={components:{notificationDropdown:i.a,profileDropdown:r.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},sAqP:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("dh5Q"),i=n.n(s);t.default={components:{attachPermissionForm:i.a},props:{activeColumn:{required:!0,type:String}},data:function(){return{permissions:[],attachPermissionFormShown:!1,permissionId:null}},watch:{activeColumn:"getPermissions"},methods:{getPermissions:function(){var e=this;"permissions"===this.activeColumn&&this.permissions.length<1&&axios.get("/admin/permissions").then(function(t){e.permissions=t.data.permissions}).catch(function(e){console.log(e)})},showAttachPermissionForm:function(e){this.permissionId=e,this.attachPermissionFormShown=!0},closeAttachPermissionForm:function(){this.attachPermissionFormShown=!1},permissionAttachedToRole:function(e){var t=this;this.permissions.filter(function(e){return e.id===t.permissionId})[0].roles.some(function(t){return t.id===e.id})||this.permissions.filter(function(e){return e.id===t.permissionId})[0].roles.push(e),this.attachPermissionFormShown=!1}}}},ulRP:function(e,t,n){var s=n("VU/8")(n("p2sa"),n("I6uN"),!1,null,null,null);e.exports=s.exports},wlaG:function(e,t,n){var s=n("VU/8")(n("1yv/"),n("jK9D"),!1,null,null,null);e.exports=s.exports},"z+Rf":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mb-8",class:{hidden:"about"!=e.activeTab}},[n("div",{class:{hidden:!e.showUpdateModal}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey",on:{click:e.closeUpdateModal}}),e._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[e._v("\n            "+e._s(e.message)+"\n          ")]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light hover:border-red-light border-red-lighter border px-4 py-3 rounded",on:{click:e.closeUpdateModal}},[e._v("Ok")])])])]),e._v(" "),n("div",{staticClass:"container mx-4 md:mx-auto py-8 bg-white rounded shadow text-center text-grey-darker"},[n("div",{staticClass:"pb-4 text-3xl"},[e._v("\n      Goodwork\n    ")]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      Version: "),n("span",{staticClass:"pl-2 text-xl text-grey-darkest"},[e._v(e._s(e.version))]),e._v(" "),n("button",{staticClass:"no-underline p-4 m-4 mb-0 bg-white text-base text-teal rounded border border-grey-light",on:{click:e.checkForUpdates}},[e._v("\n        "+e._s(e._f("localize")("Check for Updates"))+"\n        "),e.loading?n("div",{staticClass:"inline"},[n("i",{staticClass:"fas fa-spinner fa-spin"})]):e._e()])]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      "+e._s(e._f("localize")("Last Updated"))+": "),n("span",{staticClass:"pl-2 text-xl text-grey-darkest"},[e._v(e._s(e.lastUpdated))])]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      "+e._s(e._f("localize")("Author"))+": "),n("a",{staticClass:"pl-2 text-xl text-blue-light no-underline",attrs:{href:"https://hasnayeen.github.io/"}},[e._v("Nehal Hasnayeen")])]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      "+e._s(e._f("localize")("Submit issue & feedback at"))+": "),n("a",{staticClass:"pl-2 text-xl text-blue-light no-underline",attrs:{href:"https://github.com/iluminar/goodwork/issues"}},[e._v("Goodwork Issues")])]),e._v(" "),n("div",{staticClass:"pt-8"},[e._v("\n      © "+e._s((new Date).getFullYear())+" "),n("a",{staticClass:"text-xl text-blue-light no-underline",attrs:{href:"https://github.com/iluminar/"}},[e._v("Iluminar")])])])])},staticRenderFns:[]}}},[7]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vcGVybWlzc2lvbnNCb2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2FjdGl2aXR5Qm9hcmQudnVlPzJkODYiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9mb3Jtcy9hc3NpZ25QZXJtaXNzaW9uRm9ybS52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3VzZXJzQm9hcmQudnVlIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbm90aWZpY2F0aW9uRHJvcGRvd24udnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9ub3RpZmljYXRpb25Ecm9wZG93bi52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2Fib3V0Qm9hcmQudnVlIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWJvdXRCb2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25hdmJhci52dWU/NmJkOSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL2ludml0ZU1vZGFsLnZ1ZSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2luZGV4LnZ1ZSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2FjdGl2aXR5Qm9hcmQudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9yb2xlc0JvYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvYXR0YWNoUGVybWlzc2lvbkZvcm0udnVlPzZlM2IiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25vdGlmaWNhdGlvblBvcHVwLnZ1ZT81NTJjIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9wcm9maWxlRHJvcGRvd24udnVlPzI0NWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2NyZWF0ZVJvbGVGb3JtLnZ1ZT8yOTcyIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vcm9sZXNCb2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3Blcm1pc3Npb25zQm9hcmQudnVlPzNmMTIiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2luZGV4LnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vdXNlcnNCb2FyZC52dWU/OGZhZiIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2F1dGhCb2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3JvbGVzQm9hcmQudnVlPzYwM2IiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi91c2Vyc0JvYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25vdGlmaWNhdGlvblBvcHVwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYXV0aEJvYXJkLnZ1ZT9kNzFmIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbm90aWZpY2F0aW9uUG9wdXAudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9hY3Rpdml0eUJvYXJkLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvcHJvZmlsZURyb3Bkb3duLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvYXR0YWNoUGVybWlzc2lvbkZvcm0udnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9pbnZpdGVNb2RhbC52dWUiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9wcm9maWxlRHJvcGRvd24udnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9ub3RpZmljYXRpb25Ecm9wZG93bi52dWU/YWRmOSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2F0dGFjaFBlcm1pc3Npb25Gb3JtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGFyYXZlbC1lY2hvL2Rpc3QvZWNoby5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvYXNzaWduUGVybWlzc2lvbkZvcm0udnVlPzdhNDgiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2luZGV4LnZ1ZT9lNjExIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9hdXRoQm9hcmQudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvYWRtaW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL2ludml0ZU1vZGFsLnZ1ZT9iYjM4Iiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvY3JlYXRlUm9sZUZvcm0udnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9uYXZiYXIudnVlIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbmF2YmFyLnZ1ZSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3Blcm1pc3Npb25zQm9hcmQudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9mb3Jtcy9jcmVhdGVSb2xlRm9ybS52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2Fzc2lnblBlcm1pc3Npb25Gb3JtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWJvdXRCb2FyZC52dWU/MTdmNyJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibm9ybWFsaXplQ29tcG9uZW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlbmRlciIsIl92bSIsInRoaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiY2xhc3MiLCJoaWRkZW4iLCJhY3RpdmVUYWIiLCJfdiIsIl9zIiwiX2YiLCJkaXJlY3RpdmVzIiwibmFtZSIsInJhd05hbWUiLCJ2YWx1ZSIsImV4cHJlc3Npb24iLCJvbiIsImNoYW5nZSIsIiRldmVudCIsIiQkc2VsZWN0ZWRWYWwiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbHRlciIsImNhbGwiLCJ0YXJnZXQiLCJvcHRpb25zIiwibyIsInNlbGVjdGVkIiwibWFwIiwiX3ZhbHVlIiwiYWN0aXZpdHkiLCJtdWx0aXBsZSIsImF0dHJzIiwiZGlzYWJsZWQiLCJkb21Qcm9wcyIsInVzZXIiLCJkYXRlIiwiX2UiLCJfbCIsImtleSIsIl9tIiwidGltZSIsImhyZWYiLCJjYXVzZXIiLCJ1c2VybmFtZSIsImRlc2NyaXB0aW9uIiwic3ViamVjdF90eXBlIiwic3ViamVjdF9pZCIsInN1YmplY3QiLCJzdGF0aWNSZW5kZXJGbnMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX3RoaXMiLCJ0aGVuIiwicmVzcG9uc2UiLCJwZXJtaXNzaW9ucyIsImNhdGNoIiwiZXJyb3IiLCJtZXNzYWdlIiwiX3RoaXMyIiwicGVybWlzc2lvbl9pZCIsInBlcm1pc3Npb24iLCJjc3JmVG9rZW4iLCJuYXZVcmwiLCJoaWRlTm90aWZpY2F0aW9uIiwiZXZlbnQiLCJzaG93Tm90aWZpY2F0aW9uIiwiU3RyaW5nIiwiY29udGVudCIsInVybCIsInNpdGUiLCJlbWFpbCIsInN0YXR1cyIsImFjdGl2aXR5Qm9hcmQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2FjdGl2aXR5Qm9hcmRfdnVlX19fZGVmYXVsdCIsImEiLCJ0YWIiLCJhY3Rpdml0aWVzIiwiZm9ybVNob3duIiwic3RhdGljU3R5bGUiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJmb3IiLCJpZCIsInJvbGVJZCIsInJvbGUiLCJjbGljayIsImNsb3NlRm9ybSIsImF0dGFjaFBlcm1pc3Npb24iLCJub3RpZmljYXRpb25TaG93biIsIm1lc3NhZ2VUeXBlIiwibWF4LXdpZHRoIiwiY2xvc2VOb3RpZmljYXRpb24iLCJ0b2dnbGVQcm9maWxlRHJvcGRvd24iLCJzcmMiLCJnZW5lcmF0ZVVybCIsImF2YXRhciIsImFyaWEtaGlkZGVuIiwicHJvZmlsZVVybCIsImxvZ291dCIsImxvZ291dFVzZXIiLCJkaXNwbGF5IiwiYWN0aW9uIiwibWV0aG9kIiwidHlwZSIsInRva2VuIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImlucHV0IiwiY29tcG9zaW5nIiwiY3JlYXRlUm9sZSIsImFzc2lnblBlcm1pc3Npb25Gb3JtIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3Jtc19hc3NpZ25QZXJtaXNzaW9uRm9ybV9fX2RlZmF1bHQiLCJyb2xlcyIsIl90aGlzMyIsIl90aGlzNCIsInBlcm1pc3Npb25JZCIsImFjdGl2ZUNvbHVtbiIsImZvcm0tc2hvd24iLCJhdHRhY2hQZXJtaXNzaW9uRm9ybVNob3duIiwiY2xvc2UiLCJjbG9zZUF0dGFjaFBlcm1pc3Npb25Gb3JtIiwicGVybWlzc2lvbi1hdHRhY2hlZCIsInBlcm1pc3Npb25BdHRhY2hlZFRvUm9sZSIsInNob3dBdHRhY2hQZXJtaXNzaW9uRm9ybSIsImxlbmd0aCIsInRpbWV6b25lIiwicGVybWlzc2lvbnNCb2FyZCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fcGVybWlzc2lvbnNCb2FyZF9fX2RlZmF1bHQiLCJjb2x1bW4iLCJjcmVhdGVSb2xlRm9ybVNob3duIiwiY2xvc2VDcmVhdGVSb2xlRm9ybSIsInJvbGUtY3JlYXRlZCIsIm5ld1JvbGVDcmVhdGVkIiwiYXNzaWduUGVybWlzc2lvbkZvcm1TaG93biIsImNsb3NlQXNzaWduUGVybWlzc2lvbkZvcm0iLCJwZXJtaXNzaW9uLWFzc2lnbmVkIiwicGVybWlzc2lvbkFzc2lnbmVkIiwic2hvd0NyZWF0ZVJvbGVGb3JtIiwiaW5kZXgiLCJkZWxldGVSb2xlIiwic2hvd0Fzc2lnblBlcm1pc3Npb25Gb3JtIiwicmV2b2tlUGVybWlzc2lvbiIsImludml0ZU1vZGFsIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19wYXJ0aWFsc19pbnZpdGVNb2RhbF92dWVfX19kZWZhdWx0IiwicmF3U2NyaXB0RXhwb3J0cyIsImNvbXBpbGVkVGVtcGxhdGUiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJzY29wZUlkIiwibW9kdWxlSWRlbnRpZmllciIsImVzTW9kdWxlIiwic2NyaXB0RXhwb3J0cyIsImRlZmF1bHQiLCJob29rIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsIl9zY29wZUlkIiwiY29udGV4dCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJwYXJlbnQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiYWRkIiwiX3NzclJlZ2lzdGVyIiwiZXhpc3RpbmciLCJiZWZvcmVDcmVhdGUiLCJfaW5qZWN0U3R5bGVzIiwiaCIsImNvbmNhdCIsIndpbmRvdyIsIlZ1ZSIsImF4aW9zIiwibHV4b24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJYLUNTUkYtVE9LRU4iLCJMYXJhdmVsIiwiWC1SZXF1ZXN0ZWQtV2l0aCIsImlvIiwiRWNobyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9sYXJhdmVsX2VjaG9fX19kZWZhdWx0IiwiYnJvYWRjYXN0ZXIiLCJob3N0IiwibG9jYXRpb24iLCJob3N0bmFtZSIsIm1peGluIiwibWV0aG9kcyIsInRvU3RyaW5nIiwicHJvdG9jb2wiLCJsYW5nIiwiRXZlbnRCdXMiLCJhY3RpdmF0ZVRoaXNDb2x1bW4iLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdCIsImhpZGVQcm9maWxlRHJvcGRvd24iLCJzaG93UHJvZmlsZURyb3Bkb3duIiwidG9nZ2xlTm90aWZpY2F0aW9uIiwiQXdhaXRWYWx1ZSIsIkFzeW5jR2VuZXJhdG9yIiwiZ2VuIiwiZnJvbnQiLCJiYWNrIiwicmVzdW1lIiwiYXJnIiwicmVzdWx0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXR0bGUiLCJkb25lIiwiZXJyIiwicmVqZWN0IiwibmV4dCIsIl9pbnZva2UiLCJyZXF1ZXN0IiwicmV0dXJuIiwidW5kZWZpbmVkIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRocm93IiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJpIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImluaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJDb25uZWN0b3IiLCJfZGVmYXVsdE9wdGlvbnMiLCJhdXRoIiwiYXV0aEVuZHBvaW50IiwibmFtZXNwYWNlIiwic2V0T3B0aW9ucyIsImNvbm5lY3QiLCJzZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsIkNoYW5uZWwiLCJjYWxsYmFjayIsImxpc3RlbiIsIkV2ZW50Rm9ybWF0dGVyIiwic2V0TmFtZXNwYWNlIiwiY2hhckF0Iiwic3Vic3RyIiwicmVwbGFjZSIsIlB1c2hlckNoYW5uZWwiLCJfQ2hhbm5lbCIsInB1c2hlciIsImdldFByb3RvdHlwZU9mIiwiZXZlbnRGb3JtYXR0ZXIiLCJzdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJ1bnN1YnNjcmliZSIsImZvcm1hdCIsInVuYmluZCIsImJpbmQiLCJQdXNoZXJQcml2YXRlQ2hhbm5lbCIsIl9QdXNoZXJDaGFubmVsIiwiYXBwbHkiLCJldmVudE5hbWUiLCJkYXRhIiwiY2hhbm5lbHMiLCJ0cmlnZ2VyIiwiUHVzaGVyUHJlc2VuY2VDaGFubmVsIiwia2V5cyIsIm1lbWJlcnMiLCJrIiwibWVtYmVyIiwiaW5mbyIsIlNvY2tldElvQ2hhbm5lbCIsInNvY2tldCIsImV2ZW50cyIsImNvbmZpZ3VyZVJlY29ubmVjdG9yIiwiZW1pdCIsImNoYW5uZWwiLCJsaXN0ZW5lciIsInB1c2giLCJmb3JFYWNoIiwicmVtb3ZlTGlzdGVuZXIiLCJTb2NrZXRJb1ByaXZhdGVDaGFubmVsIiwiX1NvY2tldElvQ2hhbm5lbCIsIlNvY2tldElvUHJlc2VuY2VDaGFubmVsIiwiX1NvY2tldElvUHJpdmF0ZUNoYW5uIiwibSIsInVzZXJfaW5mbyIsIlB1c2hlckNvbm5lY3RvciIsIl9Db25uZWN0b3IiLCJfcmVmIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiUHVzaGVyIiwiY29ubmVjdGlvbiIsInNvY2tldF9pZCIsImRpc2Nvbm5lY3QiLCJTb2NrZXRJb0Nvbm5lY3RvciIsImdldFNvY2tldElPIiwiY2xpZW50IiwiRXJyb3IiLCJodHRwIiwicmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IiLCJyZWdpc3RlckF4aW9zUmVxdWVzdEludGVyY2VwdG9yIiwialF1ZXJ5IiwicmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAiLCJjb25uZWN0b3IiLCJpbnRlcmNlcHRvcnMiLCJzb2NrZXRJZCIsInNldCIsInVzZSIsImNvbmZpZyIsImFqYXgiLCJhamF4U2V0dXAiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0UmVxdWVzdEhlYWRlciIsIl9jaGFubmVsIiwicHJpdmF0ZUNoYW5uZWwiLCJwcmVzZW5jZUNoYW5uZWwiLCJsZWF2ZSIsImFzc2lnblBlcm1pc3Npb24iLCJhY3RpdmUiLCJhY3RpdmF0ZVRoaXNUYWIiLCJ1c2VycyIsImVsIiwiY29tcG9uZW50cyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fY29tcG9uZW50c19hZG1pbl9pbmRleF92dWVfX19kZWZhdWx0IiwibmF2YmFyIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19jb21wb25lbnRzX3BhcnRpYWxzX25hdmJhcl92dWVfX19kZWZhdWx0Iiwibm90aWZpY2F0aW9uUG9wdXAiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX2NvbXBvbmVudHNfcGFydGlhbHNfbm90aWZpY2F0aW9uUG9wdXBfdnVlX19fZGVmYXVsdCIsIm9wZW5Nb2RhbCIsInNob3dJbnZpdGVNZW1iZXJGb3JtIiwiY2xvc2VNb2RhbCIsInNlbmRJbnZpdGF0aW9uIiwicHJvZmlsZURyb3Bkb3duIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19wcm9maWxlRHJvcGRvd25fX19kZWZhdWx0IiwiYXR0YWNoUGVybWlzc2lvbkZvcm0iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2Zvcm1zX2F0dGFjaFBlcm1pc3Npb25Gb3JtX19fZGVmYXVsdCIsInNob3dVcGRhdGVNb2RhbCIsImNsb3NlVXBkYXRlTW9kYWwiLCJ2ZXJzaW9uIiwiY2hlY2tGb3JVcGRhdGVzIiwibGFzdFVwZGF0ZWQiLCJEYXRlIiwiZ2V0RnVsbFllYXIiXSwibWFwcGluZ3MiOiJ5Q0FBQSxJQWFBQSxFQWJBQyxFQUFBLE9BYUFDLENBWEFELEVBQUEsUUFFQUEsRUFBQSxTQUVBLEVBRUEsS0FFQSxLQUVBLE1BVUFFLEVBQUFDLFFBQUFKLEVBQUFJLDhCQ3BCQUQsRUFBQUMsU0FBa0JDLE9BRmxCLFdBQTBCLElBQUFDLEVBQUFDLEtBQWFDLEVBQUFGLEVBQUFHLGVBQTBCQyxFQUFBSixFQUFBSyxNQUFBRCxJQUFBRixFQUF3QixPQUFBRSxFQUFBLE9BQWlCRSxZQUFBLHlCQUFBQyxPQUE0Q0MsT0FBQSxZQUFBUixFQUFBUyxhQUF5Q0wsRUFBQSxPQUFZRSxZQUFBLGtDQUE0Q04sRUFBQVUs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RFUsS0FBQSxpREFBc0Q1QyxFQUFBVSxHQUFBLHVCQUFBVixFQUFBVSxHQUFBLEtBQUFOLEVBQUEsT0FBc0RFLFlBQUEsU0FBbUJOLEVBQUFVLEdBQUEsYUFBQVYsRUFBQVcsSUFBQSxJQUFBeVcsTUFBQUMsZUFBQSxLQUFBalgsRUFBQSxLQUFzRUUsWUFBQSx1Q0FBQTRCLE9BQTBEVSxLQUFBLGtDQUF1QzVDLEVBQUFVLEdBQUEscUJBRXQ0RXlDIiwiZmlsZSI6Ii9qcy9hZG1pbi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3Blcm1pc3Npb25zQm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi03MzdkZjNiYlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Blcm1pc3Npb25zQm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3Blcm1pc3Npb25zQm9hcmQudnVlXG4vLyBtb2R1bGUgaWQgPSAvK3dvXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInctZnVsbCBteC0yIG1kOm14LWF1dG9cIixjbGFzczp7J2hpZGRlbic6IChfdm0uYWN0aXZlVGFiICE9ICdhY3Rpdml0eScpfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtZ3JleS1kYXJrZXIgdGV4dC1sZyBtYi00XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdGaWx0ZXJzJykpKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgdGV4dC1ncmV5LWRhcmtlc3QgLW1sLTQgbWItOFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibXgtNCBweS00IGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHJlbGF0aXZlXCJ9LFtfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5hY3Rpdml0eSksZXhwcmVzc2lvbjpcImFjdGl2aXR5XCJ9XSxzdGF0aWNDbGFzczpcInctZnVsbCBibG9jayBhcHBlYXJhbmNlLW5vbmUgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmV5IHJvdW5kZWQgdGV4dC1ncmV5LWRhcmtlciBweS0zIHB4LTQgcHItOFwiLG9uOntcImNoYW5nZVwiOmZ1bmN0aW9uKCRldmVudCl7dmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSkubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSBcIl92YWx1ZVwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuIHZhbH0pOyBfdm0uYWN0aXZpdHk9JGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdfX19LFtfYygnb3B0aW9uJyx7YXR0cnM6e1widmFsdWVcIjpcImFjdGl2aXR5XCIsXCJkaXNhYmxlZFwiOlwiXCIsXCJoaWRkZW5cIjpcIlwifX0sW192bS5fdihfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0ZpbHRlciBieSBBY3Rpdml0eScpKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdvcHRpb24nLHtzdGF0aWNDbGFzczpcIm15LTIgdGV4dC1sZ1wiLGRvbVByb3BzOntcInZhbHVlXCI6MX19LFtfdm0uX3YoXCJuYW1lXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYSBmYS1jaGV2cm9uLWRvd24gcG9pbnRlci1ldmVudHMtbm9uZSBpdGVtcy1jZW50ZXIgdGV4dC1ncmV5LWRhcmsgYWJzb2x1dGUgcGluLXIgbXItM1wifSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm14LTQgcHktNCBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciByZWxhdGl2ZVwifSxbX2MoJ3NlbGVjdCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOihfdm0udXNlciksZXhwcmVzc2lvbjpcInVzZXJcIn1dLHN0YXRpY0NsYXNzOlwidy1mdWxsIGJsb2NrIGFwcGVhcmFuY2Utbm9uZSBiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyZXkgcm91bmRlZCB0ZXh0LWdyZXktZGFya2VyIHB5LTMgcHgtNCBwci04XCIsb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtyZXR1cm4gdmFsfSk7IF92bS51c2VyPSRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXX19fSxbX2MoJ29wdGlvbicse2F0dHJzOntcInZhbHVlXCI6XCJ1c2VyXCIsXCJkaXNhYmxlZFwiOlwiXCIsXCJoaWRkZW5cIjpcIlwifX0sW192bS5fdihfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0ZpbHRlciBieSBVc2VyJykpKV0pLF92bS5fdihcIiBcIiksX2MoJ29wdGlvbicse3N0YXRpY0NsYXNzOlwibXktMiB0ZXh0LWxnXCIsZG9tUHJvcHM6e1widmFsdWVcIjoyfX0sW192bS5fdihcIm5hbWVcIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcInctMS82IGZhIGZhLWNoZXZyb24tZG93biBwb2ludGVyLWV2ZW50cy1ub25lIGl0ZW1zLWNlbnRlciB0ZXh0LWdyZXktZGFyayBhYnNvbHV0ZSBwaW4tciBtci0zXCJ9KV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibXgtNCBweS00IGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHJlbGF0aXZlXCJ9LFtfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5kYXRlKSxleHByZXNzaW9uOlwiZGF0ZVwifV0sc3RhdGljQ2xhc3M6XCJ3LWZ1bGwgYmxvY2sgYXBwZWFyYW5jZS1ub25lIGJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JleSByb3VuZGVkIHRleHQtZ3JleS1kYXJrZXIgcHktMyBweC00IHByLThcIixvbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe3ZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO3JldHVybiB2YWx9KTsgX3ZtLmRhdGU9JGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdfX19LFtfYygnb3B0aW9uJyx7YXR0cnM6e1widmFsdWVcIjpcImRhdGVcIixcImRpc2FibGVkXCI6XCJcIixcImhpZGRlblwiOlwiXCJ9fSxbX3ZtLl92KF92bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnRmlsdGVyIGJ5IERhdGUnKSkpXSksX3ZtLl92KFwiIFwiKSxfYygnb3B0aW9uJyx7c3RhdGljQ2xhc3M6XCJteS0yIHRleHQtbGdcIixkb21Qcm9wczp7XCJ2YWx1ZVwiOjN9fSxbX3ZtLl92KFwibmFtZVwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnaScse3N0YXRpY0NsYXNzOlwidy0xLzYgZmEgZmEtY2hldnJvbi1kb3duIHBvaW50ZXItZXZlbnRzLW5vbmUgaXRlbXMtY2VudGVyIHRleHQtZ3JleS1kYXJrIGFic29sdXRlIHBpbi1yIG1yLTNcIn0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJteC00IHB5LTRcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJnLXRlYWwtbGlnaHQgdGV4dC13aGl0ZSBmb250LW1lZGl1bSBob3ZlcjpiZy10ZWFsLWRhcmsgcHktMyBweC04IHJvdW5kZWRcIn0sWyhfdm0ubG9hZGluZyk/W19jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYXMgZmEtc3Bpbm5lciBmYS1zcGluXCJ9KV06X3ZtLl9lKCksX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdBcHBseScpKStcIlxcbiAgICBcIildLDIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtZ3JleS1kYXJrZXJcIn0sW192bS5fbCgoX3ZtLmFjdGl2aXRpZXMpLGZ1bmN0aW9uKHZhbHVlLGtleSl7cmV0dXJuIFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiZy13aGl0ZSBib3JkZXIgcC0zIHRleHQtZ3JleS1kYXJrIGlubGluZS1mbGV4IHJvdW5kZWRcIn0sW192bS5fdihfdm0uX3Moa2V5KSldKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgodmFsdWUpLGZ1bmN0aW9uKGFjdGl2aXR5KXtyZXR1cm4gW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImgtMTYgYm9yZGVyLWwgbWwtMiBtZDptbC02IC1teS00XCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCJ9LFtfdm0uX20oMCx0cnVlKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtc20gcHgtNCBtZDptci00XCJ9LFtfdm0uX3YoX3ZtLl9zKGFjdGl2aXR5LnRpbWUpKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1ncm93IGJnLXdoaXRlIGJvcmRlciBweC00IG1kOnB4LTggcHktNCByb3VuZGVkXCJ9LFtfYygnYScse3N0YXRpY0NsYXNzOlwidGV4dC1ibHVlIGZvbnQtbWVkaXVtIGN1cnNvci1wb2ludGVyIG5vLXVuZGVybGluZVwiLGF0dHJzOntcImhyZWZcIjonL3VzZXJzLycgKyBhY3Rpdml0eS5jYXVzZXIudXNlcm5hbWV9fSxbX3ZtLl92KF92bS5fcyhhY3Rpdml0eS5jYXVzZXIubmFtZSkpXSksX3ZtLl92KFwiXFxuICAgICAgICAgICAgXCIrX3ZtLl9zKGFjdGl2aXR5LmRlc2NyaXB0aW9uKStcIiBcIitfdm0uX3MoYWN0aXZpdHkuc3ViamVjdF90eXBlKStcIlxcbiAgICAgICAgICAgIFwiKSwoYWN0aXZpdHkuc3ViamVjdCk/X2MoJ2EnLHtzdGF0aWNDbGFzczpcInRleHQtYmx1ZSBmb250LW1lZGl1bSBjdXJzb3ItcG9pbnRlciBuby11bmRlcmxpbmVcIixhdHRyczp7XCJocmVmXCI6YWN0aXZpdHkuc3ViamVjdF90eXBlICsgJ3MvJyArIGFjdGl2aXR5LnN1YmplY3RfaWR9fSxbX3ZtLl92KF92bS5fcyhhY3Rpdml0eS5zdWJqZWN0Lm5hbWUpKV0pOl92bS5fZSgpXSldKV19KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImgtOCBib3JkZXItbCBtbC0yIG1kOm1sLTZcIn0pXX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaC0xNiBib3JkZXItbCBib3JkZXItZ3JleS1saWdodGVyIC1tdC04IG1sLTIgbWQ6bWwtNlwifSldLDIpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWNlbnRlciBtdC0xNiBtYi04XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTMgYmctd2hpdGUgcm91bmRlZCBzaGFkb3cgdGV4dC10ZWFsIGN1cnNvci1wb2ludGVyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0xvYWQgTW9yZScpKStcIlxcbiAgICBcIildKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYm9yZGVyLWwgZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgbWwtMiBtZDptbC02IHNlbGYtc3RyZXRjaFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicm91bmRlZC1mdWxsIGJnLWdyZXktbGlnaHRlciBib3JkZXIgYm9yZGVyLXBpbmsgcC0xIC1tbC0yIG1kOm1yLTRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInJvdW5kZWQtZnVsbCBiZy1waW5rIHAtMVwifSldKV0pfV1cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMzU3YzZlMmRcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWN0aXZpdHlCb2FyZC52dWVcbi8vIG1vZHVsZSBpZCA9IDFkMXJcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwiPHRlbXBsYXRlPlxuPGRpdj5cbiAgPGRpdiA6Y2xhc3M9XCJ7J2hpZGRlbic6ICFmb3JtU2hvd259XCIgY2xhc3M9XCJhYnNvbHV0ZSBjb250YWluZXIgbXgtYXV0byB3LTUvNiBtZDp3LTMvNSBsZzp3LTIvNSBiZy13aGl0ZSByb3VuZGVkIHNoYWRvdy1sZyB6LTEwXCIgc3R5bGU9XCJ0b3A6IDIwdmg7bGVmdDogMDtyaWdodDogMDtcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwLTRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC00XCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrIHVwcGVyY2FzZSB0cmFja2luZy13aWRlIHRleHQtZ3JleS1kYXJrZXIgdGV4dC14cyBmb250LWJvbGQgbWItMlwiIGZvcj1cImdyaWQtZmlyc3QtbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgUGVybWlzc2lvbnNcbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCB2LW1vZGVsPVwicGVybWlzc2lvbl9pZFwiIGNsYXNzPVwidy01LzYgYmxvY2sgYXBwZWFyYW5jZS1ub25lIHctZnVsbCBiZy1ncmV5LWxpZ2h0ZXIgYm9yZGVyIGJvcmRlci1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmtlciBweS0zIHB4LTQgcHItOCByb3VuZGVkXCIgaWQ9XCJ1c2VyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQgZGlzYWJsZWQgaGlkZGVuPlNlbGVjdCBQZXJtaXNzaW9uIHRvIEFkZCB0byBSb2xlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInBlcm1pc3Npb24gaW4gcGVybWlzc2lvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gOnZhbHVlPVwicGVybWlzc2lvbi5pZFwiIGNsYXNzPVwibXktMiB0ZXh0LWxnXCI+e3sgcGVybWlzc2lvbi5uYW1lIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ3LTEvNiBmYSBmYS1jaGV2cm9uLWRvd24gcG9pbnRlci1ldmVudHMtbm9uZSBmbGV4IGl0ZW1zLWNlbnRlciB0ZXh0LWdyZXktZGFya2VyIC1tbC04XCI+PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cganVzdGlmeS1iZXR3ZWVuIHB5LTQgcHgtOCBiZy1ncmV5LWxpZ2h0ZXIgcm91bmRlZFwiPlxuICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiY2xvc2VGb3JtXCIgY2xhc3M9XCJ0ZXh0LXJlZC1saWdodGVyIGhvdmVyOmZvbnQtYm9sZCBob3Zlcjp0ZXh0LXJlZC1saWdodFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiYXNzaWduUGVybWlzc2lvblwiIGNsYXNzPVwiYmctdGVhbC1saWdodCB0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIGhvdmVyOmJnLXRlYWwtZGFyayBweS00IHB4LTggcm91bmRlZFwiPkFzc2lnbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IEBjbGljaz1cImNsb3NlRm9ybVwiIDpjbGFzcz1cInsnaGlkZGVuJzogIWZvcm1TaG93bn1cIiBjbGFzcz1cImgtc2NyZWVuIHctc2NyZWVuIGZpeGVkIHBpbiBiZy1ncmV5LWRhcmtlc3Qgb3BhY2l0eS0yNVwiPjwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczogWydmb3JtU2hvd24nLCAncm9sZUlkJ10sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgcGVybWlzc2lvbnM6IFtdLFxuICAgIHBlcm1pc3Npb25faWQ6IG51bGxcbiAgfSksXG4gIG1vdW50ZWQgKCkge1xuICAgIGF4aW9zLmdldCgnYWRtaW4vcGVybWlzc2lvbnMnKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICB0aGlzLnBlcm1pc3Npb25zID0gcmVzcG9uc2UuZGF0YS5wZXJtaXNzaW9uc1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlKVxuICAgICAgICB9KVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VGb3JtICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJylcbiAgICB9LFxuICAgIGFzc2lnblBlcm1pc3Npb24gKCkge1xuICAgICAgYXhpb3MucG9zdCgnL2FkbWluL3JvbGVzLycgKyB0aGlzLnJvbGVJZCArICcvcGVybWlzc2lvbnMnLCB7cGVybWlzc2lvbl9pZDogdGhpcy5wZXJtaXNzaW9uX2lkfSlcbiAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgdGhpcy5wZXJtaXNzaW9uX2lkID0gbnVsbFxuICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3Blcm1pc3Npb24tYXNzaWduZWQnLCByZXNwb25zZS5kYXRhLnBlcm1pc3Npb24pXG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICB9KVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2Fzc2lnblBlcm1pc3Npb25Gb3JtLnZ1ZSIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3VzZXJzQm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01ODM2MWQ0OFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3VzZXJzQm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3VzZXJzQm9hcmQudnVlXG4vLyBtb2R1bGUgaWQgPSAzdkw0XG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsIjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJweC00IHNlbGYtY2VudGVyXCI+XG4gICAgPGRpdiBpZD1cIm5vdGlmaWNhdGlvblwiIGNsYXNzPVwidGV4dC10ZWFsLWxpZ2h0IHRleHQtYmFzZSBuby11bmRlcmxpbmUgY3Vyc29yLXBvaW50ZXJcIiBAY2xpY2s9XCJ0b2dnbGVOb3RpZmljYXRpb25cIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYXIgZmEtYmVsbCBmb250LWJvbGQgdGV4dC14bFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgPGkgdi1pZj1cInVucmVhZE5vdGlmaWNhdGlvblwiIGNsYXNzPVwiZmEgZmEtY2lyY2xlIHRleHQtcmVkLWxpZ2h0IHRleHQtc20gYWJzb2x1dGUgcGluLXQgbXQtMyBtbC0zXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgdi1pZj1cIm5vdGlmaWNhdGlvblNob3duXCIgY2xhc3M9XCJhYnNvbHV0ZSBiZy13aGl0ZSB3LTY0IG10LTUgbXItOCBweS00IHNoYWRvdy1sZyByb3VuZGVkIHotNTBcIiBzdHlsZT1cInJpZ2h0OiA1JTtcIj5cbiAgICAgICAgPGEgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBsaXN0LXJlc2V0IHB4LTQgcHktMiB0ZXh0LWdyZXktZGFyayBuby11bmRlcmxpbmUgYmxvY2tcIiBocmVmPVwiI1wiPlxuICAgICAgICAgICAgPGltZyBjbGFzcz1cInctMTAgaC0xMCByb3VuZGVkLWZ1bGwgbXItMlwiIDpzcmM9XCJnZW5lcmF0ZVVybCh1c2VyLmF2YXRhcilcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB5LTEgdGV4dC1zbVwiPlxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ZWQgb24geW91ciBwb3N0XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB5LTEgdGV4dC14c1wiPlxuICAgICAgICAgICAgICAgICAgICAyIG1pbiBhZ29cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGNsYXNzPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgbGlzdC1yZXNldCBweC00IHB5LTIgdGV4dC1ncmV5LWRhcmsgbm8tdW5kZXJsaW5lIGJsb2NrXCIgaHJlZj1cIiNcIj5cbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJ3LTEwIGgtMTAgcm91bmRlZC1mdWxsIG1yLTJcIiA6c3JjPVwiZ2VuZXJhdGVVcmwodXNlci5hdmF0YXIpXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJweS0xIHRleHQtc21cIj5cbiAgICAgICAgICAgICAgICAgICAgY29tbWVudGVkIG9uIHlvdXIgcG9zdFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJweS0xIHRleHQteHNcIj5cbiAgICAgICAgICAgICAgICAgICAgMiBtaW4gYWdvXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9hPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImJsb2NrIGJvcmRlci10XCI+PC9zcGFuPlxuICAgICAgICA8YSBjbGFzcz1cImxpc3QtcmVzZXQgcHgtNCBwdC0yIHRleHQtYmx1ZS1saWdodCB0ZXh0LWNlbnRlciBuby11bmRlcmxpbmUgYmxvY2tcIiBocmVmPVwiL25vdGlmaWNhdGlvbnNcIj5cbiAgICAgICAgICAgIFZpZXcgQWxsXG4gICAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YTogKCkgPT4gKHtcbiAgICB1c2VyOiBuYXZiYXIudXNlcixcbiAgICB0b2tlbjogTGFyYXZlbC5jc3JmVG9rZW4sXG4gICAgdXJsOiBuYXZiYXIubmF2VXJsLFxuICAgIG5vdGlmaWNhdGlvblNob3duOiBmYWxzZSxcbiAgICB1bnJlYWROb3RpZmljYXRpb246IGZhbHNlLFxuICB9KSxcbiAgbWV0aG9kczoge1xuICAgIHRvZ2dsZU5vdGlmaWNhdGlvbihldmVudCkge1xuICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uU2hvd24pIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5oaWRlTm90aWZpY2F0aW9uKVxuICAgICAgICB0aGlzLmhpZGVOb3RpZmljYXRpb24oZXZlbnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLmhpZGVOb3RpZmljYXRpb24pXG4gICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbigpXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Tm90aWZpY2F0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5wcm9maWxlRHJvcGRvd25TaG93bikge1xuICAgICAgICB0aGlzLnByb2ZpbGVEcm9wZG93blNob3duID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIHRoaXMubm90aWZpY2F0aW9uU2hvd24gPSB0cnVlXG4gICAgfSxcbiAgICBoaWRlTm90aWZpY2F0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJrZXl1cFwiICYmIGV2ZW50LmtleSAhPT0gXCJFc2NhcGVcIikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHRoaXMubm90aWZpY2F0aW9uU2hvd24gPSBmYWxzZVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25vdGlmaWNhdGlvbkRyb3Bkb3duLnZ1ZSIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL25vdGlmaWNhdGlvbkRyb3Bkb3duLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2FjNTg0ZDZcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9ub3RpZmljYXRpb25Ecm9wZG93bi52dWVcIilcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbm90aWZpY2F0aW9uRHJvcGRvd24udnVlXG4vLyBtb2R1bGUgaWQgPSA4dEN3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2Fib3V0Qm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01ZGMzYTE0MlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2Fib3V0Qm9hcmQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2Fib3V0Qm9hcmQudnVlXG4vLyBtb2R1bGUgaWQgPSBBYXpsXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsIjx0ZW1wbGF0ZT5cbjxkaXYgOmNsYXNzPVwieydoaWRkZW4nOiAoYWN0aXZlVGFiICE9ICdhYm91dCcpfVwiIGNsYXNzPVwidy1mdWxsIG1iLThcIj5cbiAgPGRpdiA6Y2xhc3M9XCJ7J2hpZGRlbic6ICFzaG93VXBkYXRlTW9kYWx9XCI+XG4gICAgICA8ZGl2IEBjbGljaz1cImNsb3NlVXBkYXRlTW9kYWxcIiBjbGFzcz1cImFic29sdXRlIHBpbiBvcGFjaXR5LTc1IGJnLWdyZXlcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZCBwaW4teCB3LTEvMyB6LTEwIGJnLWdyZXktbGlnaHRlciBteC1hdXRvIHAtOCByb3VuZGVkXCI+XG4gICAgICAgICAgPHAgY2xhc3M9XCJweS0yXCI+XG4gICAgICAgICAgICB7eyBtZXNzYWdlIH19XG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBwdC04IGJnLWdyZXktbGlnaHRlciByb3VuZGVkXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiY2xvc2VVcGRhdGVNb2RhbFwiIGNsYXNzPVwidGV4dC1yZWQtbGlnaHRlciBob3Zlcjpmb250LWJvbGQgaG92ZXI6dGV4dC1yZWQtbGlnaHQgaG92ZXI6Ym9yZGVyLXJlZC1saWdodCBib3JkZXItcmVkLWxpZ2h0ZXIgYm9yZGVyIHB4LTQgcHktMyByb3VuZGVkXCI+T2s8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIG14LTQgbWQ6bXgtYXV0byBweS04IGJnLXdoaXRlIHJvdW5kZWQgc2hhZG93IHRleHQtY2VudGVyIHRleHQtZ3JleS1kYXJrZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwicGItNCB0ZXh0LTN4bFwiPlxuICAgICAgR29vZHdvcmtcbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicC0yXCI+XG4gICAgICBWZXJzaW9uOiA8c3BhbiBjbGFzcz1cInBsLTIgdGV4dC14bCB0ZXh0LWdyZXktZGFya2VzdFwiPnt7IHZlcnNpb24gfX08L3NwYW4+XG4gICAgICA8YnV0dG9uIEBjbGljaz1cImNoZWNrRm9yVXBkYXRlc1wiIGNsYXNzPVwibm8tdW5kZXJsaW5lIHAtNCBtLTQgbWItMCBiZy13aGl0ZSB0ZXh0LWJhc2UgdGV4dC10ZWFsIHJvdW5kZWQgYm9yZGVyIGJvcmRlci1ncmV5LWxpZ2h0XCI+XG4gICAgICAgIHt7ICdDaGVjayBmb3IgVXBkYXRlcycgfCBsb2NhbGl6ZSB9fVxuICAgICAgICA8ZGl2IHYtaWY9XCJsb2FkaW5nXCIgY2xhc3M9XCJpbmxpbmVcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zcGlubmVyIGZhLXNwaW5cIj48L2k+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInAtMlwiPlxuICAgICAge3sgJ0xhc3QgVXBkYXRlZCcgfCBsb2NhbGl6ZSB9fTogPHNwYW4gY2xhc3M9XCJwbC0yIHRleHQteGwgdGV4dC1ncmV5LWRhcmtlc3RcIj57eyBsYXN0VXBkYXRlZCB9fTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicC0yXCI+XG4gICAgICB7eyAnQXV0aG9yJyB8IGxvY2FsaXplIH19OiA8YSBocmVmPVwiaHR0cHM6Ly9oYXNuYXllZW4uZ2l0aHViLmlvL1wiIGNsYXNzPVwicGwtMiB0ZXh0LXhsIHRleHQtYmx1ZS1saWdodCBuby11bmRlcmxpbmVcIj5OZWhhbCBIYXNuYXllZW48L2E+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInAtMlwiPlxuICAgICAge3sgJ1N1Ym1pdCBpc3N1ZSAmIGZlZWRiYWNrIGF0JyB8IGxvY2FsaXplIH19OiA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2lsdW1pbmFyL2dvb2R3b3JrL2lzc3Vlc1wiIGNsYXNzPVwicGwtMiB0ZXh0LXhsIHRleHQtYmx1ZS1saWdodCBuby11bmRlcmxpbmVcIj5Hb29kd29yayBJc3N1ZXM8L2E+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cInB0LThcIj5cbiAgICAgIMKpIHt7IChuZXcgRGF0ZSgpKS5nZXRGdWxsWWVhcigpIH19IDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vaWx1bWluYXIvXCIgY2xhc3M9XCJ0ZXh0LXhsIHRleHQtYmx1ZS1saWdodCBuby11bmRlcmxpbmVcIj5JbHVtaW5hcjwvYT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBhY3RpdmVUYWI6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH1cbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBzaG93VXBkYXRlTW9kYWw6IGZhbHNlLFxuICAgIHZlcnNpb246IDAuMCxcbiAgICBsYXN0VXBkYXRlZDogJycsXG4gICAgbWVzc2FnZTogJycsXG4gIH0pLFxuICBjcmVhdGVkICgpIHtcbiAgICB0aGlzLnZlcnNpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJhcHAtdmVyc2lvblwiXScpLmNvbnRlbnRcbiAgICB0aGlzLmxhc3RVcGRhdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwibGFzdC11cGRhdGVkXCJdJykuY29udGVudFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2hlY2tGb3JVcGRhdGVzICgpIHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgIGF4aW9zLmdldCgnL2FkbWluL2NoZWNrLWZvci11cGRhdGUnKVxuICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHJlc3BvbnNlLmRhdGEubWVzc2FnZVxuICAgICAgICAgICAgIHRoaXMuc2hvd1VwZGF0ZU1vZGFsID0gdHJ1ZVxuICAgICAgICAgICB9KVxuICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2VcbiAgICAgICAgICAgICB0aGlzLnNob3dVcGRhdGVNb2RhbCA9IHRydWVcbiAgICAgICAgICAgfSlcbiAgICB9LFxuICAgIGNsb3NlVXBkYXRlTW9kYWwgKCkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc2hvd1VwZGF0ZU1vZGFsID0gZmFsc2VcbiAgICB9LFxuICAgIHVwZGF0ZVNvZnR3YXJlICgpIHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgIGF4aW9zLmdldCgnL2FkbWluL3VwZGF0ZS1zb2Z0d2FyZScpXG4gICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlXG4gICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlXG4gICAgICAgICAgICAgdGhpcy5zaG93VXBkYXRlTW9kYWwgPSBmYWxzZVxuICAgICAgICAgICB9KVxuICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2VcbiAgICAgICAgICAgICB0aGlzLnNob3dVcGRhdGVNb2RhbCA9IGZhbHNlXG4gICAgICAgICAgIH0pXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWJvdXRCb2FyZC52dWUiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnbmF2Jyx7c3RhdGljQ2xhc3M6XCJiZy13aGl0ZSBmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBoLTEyIHBsLTQgbWQ6cHgtNCBzaGFkb3dcIn0sW19jKCdhJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXRlYWwgdGV4dC0yeGwgbm8tdW5kZXJsaW5lIHNlbGYtY2VudGVyXCIsYXR0cnM6e1wiaHJlZlwiOl92bS51cmwuc2l0ZX19LFtfdm0uX3YoXCJcXG4gICAgICBHT09EV09SS1xcbiAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZDpmbGV4XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGJvcmRlci1sIGgtZnVsbFwifSxbX2MoJ25vdGlmaWNhdGlvbi1kcm9wZG93bicpLF92bS5fdihcIiBcIiksX2MoJ3Byb2ZpbGUtZHJvcGRvd24nKV0sMSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTUyYWVlYWE4XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25hdmJhci52dWVcbi8vIG1vZHVsZSBpZCA9IEJEUnpcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA3IiwiPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cIm1iLTQgdGV4dC1jZW50ZXJcIj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJvcGVuTW9kYWxcIiBjbGFzcz1cIm5vLXVuZGVybGluZSBwLTIgbXktNCBtYi0wIGJnLXdoaXRlIHRleHQtYmFzZSB0ZXh0LXRlYWwgcm91bmRlZCBzaGFkb3dcIj5JbnZpdGUgTmV3IE1lbWJlcjwvYnV0dG9uPlxuICA8ZGl2IDpjbGFzcz1cInsnaGlkZGVuJzogIXNob3dJbnZpdGVNZW1iZXJGb3JtfVwiPlxuICAgICAgPGRpdiBAY2xpY2s9XCJjbG9zZU1vZGFsXCIgY2xhc3M9XCJhYnNvbHV0ZSBwaW4gb3BhY2l0eS03NSBiZy1ncmV5IHotMTBcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZCBwaW4teCBtZDp3LTEvMyB6LTEwIGJnLWdyZXktbGlnaHRlciBteC0yIG1kOm14LWF1dG8gcC04IHJvdW5kZWRcIj5cbiAgICAgICAgICA8cCBjbGFzcz1cInB5LTJcIj5cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwidy1mdWxsIHNoYWRvdyBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHRleHQtZ3JleS1kYXJrZXJcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiSm9obiBEb2VcIiB2LW1vZGVsPVwibmFtZVwiPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCBjbGFzcz1cInB5LTJcIj5cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwidy1mdWxsIHNoYWRvdyBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHRleHQtZ3JleS1kYXJrZXJcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiam9obkBleGFtcGxlLmNvbVwiIHYtbW9kZWw9XCJlbWFpbFwiPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWJldHdlZW4gcHQtOCBiZy1ncmV5LWxpZ2h0ZXIgcm91bmRlZFwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cImNsb3NlTW9kYWxcIiBjbGFzcz1cInRleHQtcmVkLWxpZ2h0IGhvdmVyOmZvbnQtYm9sZFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInNlbmRJbnZpdGF0aW9uXCIgY2xhc3M9XCJiZy10ZWFsLWxpZ2h0IHRleHQtd2hpdGUgZm9udC1tZWRpdW0gaG92ZXI6YmctdGVhbC1kYXJrIHB5LTMgcHgtNCByb3VuZGVkXCI+U2VuZCBJbnZpdGF0aW9uPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgZGF0YTogKCkgPT4gKHtcbiAgICAgICAgc2hvd0ludml0ZU1lbWJlckZvcm06IGZhbHNlLFxuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgZW1haWw6ICcnXG4gICAgICB9KSxcbiAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgb3Blbk1vZGFsICgpIHtcbiAgICAgICAgICB0aGlzLnNob3dJbnZpdGVNZW1iZXJGb3JtID0gdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZU1vZGFsICgpIHtcbiAgICAgICAgICB0aGlzLnNob3dJbnZpdGVNZW1iZXJGb3JtID0gZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc2VuZEludml0YXRpb24gKCkge1xuICAgICAgICAgIGF4aW9zLnBvc3QoJy9yZWdpc3Rlci9pbnZpdGUnLCB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBlbWFpbDogdGhpcy5lbWFpbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdGF0dXMgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgIEV2ZW50QnVzLiRlbWl0KCdub3RpZmljYXRpb24nLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UsIHJlc3BvbnNlLmRhdGEuc3RhdHVzKVxuICAgICAgICAgICAgICB0aGlzLm5hbWUgPSAnJ1xuICAgICAgICAgICAgICB0aGlzLmVtYWlsID0gJydcbiAgICAgICAgICAgICAgdGhpcy5zaG93SW52aXRlTWVtYmVyRm9ybSA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBFdmVudEJ1cy4kZW1pdCgnbm90aWZpY2F0aW9uJywgZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlLCBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cylcbiAgICAgICAgICAgIHRoaXMubmFtZSA9ICcnXG4gICAgICAgICAgICB0aGlzLmVtYWlsID0gJydcbiAgICAgICAgICAgIHRoaXMuc2hvd0ludml0ZU1lbWJlckZvcm0gPSBmYWxzZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL2ludml0ZU1vZGFsLnZ1ZSIsIjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJjb250YWluZXIgbWQ6bXgtYXV0byBtZDpweC00IG1kOm15LTYgdy1mdWxsIG1kOnctbWQgbGc6dy1sZyB4bDp3LXhsIHh4bDp3LTJ4bCBib3JkZXItdCBtZDpib3JkZXItMFwiPlxuICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWJldHdlZW4gbWQ6anVzdGlmeS1hcm91bmQgbWQ6bXktNiBweS0yIG1kOnB5LTQgYmctd2hpdGUgc2hhZG93IG1kOnJvdW5kZWQgdGV4dC1ncmV5XCI+XG4gICAgPGRpdiBAY2xpY2s9XCJhY3RpdmF0ZVRoaXNUYWIoJ3VzZXJzJylcIlxuICAgICAgOmNsYXNzPVwiWyhhY3RpdmUgPT09ICd1c2VycycpID8gJ3RleHQtdGVhbC1kYXJrIGZvbnQtc2VtaWJvbGQgYm9yZGVyLXRlYWwgYm9yZGVyLWItMiBwYi0yIG1kOnBiLTQgLW1iLTIgbWQ6LW1iLTQnIDogJ2N1cnNvci1wb2ludGVyJywgJ3RleHQtY2VudGVyIHctMS8yJ11cIj5cbiAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXVzZXJzIHRleHQteGwgbWQ6dGV4dC0yeGxcIj48L2k+XG4gICAgICA8c3BhbiBjbGFzcz1cImJsb2NrIHRleHQteHMgZm9udC1yZWd1bGFyIHB0LTJcIj57eyAnVXNlcnMnIHwgbG9jYWxpemUgfX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBAY2xpY2s9XCJhY3RpdmF0ZVRoaXNUYWIoJ2F1dGgnKVwiXG4gICAgICA6Y2xhc3M9XCJbKGFjdGl2ZSA9PT0gJ2F1dGgnKSA/ICd0ZXh0LXRlYWwtZGFyayBmb250LXNlbWlib2xkIGJvcmRlci10ZWFsIGJvcmRlci1iLTIgcGItMiBtZDpwYi00IC1tYi0yIG1kOi1tYi00JyA6ICdjdXJzb3ItcG9pbnRlcicsICd0ZXh0LWNlbnRlciB3LTEvMiddXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb2NrLW9wZW4gdGV4dC14bCBtZDp0ZXh0LTJ4bFwiPjwvaT5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYmxvY2sgdGV4dC14cyBmb250LXJlZ3VsYXIgcHQtMlwiPnt7ICdSb2xlcyAmIFBlcm1pc3Npb25zJyB8IGxvY2FsaXplIH19PC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgQGNsaWNrPVwiYWN0aXZhdGVUaGlzVGFiKCdhY3Rpdml0eScpXCJcbiAgICAgIDpjbGFzcz1cIlsoYWN0aXZlID09PSAnYWN0aXZpdHknKSA/ICd0ZXh0LXRlYWwtZGFyayBmb250LXNlbWlib2xkIGJvcmRlci10ZWFsIGJvcmRlci1iLTIgcGItMiBtZDpwYi00IC1tYi0yIG1kOi1tYi00JyA6ICdjdXJzb3ItcG9pbnRlcicsICd0ZXh0LWNlbnRlciB3LTEvMiddXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS1ib2x0IHRleHQteGwgbWQ6dGV4dC0yeGxcIj48L2k+XG4gICAgICA8c3BhbiBjbGFzcz1cImJsb2NrIHRleHQteHMgZm9udC1yZWd1bGFyIHB0LTJcIj57eyAnQWN0aXZpdGllcycgfCBsb2NhbGl6ZSB9fTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IEBjbGljaz1cImFjdGl2YXRlVGhpc1RhYignYWJvdXQnKVwiXG4gICAgICA6Y2xhc3M9XCJbKGFjdGl2ZSA9PT0gJ2Fib3V0JykgPyAndGV4dC10ZWFsLWRhcmsgZm9udC1zZW1pYm9sZCBib3JkZXItdGVhbCBib3JkZXItYi0yIHBiLTQgLW1iLTIgbWQ6LW1iLTQnIDogJ2N1cnNvci1wb2ludGVyJywgJ3RleHQtY2VudGVyIHctMS8yJ11cIj5cbiAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWluZm8tY2lyY2xlIHRleHQteGwgbWQ6dGV4dC0yeGxcIj48L2k+XG4gICAgICA8c3BhbiBjbGFzcz1cImJsb2NrIHRleHQteHMgZm9udC1yZWd1bGFyIHB0LTJcIj57eyAnQWJvdXQnIHwgbG9jYWxpemUgfX08L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBqdXN0aWZ5LXN0YXJ0IG10LTRcIj5cbiAgICA8dXNlcnNCb2FyZCA6dXNlcnM9XCJ1c2Vyc1wiIDphY3RpdmVUYWI9XCJhY3RpdmVcIj48L3VzZXJzQm9hcmQ+XG4gICAgPGF1dGhCb2FyZCA6dXNlcnM9XCJ1c2Vyc1wiIDphY3RpdmVUYWI9XCJhY3RpdmVcIj48L2F1dGhCb2FyZD5cbiAgICA8YWN0aXZpdHlCb2FyZCA6YWN0aXZlVGFiPVwiYWN0aXZlXCI+PC9hY3Rpdml0eUJvYXJkPlxuICAgIDxhYm91dEJvYXJkIDphY3RpdmVUYWI9XCJhY3RpdmVcIj48L2Fib3V0Qm9hcmQ+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IGFib3V0Qm9hcmQgZnJvbSAnLi9hYm91dEJvYXJkLnZ1ZSdcbmltcG9ydCBhdXRoQm9hcmQgZnJvbSAnLi9hdXRoQm9hcmQudnVlJ1xuaW1wb3J0IHVzZXJzQm9hcmQgZnJvbSAnLi91c2Vyc0JvYXJkLnZ1ZSdcbmltcG9ydCBhY3Rpdml0eUJvYXJkIGZyb20gJy4vYWN0aXZpdHlCb2FyZC52dWUnXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHthYm91dEJvYXJkLCBhdXRoQm9hcmQsIHVzZXJzQm9hcmQsIGFjdGl2aXR5Qm9hcmR9LFxuICBwcm9wczoge1xuICAgIHVzZXJzOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHR5cGU6IEFycmF5XG4gICAgfVxuICB9LFxuICBkYXRhOiAoKSA9PiAoe1xuICAgIGFjdGl2ZTogJ3VzZXJzJyxcbiAgfSksXG4gIG1ldGhvZHM6IHtcbiAgICBhY3RpdmF0ZVRoaXNUYWIgKHRhYikge1xuICAgICAgaWYgKHRhYiAhPSB0aGlzLmFjdGl2ZSkge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHRhYlxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9pbmRleC52dWUiLCI8dGVtcGxhdGU+XG4gIDxkaXYgOmNsYXNzPVwieydoaWRkZW4nOiAoYWN0aXZlVGFiICE9ICdhY3Rpdml0eScpfVwiIGNsYXNzPVwidy1mdWxsIG14LTIgbWQ6bXgtYXV0b1wiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWdyZXktZGFya2VyIHRleHQtbGcgbWItNFwiPnt7ICdGaWx0ZXJzJyB8bG9jYWxpemUgfX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgdGV4dC1ncmV5LWRhcmtlc3QgLW1sLTQgbWItOFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm14LTQgcHktNCBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciByZWxhdGl2ZVwiPlxuICAgICAgICA8c2VsZWN0IHYtbW9kZWw9XCJhY3Rpdml0eVwiIGNsYXNzPVwidy1mdWxsIGJsb2NrIGFwcGVhcmFuY2Utbm9uZSBiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyZXkgcm91bmRlZCB0ZXh0LWdyZXktZGFya2VyIHB5LTMgcHgtNCBwci04XCI+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFjdGl2aXR5XCIgZGlzYWJsZWQgaGlkZGVuPnt7ICdGaWx0ZXIgYnkgQWN0aXZpdHknIHwgbG9jYWxpemUgfX08L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIDp2YWx1ZT1cIjFcIiBjbGFzcz1cIm15LTIgdGV4dC1sZ1wiPm5hbWU8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2hldnJvbi1kb3duIHBvaW50ZXItZXZlbnRzLW5vbmUgaXRlbXMtY2VudGVyIHRleHQtZ3JleS1kYXJrIGFic29sdXRlIHBpbi1yIG1yLTNcIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJteC00IHB5LTQgZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgcmVsYXRpdmVcIj5cbiAgICAgICAgPHNlbGVjdCB2LW1vZGVsPVwidXNlclwiIGNsYXNzPVwidy1mdWxsIGJsb2NrIGFwcGVhcmFuY2Utbm9uZSBiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyZXkgcm91bmRlZCB0ZXh0LWdyZXktZGFya2VyIHB5LTMgcHgtNCBwci04XCI+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInVzZXJcIiBkaXNhYmxlZCBoaWRkZW4+e3sgJ0ZpbHRlciBieSBVc2VyJyB8IGxvY2FsaXplIH19PC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiA6dmFsdWU9XCIyXCIgY2xhc3M9XCJteS0yIHRleHQtbGdcIj5uYW1lPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8aSBjbGFzcz1cInctMS82IGZhIGZhLWNoZXZyb24tZG93biBwb2ludGVyLWV2ZW50cy1ub25lIGl0ZW1zLWNlbnRlciB0ZXh0LWdyZXktZGFyayBhYnNvbHV0ZSBwaW4tciBtci0zXCI+PC9pPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXgtNCBweS00IGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHJlbGF0aXZlXCI+XG4gICAgICAgIDxzZWxlY3Qgdi1tb2RlbD1cImRhdGVcIiBjbGFzcz1cInctZnVsbCBibG9jayBhcHBlYXJhbmNlLW5vbmUgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmV5IHJvdW5kZWQgdGV4dC1ncmV5LWRhcmtlciBweS0zIHB4LTQgcHItOFwiPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkYXRlXCIgZGlzYWJsZWQgaGlkZGVuPnt7ICdGaWx0ZXIgYnkgRGF0ZScgfCBsb2NhbGl6ZSB9fTwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gOnZhbHVlPVwiM1wiIGNsYXNzPVwibXktMiB0ZXh0LWxnXCI+bmFtZTwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGkgY2xhc3M9XCJ3LTEvNiBmYSBmYS1jaGV2cm9uLWRvd24gcG9pbnRlci1ldmVudHMtbm9uZSBpdGVtcy1jZW50ZXIgdGV4dC1ncmV5LWRhcmsgYWJzb2x1dGUgcGluLXIgbXItM1wiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm14LTQgcHktNFwiPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImJnLXRlYWwtbGlnaHQgdGV4dC13aGl0ZSBmb250LW1lZGl1bSBob3ZlcjpiZy10ZWFsLWRhcmsgcHktMyBweC04IHJvdW5kZWRcIj5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJsb2FkaW5nXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3Bpbm5lciBmYS1zcGluXCI+PC9pPlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICB7eyAnQXBwbHknIHwgbG9jYWxpemUgfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmV5LWRhcmtlclwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKHZhbHVlLCBrZXkpIGluIGFjdGl2aXRpZXNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlciBwLTMgdGV4dC1ncmV5LWRhcmsgaW5saW5lLWZsZXggcm91bmRlZFwiPnt7IGtleSB9fTwvZGl2PlxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJhY3Rpdml0eSBpbiB2YWx1ZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJoLTE2IGJvcmRlci1sIG1sLTIgbWQ6bWwtNiAtbXktNFwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJvcmRlci1sIGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIG1sLTIgbWQ6bWwtNiBzZWxmLXN0cmV0Y2hcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdW5kZWQtZnVsbCBiZy1ncmV5LWxpZ2h0ZXIgYm9yZGVyIGJvcmRlci1waW5rIHAtMSAtbWwtMiBtZDptci00XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdW5kZWQtZnVsbCBiZy1waW5rIHAtMVwiPjwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtc20gcHgtNCBtZDptci00XCI+e3sgYWN0aXZpdHkudGltZSB9fTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZ3JvdyBiZy13aGl0ZSBib3JkZXIgcHgtNCBtZDpweC04IHB5LTQgcm91bmRlZFwiPlxuICAgICAgICAgICAgICA8YSA6aHJlZj1cIicvdXNlcnMvJyArIGFjdGl2aXR5LmNhdXNlci51c2VybmFtZVwiIGNsYXNzPVwidGV4dC1ibHVlIGZvbnQtbWVkaXVtIGN1cnNvci1wb2ludGVyIG5vLXVuZGVybGluZVwiPnt7IGFjdGl2aXR5LmNhdXNlci5uYW1lIH19PC9hPlxuICAgICAgICAgICAgICB7eyBhY3Rpdml0eS5kZXNjcmlwdGlvbiB9fSB7eyBhY3Rpdml0eS5zdWJqZWN0X3R5cGUgfX1cbiAgICAgICAgICAgICAgPGEgdi1pZj1cImFjdGl2aXR5LnN1YmplY3RcIiA6aHJlZj1cImFjdGl2aXR5LnN1YmplY3RfdHlwZSArICdzLycgKyBhY3Rpdml0eS5zdWJqZWN0X2lkXCIgY2xhc3M9XCJ0ZXh0LWJsdWUgZm9udC1tZWRpdW0gY3Vyc29yLXBvaW50ZXIgbm8tdW5kZXJsaW5lXCI+e3sgYWN0aXZpdHkuc3ViamVjdC5uYW1lIH19PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoLTggYm9yZGVyLWwgbWwtMiBtZDptbC02XCI+PC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPGRpdiBjbGFzcz1cImgtMTYgYm9yZGVyLWwgYm9yZGVyLWdyZXktbGlnaHRlciAtbXQtOCBtbC0yIG1kOm1sLTZcIj48L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktY2VudGVyIG10LTE2IG1iLThcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwLTMgYmctd2hpdGUgcm91bmRlZCBzaGFkb3cgdGV4dC10ZWFsIGN1cnNvci1wb2ludGVyXCI+XG4gICAgICAgIHt7ICdMb2FkIE1vcmUnIHwgbG9jYWxpemUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgYWN0aXZlVGFiOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBhY3Rpdml0eTogJ2FjdGl2aXR5JyxcbiAgICB1c2VyOiAndXNlcicsXG4gICAgZGF0ZTogJ2RhdGUnLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIGFjdGl2aXRpZXM6IFtdXG4gIH0pLFxuICBjcmVhdGVkICgpIHtcbiAgICBheGlvcy5nZXQoJ2FkbWluL2FjdGl2aXRpZXMnKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMuYWN0aXZpdGllcyA9IHJlc3BvbnNlLmRhdGEuYWN0aXZpdGllc1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IucmVzcG9uc2UpXG4gICAgICB9KVxuICB9XG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWN0aXZpdHlCb2FyZC52dWUiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9yb2xlc0JvYXJkLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjRiMTU2NTBcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yb2xlc0JvYXJkLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9yb2xlc0JvYXJkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gREswcFxuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2JyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWJzb2x1dGUgY29udGFpbmVyIG14LWF1dG8gdy01LzYgbWQ6dy0zLzUgbGc6dy0yLzUgYmctd2hpdGUgcm91bmRlZCBzaGFkb3ctbGcgei0xMFwiLGNsYXNzOnsnaGlkZGVuJzogIV92bS5mb3JtU2hvd259LHN0YXRpY1N0eWxlOntcInRvcFwiOlwiMjB2aFwiLFwibGVmdFwiOlwiMFwiLFwicmlnaHRcIjpcIjBcIn19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInAtNFwifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJibG9jayB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LWdyZXktZGFya2VyIHRleHQteHMgZm9udC1ib2xkIG1iLTJcIixhdHRyczp7XCJmb3JcIjpcImdyaWQtZmlyc3QtbmFtZVwifX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgIFJvbGVzXFxuICAgICAgICAgICAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCJ9LFtfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5yb2xlSWQpLGV4cHJlc3Npb246XCJyb2xlSWRcIn1dLHN0YXRpY0NsYXNzOlwidy01LzYgYmxvY2sgYXBwZWFyYW5jZS1ub25lIHctZnVsbCBiZy1ncmV5LWxpZ2h0ZXIgYm9yZGVyIGJvcmRlci1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmtlciBweS0zIHB4LTQgcHItOCByb3VuZGVkXCIsYXR0cnM6e1wiaWRcIjpcInVzZXJcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtyZXR1cm4gdmFsfSk7IF92bS5yb2xlSWQ9JGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdfX19LFtfYygnb3B0aW9uJyx7YXR0cnM6e1wic2VsZWN0ZWRcIjpcIlwiLFwiZGlzYWJsZWRcIjpcIlwiLFwiaGlkZGVuXCI6XCJcIn19LFtfdm0uX3YoXCJTZWxlY3QgUGVybWlzc2lvbiB0byBBZGQgdG8gUm9sZVwiKV0pLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0ucm9sZXMpLGZ1bmN0aW9uKHJvbGUpe3JldHVybiBbX2MoJ29wdGlvbicse3N0YXRpY0NsYXNzOlwibXktMiB0ZXh0LWxnXCIsZG9tUHJvcHM6e1widmFsdWVcIjpyb2xlLmlkfX0sW192bS5fdihfdm0uX3Mocm9sZS5uYW1lKSldKV19KV0sMiksX3ZtLl92KFwiIFwiKSxfYygnaScse3N0YXRpY0NsYXNzOlwidy0xLzYgZmEgZmEtY2hldnJvbi1kb3duIHBvaW50ZXItZXZlbnRzLW5vbmUgZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1ncmV5LWRhcmtlciAtbWwtOFwifSldKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBweS00IHB4LTggYmctZ3JleS1saWdodGVyIHJvdW5kZWRcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcInRleHQtcmVkLWxpZ2h0ZXIgaG92ZXI6Zm9udC1ib2xkIGhvdmVyOnRleHQtcmVkLWxpZ2h0XCIsb246e1wiY2xpY2tcIjpfdm0uY2xvc2VGb3JtfX0sW192bS5fdihcIkNhbmNlbFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYmctdGVhbC1saWdodCB0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIGhvdmVyOmJnLXRlYWwtZGFyayBweS00IHB4LTggcm91bmRlZFwiLG9uOntcImNsaWNrXCI6X3ZtLmF0dGFjaFBlcm1pc3Npb259fSxbX3ZtLl92KFwiQXR0YWNoXCIpXSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaC1zY3JlZW4gdy1zY3JlZW4gZml4ZWQgcGluIGJnLWdyZXktZGFya2VzdCBvcGFjaXR5LTI1XCIsY2xhc3M6eydoaWRkZW4nOiAhX3ZtLmZvcm1TaG93bn0sb246e1wiY2xpY2tcIjpfdm0uY2xvc2VGb3JtfX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMWNkMjE0ZDBcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvYXR0YWNoUGVybWlzc2lvbkZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSBFWU5yXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZpeGVkIHBpbi10IGJnLXdoaXRlIHRleHQtbGcgcm91bmRlZCBjb250YWluZXIgbXgtYXV0byBtZDp3LTEvMiBtdC0xNiBweS02IHB4LTggc2hhZG93LWxnIHotNTBcIixjbGFzczpbX3ZtLm5vdGlmaWNhdGlvblNob3duID8gJycgOiAnaGlkZGVuJywgKF92bS5tZXNzYWdlVHlwZSA9PT0gJ3N1Y2Nlc3MnKSA/ICd0ZXh0LXRlYWwtbGlnaHQnIDogJ3RleHQtcmVkJyBdLHN0YXRpY1N0eWxlOntcImxlZnRcIjpcIjBcIixcInJpZ2h0XCI6XCIwXCIsXCJtYXgtd2lkdGhcIjpcIjY0MHB4XCJ9fSxbX3ZtLl92KFwiXFxuICAgIFwiK192bS5fcyhfdm0ubWVzc2FnZSkrXCIgXFxuICAgIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpbmxpbmVcIixvbjp7XCJjbGlja1wiOl92bS5jbG9zZU5vdGlmaWNhdGlvbn19LFtfYygnaScse3N0YXRpY0NsYXNzOlwiZmFzIGZhLXRpbWVzIGZsb2F0LXJpZ2h0IGN1cnNvci1wb2ludGVyXCJ9KV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZDBjZTQ1ZjJcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbm90aWZpY2F0aW9uUG9wdXAudnVlXG4vLyBtb2R1bGUgaWQgPSBGQnlMXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJweC00IGJvcmRlci1sIGZsZXggaXRlbXMtY2VudGVyIGN1cnNvci1wb2ludGVyIHAtNFwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXJcIixhdHRyczp7XCJpZFwiOlwicHJvZmlsZS1kcm9wZG93blwifSxvbjp7XCJjbGlja1wiOl92bS50b2dnbGVQcm9maWxlRHJvcGRvd259fSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOlwidy0xMCBoLTEwIHJvdW5kZWQtZnVsbCBtZDptci0yXCIsYXR0cnM6e1wic3JjXCI6X3ZtLmdlbmVyYXRlVXJsKF92bS51c2VyLmF2YXRhcil9fSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5LWRhcmtlciB0ZXh0LWJhc2Ugbm8tdW5kZXJsaW5lIGhpZGRlbiBtZDpibG9ja1wifSxbX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS51c2VyLm5hbWUpK1wiXFxuICAgICAgXCIpLF9jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYSBmYS1hbmdsZS1kb3duXCIsYXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19KV0pXSksX3ZtLl92KFwiIFwiKSwoX3ZtLnByb2ZpbGVEcm9wZG93blNob3duKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJhYnNvbHV0ZSBiZy13aGl0ZSB3LTQ4IHBpbi1yIG1yLTIgcHktMSBzaGFkb3ctbGcgcm91bmRlZCB6LTUwXCIsc3RhdGljU3R5bGU6e1widG9wXCI6XCIzLjVyZW1cIn0sYXR0cnM6e1wiaWRcIjpcInByb2ZpbGUtbWVudVwifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6XCJweC00IHB5LTIgaG92ZXI6YmctdGVhbCBob3Zlcjp0ZXh0LXdoaXRlIG5vLXVuZGVybGluZSB0ZXh0LWdyZXktZGFyayBibG9jayBmb250LW1lZGl1bVwiLGF0dHJzOntcImhyZWZcIjpfdm0ucHJvZmlsZVVybH19LFtfdm0uX20oMCksX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdZb3VyIFByb2ZpbGUnKSkrXCJcXG4gICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwicHgtNCBweS0yIGhvdmVyOmJnLXRlYWwgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWdyZXktZGFyayBmb250LW1lZGl1bSBuby11bmRlcmxpbmUgYmxvY2tcIixhdHRyczp7XCJocmVmXCI6XCIvYWRtaW5cIn19LFtfdm0uX20oMSksX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdBZG1pbicpKStcIlxcbiAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJweC00IHB5LTIgaG92ZXI6YmctdGVhbCBob3Zlcjp0ZXh0LXdoaXRlIHRleHQtZ3JleS1kYXJrIGZvbnQtbWVkaXVtIG5vLXVuZGVybGluZSBibG9ja1wiLGF0dHJzOntcImhyZWZcIjpcIiNcIn19LFtfdm0uX20oMiksX3ZtLl92KFwiXFxuICAgICAgXCIrX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdTZXR0aW5ncycpKStcIlxcbiAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJibG9jayBib3JkZXItdFwifSksX3ZtLl92KFwiIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwicHgtNCBweS0yIGhvdmVyOmJnLXRlYWwgaG92ZXI6dGV4dC13aGl0ZSB0ZXh0LWdyZXktZGFyayBmb250LW1lZGl1bSBuby11bmRlcmxpbmUgYmxvY2tcIixhdHRyczp7XCJocmVmXCI6X3ZtLnVybC5sb2dvdXR9LG9uOntcImNsaWNrXCI6X3ZtLmxvZ291dFVzZXJ9fSxbX3ZtLl9tKDMpLF92bS5fdihcIlxcbiAgICAgIFwiK192bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnTG9nb3V0JykpK1wiXFxuICAgIFwiKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZm9ybScse3N0YXRpY1N0eWxlOntcImRpc3BsYXlcIjpcIm5vbmVcIn0sYXR0cnM6e1wiaWRcIjpcImxvZ291dC1mb3JtXCIsXCJhY3Rpb25cIjpfdm0udXJsLmxvZ291dCxcIm1ldGhvZFwiOlwiUE9TVFwifX0sW19jKCdpbnB1dCcse2F0dHJzOntcInR5cGVcIjpcImhpZGRlblwiLFwibmFtZVwiOlwiX3Rva2VuXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6X3ZtLnRva2VufX0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidy02IGlubGluZS1ibG9ja1wifSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcInByLTEgZmEgZmEtdXNlclwifSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidy02IGlubGluZS1ibG9ja1wifSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcInByLTEgZmFzIGZhLXNoaWVsZC1hbHQgZm9udC1yZWd1bGFyXCJ9KV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ3LTYgaW5saW5lLWJsb2NrXCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOlwicHItMSBmYSBmYS1jb2cgZm9udC1yZWd1bGFyXCJ9KV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ3LTYgaW5saW5lLWJsb2NrXCJ9LFtfYygnaScse3N0YXRpY0NsYXNzOlwicHItMSBmYXMgZmEtc2lnbi1vdXQtYWx0IGZvbnQtcmVndWxhclwifSldKX1dXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTgzYTJiMzQ0XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL3Byb2ZpbGVEcm9wZG93bi52dWVcbi8vIG1vZHVsZSBpZCA9IEdFeHJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA3IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFic29sdXRlIGNvbnRhaW5lciBteC1hdXRvIHctNS82IG1kOnctMy81IGxnOnctMi81IGJnLXdoaXRlIHJvdW5kZWQgc2hhZG93LWxnIHotMTBcIixjbGFzczp7J2hpZGRlbic6ICFfdm0uZm9ybVNob3dufSxzdGF0aWNTdHlsZTp7XCJ0b3BcIjpcIjEydmhcIixcImxlZnRcIjpcIjBcIixcInJpZ2h0XCI6XCIwXCJ9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicC00XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTRcIn0sW192bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOihfdm0ubmFtZSksZXhwcmVzc2lvbjpcIm5hbWVcIn1dLHN0YXRpY0NsYXNzOlwiYXBwZWFyYW5jZS1ub25lIGJsb2NrIHctZnVsbCBiZy1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmtlciBib3JkZXIgYm9yZGVyLWdyZXktbGlnaHRlciByb3VuZGVkIHB5LTMgcHgtNFwiLGF0dHJzOntcImlkXCI6XCJncmlkLWxhc3QtbmFtZVwiLFwidHlwZVwiOlwidGV4dFwiLFwicGxhY2Vob2xkZXJcIjpcIk5ldyBSb2xlXCIsXCJyZXF1aXJlZFwiOlwiXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5uYW1lKX0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLm5hbWU9JGV2ZW50LnRhcmdldC52YWx1ZX19fSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWJldHdlZW4gcHktNCBweC04IGJnLWdyZXktbGlnaHRlciByb3VuZGVkXCJ9LFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXJlZC1saWdodGVyIGhvdmVyOmZvbnQtYm9sZCBob3Zlcjp0ZXh0LXJlZC1saWdodFwiLG9uOntcImNsaWNrXCI6X3ZtLmNsb3NlRm9ybX19LFtfdm0uX3YoXCJDYW5jZWxcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImJnLXRlYWwtbGlnaHQgdGV4dC13aGl0ZSBmb250LW1lZGl1bSBob3ZlcjpiZy10ZWFsLWRhcmsgcHktNCBweC04IHJvdW5kZWRcIixvbjp7XCJjbGlja1wiOl92bS5jcmVhdGVSb2xlfX0sW192bS5fdihcIkNyZWF0ZVwiKV0pXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImgtc2NyZWVuIHctc2NyZWVuIGZpeGVkIHBpbiBiZy1ncmV5LWRhcmtlc3Qgb3BhY2l0eS0yNVwiLGNsYXNzOnsnaGlkZGVuJzogIV92bS5mb3JtU2hvd259LG9uOntcImNsaWNrXCI6X3ZtLmNsb3NlRm9ybX19KV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdsYWJlbCcse3N0YXRpY0NsYXNzOlwiYmxvY2sgdXBwZXJjYXNlIHRyYWNraW5nLXdpZGUgdGV4dC1ncmV5LWRhcmtlciB0ZXh0LXhzIGZvbnQtYm9sZCBtYi0yXCIsYXR0cnM6e1wiZm9yXCI6XCJncmlkLWZpcnN0LW5hbWVcIn19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICBOYW1lIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5IGNhcGl0YWxpemVcIn0sW192bS5fdihcIihyZXF1aXJlZClcIildKV0pfV1cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZGM2YjVkOTZcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvY3JlYXRlUm9sZUZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSBJNnVOXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsIjx0ZW1wbGF0ZT5cbjxkaXYgOmNsYXNzPVwieydoaWRkZW4nOiAoYWN0aXZlQ29sdW1uICE9PSAncm9sZXMnKX1cIiBjbGFzcz1cImJnLXdoaXRlIHJvdW5kZWQtYlwiPlxuICA8Y3JlYXRlLXJvbGUtZm9ybSA6Zm9ybS1zaG93bj1cImNyZWF0ZVJvbGVGb3JtU2hvd25cIiBAY2xvc2U9XCJjbG9zZUNyZWF0ZVJvbGVGb3JtXCIgQHJvbGUtY3JlYXRlZD1cIm5ld1JvbGVDcmVhdGVkXCI+PC9jcmVhdGUtcm9sZS1mb3JtPlxuICA8YXNzaWduLXBlcm1pc3Npb24tZm9ybSA6cm9sZUlkPVwicm9sZUlkXCIgOmZvcm0tc2hvd249XCJhc3NpZ25QZXJtaXNzaW9uRm9ybVNob3duXCIgQGNsb3NlPVwiY2xvc2VBc3NpZ25QZXJtaXNzaW9uRm9ybVwiIEBwZXJtaXNzaW9uLWFzc2lnbmVkPVwicGVybWlzc2lvbkFzc2lnbmVkXCI+PC9hc3NpZ24tcGVybWlzc2lvbi1mb3JtPlxuXG4gIDxkaXYgY2xhc3M9XCJteC00IHRleHQtY2VudGVyXCI+XG4gICAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93Q3JlYXRlUm9sZUZvcm1cIiBjbGFzcz1cIm5vLXVuZGVybGluZSBwLTMgbS04IC1tYi00IHRleHQtd2hpdGUgdGV4dC1iYXNlIGJnLXRlYWwtbGlnaHQgcm91bmRlZCBzaGFkb3cteGxcIj5BZGQgTmV3IFJvbGU8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJweC02IHB5LTggZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAganVzdGlmeS1jZW50ZXIgdGV4dC1ncmV5LWRhcmtlclwiPlxuICAgIDxkaXYgdi1mb3I9XCIocm9sZSwgaW5kZXgpIGluIHJvbGVzXCIgY2xhc3M9XCJiZy13aGl0ZSBzaGFkb3cteGwgdy04MCBteS00IG1kOm0tNiByb3VuZGVkLWxnXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicC00IHRleHQteGwgdXBwZXJjYXNlIHRleHQtaW5kaWdvIGJnLWdyZXktbGlnaHRlciByb3VuZGVkLXQtbGcgZmxleCBmbGV4LXJvd1wiPlxuICAgICAgICB7eyByb2xlLm5hbWUgfX1cbiAgICAgICAgICA8ZGl2IEBjbGljaz1cImRlbGV0ZVJvbGUocm9sZS5pZCwgaW5kZXgpXCI+XG4gICAgICAgICAgICA8aSB2LWlmPVwicm9sZS5kZWxldGFibGVcIiBjbGFzcz1cIm1sLTEgcGwtMSBmYXMgZmEtdHJhc2gtYWx0IGN1cnNvci1wb2ludGVyIHRleHQtYmFzZVwiPjwvaT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInB4LTQgcGItMiBiZy1ncmV5LWxpZ2h0ZXIgdGV4dC1zbSBmbGV4IGZsZXgtcm93XCI+XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgIHt7ICdQZXJtaXNzaW9ucycgfCBsb2NhbGl6ZSB9fVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIDxkaXYgQGNsaWNrPVwic2hvd0Fzc2lnblBlcm1pc3Npb25Gb3JtKHJvbGUuaWQpXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtbC0yIGZhcyBmYS1wbHVzLWNpcmNsZSB0ZXh0LWluZGlnbyBjdXJzb3ItcG9pbnRlclwiPjwvaT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cInJvbGUucGVybWlzc2lvbnMubGVuZ3RoID4gMFwiIGNsYXNzPVwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgbS0yXCI+XG4gICAgICAgIDxkaXYgdi1mb3I9XCIocGVybWlzc2lvbiwgaW5kZXgpIGluIHJvbGUucGVybWlzc2lvbnNcIiBjbGFzcz1cInB5LTEgcHgtMiBtLTIgcm91bmRlZC1mdWxsIGZvbnQtbWVkaXVtIGJnLXBpbmsgdGV4dC13aGl0ZSB0ZXh0LXNtIGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAge3sgcGVybWlzc2lvbi5uYW1lIH19IFxuICAgICAgICAgIDxkaXYgQGNsaWNrPVwicmV2b2tlUGVybWlzc2lvbihyb2xlLmlkLCBwZXJtaXNzaW9uLmlkLCBpbmRleClcIj5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwibWwtMSBwbC0xIGZhcyBmYS10cmFzaC1hbHQgY3Vyc29yLXBvaW50ZXJcIj48L2k+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtZWxzZSBjbGFzcz1cInB5LTEgcHgtMiBtLTIgZm9udC1tZWRpdW0gdGV4dC1ncmV5LWRhcmtlclwiPlxuICAgICAgICB7eyAnRG9uXFwndCBoYXZlIGFueSBwZXJtaXNzaW9uIHlldCcgfCBsb2NhbGl6ZSB9fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+ICAgICAgXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IGNyZWF0ZVJvbGVGb3JtIGZyb20gJy4vLi4vZm9ybXMvY3JlYXRlUm9sZUZvcm0nXG5pbXBvcnQgYXNzaWduUGVybWlzc2lvbkZvcm0gZnJvbSAnLi8uLi9mb3Jtcy9hc3NpZ25QZXJtaXNzaW9uRm9ybSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge2NyZWF0ZVJvbGVGb3JtLCBhc3NpZ25QZXJtaXNzaW9uRm9ybX0sXG4gIHByb3BzOiB7XG4gICAgYWN0aXZlQ29sdW1uOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICByb2xlczogW10sXG4gICAgY3JlYXRlUm9sZUZvcm1TaG93bjogZmFsc2UsXG4gICAgYXNzaWduUGVybWlzc2lvbkZvcm1TaG93bjogZmFsc2UsXG4gICAgcm9sZUlkOiAwXG4gIH0pLFxuICBiZWZvcmVVcGRhdGUgKCkge1xuICAgIGlmICh0aGlzLnJvbGVzLmxlbmd0aCA8IDEpIHtcbiAgICAgIGF4aW9zLmdldCgnL2FkbWluL3JvbGVzJylcbiAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMucm9sZXMgPSByZXNwb25zZS5kYXRhLnJvbGVzXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICB9KVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHNob3dDcmVhdGVSb2xlRm9ybSAoKSB7XG4gICAgICB0aGlzLmNyZWF0ZVJvbGVGb3JtU2hvd24gPSB0cnVlXG4gICAgfSxcbiAgICBjbG9zZUNyZWF0ZVJvbGVGb3JtICgpIHtcbiAgICAgIHRoaXMuY3JlYXRlUm9sZUZvcm1TaG93biA9IGZhbHNlXG4gICAgfSxcbiAgICBuZXdSb2xlQ3JlYXRlZCAocm9sZSkge1xuICAgICAgdGhpcy5yb2xlcy5wdXNoKHJvbGUpXG4gICAgICB0aGlzLmNyZWF0ZVJvbGVGb3JtU2hvd24gPSBmYWxzZVxuICAgIH0sXG4gICAgZGVsZXRlUm9sZSAoaWQsIGluZGV4KSB7XG4gICAgICBheGlvcy5kZWxldGUoJy9hZG1pbi9yb2xlcy8nICsgaWQpXG4gICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgIHRoaXMucm9sZXMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICB9KVxuICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlKVxuICAgICAgICAgICB9KVxuICAgIH0sXG4gICAgc2hvd0Fzc2lnblBlcm1pc3Npb25Gb3JtIChpZCkge1xuICAgICAgdGhpcy5yb2xlSWQgPSBpZFxuICAgICAgdGhpcy5hc3NpZ25QZXJtaXNzaW9uRm9ybVNob3duID0gdHJ1ZVxuICAgIH0sXG4gICAgY2xvc2VBc3NpZ25QZXJtaXNzaW9uRm9ybSAoKSB7XG4gICAgICB0aGlzLmFzc2lnblBlcm1pc3Npb25Gb3JtU2hvd24gPSBmYWxzZVxuICAgIH0sXG4gICAgcGVybWlzc2lvbkFzc2lnbmVkIChwZXJtaXNzaW9uKSB7XG4gICAgICBpZiAoISB0aGlzLnJvbGVzLmZpbHRlcihyb2xlID0+IHJvbGUuaWQgPT09IHRoaXMucm9sZUlkKVswXS5wZXJtaXNzaW9ucy5zb21lKHBlcm0gPT4gcGVybS5pZCA9PT0gcGVybWlzc2lvbi5pZCkpIHtcbiAgICAgICAgdGhpcy5yb2xlcy5maWx0ZXIocm9sZSA9PiByb2xlLmlkID09PSB0aGlzLnJvbGVJZClbMF0ucGVybWlzc2lvbnMucHVzaChwZXJtaXNzaW9uKVxuICAgICAgfVxuICAgICAgdGhpcy5hc3NpZ25QZXJtaXNzaW9uRm9ybVNob3duID0gZmFsc2VcbiAgICB9LFxuICAgIHJldm9rZVBlcm1pc3Npb24gKHJvbGVJZCwgcGVybWlzc2lvbklkLCBpbmRleCkge1xuICAgICAgYXhpb3MuZGVsZXRlKCcvYWRtaW4vcm9sZXMvJyArIHJvbGVJZCArICcvcGVybWlzc2lvbnMnLCB7cGVybWlzc2lvbl9pZDogcGVybWlzc2lvbklkfSlcbiAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgdGhpcy5yb2xlcy5maWx0ZXIocm9sZSA9PiByb2xlLmlkID09PSByb2xlSWQpWzBdLnBlcm1pc3Npb25zLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZSlcbiAgICAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9yb2xlc0JvYXJkLnZ1ZSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImJnLXdoaXRlIHJvdW5kZWQtYlwiLGNsYXNzOnsnaGlkZGVuJzogKF92bS5hY3RpdmVDb2x1bW4gIT09ICdwZXJtaXNzaW9ucycpfX0sW19jKCdhdHRhY2gtcGVybWlzc2lvbi1mb3JtJyx7YXR0cnM6e1wicGVybWlzc2lvbklkXCI6X3ZtLnBlcm1pc3Npb25JZCxcImZvcm0tc2hvd25cIjpfdm0uYXR0YWNoUGVybWlzc2lvbkZvcm1TaG93bn0sb246e1wiY2xvc2VcIjpfdm0uY2xvc2VBdHRhY2hQZXJtaXNzaW9uRm9ybSxcInBlcm1pc3Npb24tYXR0YWNoZWRcIjpfdm0ucGVybWlzc2lvbkF0dGFjaGVkVG9Sb2xlfX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiIHB4LTYgcHktOCBmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBqdXN0aWZ5LWNlbnRlciB0ZXh0LWdyZXktZGFya2VyXCJ9LF92bS5fbCgoX3ZtLnBlcm1pc3Npb25zKSxmdW5jdGlvbihwZXJtaXNzaW9uKXtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYmctd2hpdGUgc2hhZG93LXhsIHctODAgbXktNCBtZDptLTYgcm91bmRlZC1sZ1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicC00IHRleHQteGwgdXBwZXJjYXNlIHRleHQtaW5kaWdvIGJnLWdyZXktbGlnaHRlciByb3VuZGVkLXQtbGdcIn0sW192bS5fdihcIlxcbiAgICAgICAgXCIrX3ZtLl9zKHBlcm1pc3Npb24ubmFtZSkrXCJcXG4gICAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB4LTQgcGItMiBiZy1ncmV5LWxpZ2h0ZXIgdGV4dC1zbSBmbGV4IGZsZXgtcm93XCJ9LFtfYygnc3BhbicsW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ1JvbGVzJykpK1wiXFxuICAgICAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnNob3dBdHRhY2hQZXJtaXNzaW9uRm9ybShwZXJtaXNzaW9uLmlkKX19fSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcIm1sLTIgZmFzIGZhLXBsdXMtY2lyY2xlIHRleHQtaW5kaWdvIGN1cnNvci1wb2ludGVyXCJ9KV0pXSksX3ZtLl92KFwiIFwiKSwocGVybWlzc2lvbi5yb2xlcy5sZW5ndGggPiAwKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGZsZXgtd3JhcCBtLTJcIn0sX3ZtLl9sKChwZXJtaXNzaW9uLnJvbGVzKSxmdW5jdGlvbihyb2xlKXtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHktMSBweC0yIG0tMiByb3VuZGVkLWZ1bGwgZm9udC1tZWRpdW0gYmctcGluayB0ZXh0LXdoaXRlIHRleHQtc20gZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXJcIn0sW192bS5fdihcIlxcbiAgICAgICAgICBcIitfdm0uX3Mocm9sZS5uYW1lKStcIiBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcIm1sLTEgcGwtMSBmYXMgZmEtdHJhc2gtYWx0IGN1cnNvci1wb2ludGVyXCJ9KV0pfSkpOl9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB5LTEgcHgtMiBtLTIgZm9udC1tZWRpdW0gdGV4dC1ncmV5LWRhcmtlclwifSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0RvblxcJ3QgYmVsb25ncyB0byBhbnkgcm9sZSB5ZXQnKSkrXCJcXG4gICAgICBcIildKV0pfSkpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi03MzdkZjNiYlwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9wZXJtaXNzaW9uc0JvYXJkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gTCtXT1xuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9pbmRleC52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTIyNTg1MjVjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vaW5kZXgudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2luZGV4LnZ1ZVxuLy8gbW9kdWxlIGlkID0gTFUyRFxuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LWZ1bGxcIixjbGFzczp7J2hpZGRlbic6IChfdm0uYWN0aXZlVGFiICE9ICd1c2VycycpfX0sW19jKCdpbnZpdGUtbW9kYWwnKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1kOmJnLXdoaXRlIG1kOnJvdW5kZWQgbWQ6c2hhZG93IHRleHQtZ3JleS1kYXJrZXN0XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWNlbnRlciB0ZXh0LTN4bCBtZDpwLTQgdGV4dC1ncmV5LWRhcmtlclwifSxbX3ZtLl92KFwiQWxsIFVzZXJzXCIpXSksX3ZtLl92KFwiIFwiKSxfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfdm0uX2woKF92bS51c2VycyksZnVuY3Rpb24odXNlcil7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIHRleHQtbGVmdCBtLTQgbWQ6bS0wIG1kOnAtNCBiZy10ZWFsLWxpZ2h0ZXIgbWQ6Ymctd2hpdGUgcm91bmRlZCBtZDpyb3VuZGVkLW5vbmUgc2hhZG93IG1kOnNoYWRvdy1ub25lIHJlbGF0aXZlXCJ9LFtfdm0uX20oMSx0cnVlKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInctMS80IG1kOnctMS82IHB4LTIgbWQ6cHgtMFwifSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOlwidy0xMiBoLTEyIHJvdW5kZWQtZnVsbFwiLGF0dHJzOntcInNyY1wiOl92bS5nZW5lcmF0ZVVybCh1c2VyLmF2YXRhcil9fSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInctMy80IG1kOnctNS82IGZsZXggZmxleC1jb2wgbWQ6ZmxleC1yb3cgbWQ6aXRlbXMtY2VudGVyIG1kOnB4LTAgYmctd2hpdGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1kOnctMS81IHRleHQtbGVmdCB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmV5LWRhcmtlciBwLTIgbWQ6cC0wXCJ9LFtfdm0uX3YoX3ZtLl9zKHVzZXIubmFtZSkpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtZDp3LTIvNSBmbGV4IGZsZXgtcm93IHRleHQtc20gcC0yIG1kOnB4LTAgYmctZ3JleS1saWdodGVzdCBtZDpiZy13aGl0ZVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzIgdGV4dC1sZWZ0XCJ9LFtfdm0uX3YoXCJAXCIrX3ZtLl9zKHVzZXIudXNlcm5hbWUpKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzIgdGV4dC1yaWdodCBtZDp0ZXh0LWxlZnRcIn0sW192bS5fdihfdm0uX3ModXNlci5yb2xlKSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibWQ6dy0yLzUgZmxleCBmbGV4LXJvdyB0ZXh0LXNtIHAtMiBtZDpweC0wIGJnLWdyZXktbGlnaHRlc3QgbWQ6Ymctd2hpdGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInctMS8yXCJ9LFtfdm0uX3YoX3ZtLl9zKHVzZXIuZW1haWwpKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzJcIn0sW192bS5fdihfdm0uX3ModXNlci50aW1lem9uZSkpXSldKV0pXSl9KV0sMildLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhpZGRlbiBtZDpmbGV4IGZsZXgtcm93IHRleHQtbGVmdCBiZy1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmsgcC00XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LTEvNlwifSxbX3ZtLl92KFwiQXZhdGFyXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LTEvNlwifSxbX3ZtLl92KFwiTmFtZVwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzZcIn0sW192bS5fdihcIlVzZXJuYW1lXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LTEvNlwifSxbX3ZtLl92KFwiUm9sZVwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzZcIn0sW192bS5fdihcIkVtYWlsXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LTEvNlwifSxbX3ZtLl92KFwiVGltZXpvbmVcIildKV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFic29sdXRlIHBpbi10IHBpbi1yIG0tMiB0ZXh0LWdyZXktZGFya2VyIGgtZnVsbCBtZDpmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBtZDptLTAgbWQ6bXItNFwifSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcImZhcyBmYS1lbGxpcHNpcy1oIGN1cnNvci1wb2ludGVyXCJ9KV0pfV1cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNTgzNjFkNDhcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vdXNlcnNCb2FyZC52dWVcbi8vIG1vZHVsZSBpZCA9IE0vVitcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwiPHRlbXBsYXRlPlxuPGRpdiA6Y2xhc3M9XCJ7J2hpZGRlbic6IChhY3RpdmVUYWIgIT0gJ2F1dGgnKX1cIiBjbGFzcz1cInctZnVsbCBtYi04XCI+XG4gIDxkaXYgY2xhc3M9XCJiZy13aGl0ZSBzaGFkb3cgcm91bmRlZC10IHRleHQtZ3JleS1kYXJrZXN0IG10LTRcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyB0ZXh0LWNlbnRlciB0ZXh0LWdyZXlcIj5cbiAgICAgIDxkaXYgQGNsaWNrPVwiYWN0aXZhdGVUaGlzQ29sdW1uKCdyb2xlcycpXCIgOmNsYXNzPVwiW2FjdGl2ZUNvbHVtbiA9PT0gJ3JvbGVzJyA/ICd0ZXh0LWluZGlnbyBib3JkZXItaW5kaWdvIGJvcmRlci1iLTInIDogJ2JnLXdoaXRlIGN1cnNvci1wb2ludGVyJ11cIiBjbGFzcz1cInctMS8yIGZvbnQtc2VtaWJvbGQgcC00IHJvdW5kZWQtdGxcIj5cbiAgICAgICAge3sgJ1JvbGVzJyB8IGxvY2FsaXplIH19XG4gICAgICA8L2Rpdj4gICAgXG4gICAgICA8ZGl2IEBjbGljaz1cImFjdGl2YXRlVGhpc0NvbHVtbigncGVybWlzc2lvbnMnKVwiIDpjbGFzcz1cIlthY3RpdmVDb2x1bW4gPT09ICdwZXJtaXNzaW9ucycgPyAndGV4dC1pbmRpZ28gYm9yZGVyLWluZGlnbyBib3JkZXItYi0yJyA6ICdiZy13aGl0ZSBjdXJzb3ItcG9pbnRlciddXCIgY2xhc3M9XCJ3LTEvMiBmb250LXNlbWlib2xkIHAtNFwiPlxuICAgICAgICB7eyAnUGVybWlzc2lvbnMnIHwgbG9jYWxpemUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxyb2xlcy1ib2FyZCA6YWN0aXZlQ29sdW1uPVwiYWN0aXZlQ29sdW1uXCI+PC9yb2xlcy1ib2FyZD5cbiAgICA8cGVybWlzc2lvbnMtYm9hcmQgOmFjdGl2ZUNvbHVtbj1cImFjdGl2ZUNvbHVtblwiPjwvcGVybWlzc2lvbnMtYm9hcmQ+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHJvbGVzQm9hcmQgZnJvbSAnLi9yb2xlc0JvYXJkJ1xuaW1wb3J0IHBlcm1pc3Npb25zQm9hcmQgZnJvbSAnLi9wZXJtaXNzaW9uc0JvYXJkJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7cm9sZXNCb2FyZCwgcGVybWlzc2lvbnNCb2FyZH0sXG4gIHByb3BzOiB7XG4gICAgYWN0aXZlVGFiOiB7XG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBhY3RpdmVDb2x1bW46ICcnXG4gIH0pLFxuICBiZWZvcmVVcGRhdGUgKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZUNvbHVtbiA9PT0gJycpIHtcbiAgICAgIHRoaXMuYWN0aXZlQ29sdW1uID0gJ3JvbGVzJ1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGFjdGl2YXRlVGhpc0NvbHVtbiAoY29sdW1uKSB7XG4gICAgICBpZiAoY29sdW1uICE9IHRoaXMuYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlQ29sdW1uID0gY29sdW1uXG4gICAgICB9XG4gICAgfSxcbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2F1dGhCb2FyZC52dWUiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiZy13aGl0ZSByb3VuZGVkLWJcIixjbGFzczp7J2hpZGRlbic6IChfdm0uYWN0aXZlQ29sdW1uICE9PSAncm9sZXMnKX19LFtfYygnY3JlYXRlLXJvbGUtZm9ybScse2F0dHJzOntcImZvcm0tc2hvd25cIjpfdm0uY3JlYXRlUm9sZUZvcm1TaG93bn0sb246e1wiY2xvc2VcIjpfdm0uY2xvc2VDcmVhdGVSb2xlRm9ybSxcInJvbGUtY3JlYXRlZFwiOl92bS5uZXdSb2xlQ3JlYXRlZH19KSxfdm0uX3YoXCIgXCIpLF9jKCdhc3NpZ24tcGVybWlzc2lvbi1mb3JtJyx7YXR0cnM6e1wicm9sZUlkXCI6X3ZtLnJvbGVJZCxcImZvcm0tc2hvd25cIjpfdm0uYXNzaWduUGVybWlzc2lvbkZvcm1TaG93bn0sb246e1wiY2xvc2VcIjpfdm0uY2xvc2VBc3NpZ25QZXJtaXNzaW9uRm9ybSxcInBlcm1pc3Npb24tYXNzaWduZWRcIjpfdm0ucGVybWlzc2lvbkFzc2lnbmVkfX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibXgtNCB0ZXh0LWNlbnRlclwifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwibm8tdW5kZXJsaW5lIHAtMyBtLTggLW1iLTQgdGV4dC13aGl0ZSB0ZXh0LWJhc2UgYmctdGVhbC1saWdodCByb3VuZGVkIHNoYWRvdy14bFwiLG9uOntcImNsaWNrXCI6X3ZtLnNob3dDcmVhdGVSb2xlRm9ybX19LFtfdm0uX3YoXCJBZGQgTmV3IFJvbGVcIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHgtNiBweS04IGZsZXggZmxleC1yb3cgZmxleC13cmFwIGp1c3RpZnktY2VudGVyIHRleHQtZ3JleS1kYXJrZXJcIn0sX3ZtLl9sKChfdm0ucm9sZXMpLGZ1bmN0aW9uKHJvbGUsaW5kZXgpe3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJiZy13aGl0ZSBzaGFkb3cteGwgdy04MCBteS00IG1kOm0tNiByb3VuZGVkLWxnXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTQgdGV4dC14bCB1cHBlcmNhc2UgdGV4dC1pbmRpZ28gYmctZ3JleS1saWdodGVyIHJvdW5kZWQtdC1sZyBmbGV4IGZsZXgtcm93XCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgIFwiK192bS5fcyhyb2xlLm5hbWUpK1wiXFxuICAgICAgICAgIFwiKSxfYygnZGl2Jyx7b246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5kZWxldGVSb2xlKHJvbGUuaWQsIGluZGV4KX19fSxbKHJvbGUuZGVsZXRhYmxlKT9fYygnaScse3N0YXRpY0NsYXNzOlwibWwtMSBwbC0xIGZhcyBmYS10cmFzaC1hbHQgY3Vyc29yLXBvaW50ZXIgdGV4dC1iYXNlXCJ9KTpfdm0uX2UoKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJweC00IHBiLTIgYmctZ3JleS1saWdodGVyIHRleHQtc20gZmxleCBmbGV4LXJvd1wifSxbX2MoJ3NwYW4nLFtfdm0uX3YoXCJcXG4gICAgICAgICAgXCIrX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdQZXJtaXNzaW9ucycpKStcIlxcbiAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7b246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5zaG93QXNzaWduUGVybWlzc2lvbkZvcm0ocm9sZS5pZCl9fX0sW19jKCdpJyx7c3RhdGljQ2xhc3M6XCJtbC0yIGZhcyBmYS1wbHVzLWNpcmNsZSB0ZXh0LWluZGlnbyBjdXJzb3ItcG9pbnRlclwifSldKV0pLF92bS5fdihcIiBcIiksKHJvbGUucGVybWlzc2lvbnMubGVuZ3RoID4gMCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAgbS0yXCJ9LF92bS5fbCgocm9sZS5wZXJtaXNzaW9ucyksZnVuY3Rpb24ocGVybWlzc2lvbixpbmRleCl7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB5LTEgcHgtMiBtLTIgcm91bmRlZC1mdWxsIGZvbnQtbWVkaXVtIGJnLXBpbmsgdGV4dC13aGl0ZSB0ZXh0LXNtIGZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgXCIrX3ZtLl9zKHBlcm1pc3Npb24ubmFtZSkrXCIgXFxuICAgICAgICAgIFwiKSxfYygnZGl2Jyx7b246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5yZXZva2VQZXJtaXNzaW9uKHJvbGUuaWQsIHBlcm1pc3Npb24uaWQsIGluZGV4KX19fSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcIm1sLTEgcGwtMSBmYXMgZmEtdHJhc2gtYWx0IGN1cnNvci1wb2ludGVyXCJ9KV0pXSl9KSk6X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHktMSBweC0yIG0tMiBmb250LW1lZGl1bSB0ZXh0LWdyZXktZGFya2VyXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgIFwiK192bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnRG9uXFwndCBoYXZlIGFueSBwZXJtaXNzaW9uIHlldCcpKStcIlxcbiAgICAgIFwiKV0pXSl9KSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWY0YjE1NjUwXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3JvbGVzQm9hcmQudnVlXG4vLyBtb2R1bGUgaWQgPSBQQ0N5XG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsIjx0ZW1wbGF0ZT5cbjxkaXYgOmNsYXNzPVwieydoaWRkZW4nOiAoYWN0aXZlVGFiICE9ICd1c2VycycpfVwiIGNsYXNzPVwidy1mdWxsXCI+XG4gIDxpbnZpdGUtbW9kYWw+PC9pbnZpdGUtbW9kYWw+XG5cbiAgPGRpdiBjbGFzcz1cIm1kOmJnLXdoaXRlIG1kOnJvdW5kZWQgbWQ6c2hhZG93IHRleHQtZ3JleS1kYXJrZXN0XCI+XG4gICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIHRleHQtM3hsIG1kOnAtNCB0ZXh0LWdyZXktZGFya2VyXCI+QWxsIFVzZXJzPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImhpZGRlbiBtZDpmbGV4IGZsZXgtcm93IHRleHQtbGVmdCBiZy1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmsgcC00XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidy0xLzZcIj5BdmF0YXI8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvNlwiPk5hbWU8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvNlwiPlVzZXJuYW1lPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidy0xLzZcIj5Sb2xlPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidy0xLzZcIj5FbWFpbDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInctMS82XCI+VGltZXpvbmU8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IHYtZm9yPVwidXNlciBpbiB1c2Vyc1wiIGNsYXNzPVwiZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgdGV4dC1sZWZ0IG0tNCBtZDptLTAgbWQ6cC00IGJnLXRlYWwtbGlnaHRlciBtZDpiZy13aGl0ZSByb3VuZGVkIG1kOnJvdW5kZWQtbm9uZSBzaGFkb3cgbWQ6c2hhZG93LW5vbmUgcmVsYXRpdmVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJhYnNvbHV0ZSBwaW4tdCBwaW4tciBtLTIgdGV4dC1ncmV5LWRhcmtlciBoLWZ1bGwgbWQ6ZmxleCBmbGV4LXJvdyBpdGVtcy1jZW50ZXIgbWQ6bS0wIG1kOm1yLTRcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZWxsaXBzaXMtaCBjdXJzb3ItcG9pbnRlclwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInctMS80IG1kOnctMS82IHB4LTIgbWQ6cHgtMFwiPjxpbWcgY2xhc3M9XCJ3LTEyIGgtMTIgcm91bmRlZC1mdWxsXCIgOnNyYz1cImdlbmVyYXRlVXJsKHVzZXIuYXZhdGFyKVwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInctMy80IG1kOnctNS82IGZsZXggZmxleC1jb2wgbWQ6ZmxleC1yb3cgbWQ6aXRlbXMtY2VudGVyIG1kOnB4LTAgYmctd2hpdGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kOnctMS81IHRleHQtbGVmdCB0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmV5LWRhcmtlciBwLTIgbWQ6cC0wXCI+e3sgdXNlci5uYW1lIH19PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZDp3LTIvNSBmbGV4IGZsZXgtcm93IHRleHQtc20gcC0yIG1kOnB4LTAgYmctZ3JleS1saWdodGVzdCBtZDpiZy13aGl0ZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvMiB0ZXh0LWxlZnRcIj5Ae3sgdXNlci51c2VybmFtZSB9fTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvMiB0ZXh0LXJpZ2h0IG1kOnRleHQtbGVmdFwiPnt7IHVzZXIucm9sZSB9fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kOnctMi81IGZsZXggZmxleC1yb3cgdGV4dC1zbSBwLTIgbWQ6cHgtMCBiZy1ncmV5LWxpZ2h0ZXN0IG1kOmJnLXdoaXRlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInctMS8yXCI+e3sgdXNlci5lbWFpbCB9fTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3LTEvMlwiPnt7IHVzZXIudGltZXpvbmUgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBpbnZpdGVNb2RhbCBmcm9tICcuLy4uL3BhcnRpYWxzL2ludml0ZU1vZGFsLnZ1ZSdcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBhY3RpdmVUYWI6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHlwZTogU3RyaW5nLFxuICAgIH0sXG4gICAgdXNlcnM6IHtcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgdHlwZTogQXJyYXksXG4gICAgfVxuICB9LFxuICBjb21wb25lbnRzOiB7aW52aXRlTW9kYWx9XG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vdXNlcnNCb2FyZC52dWUiLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuXG4gICAgaWYgKCFmdW5jdGlvbmFsKSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSBWVS84XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyA4IDkiLCJpbXBvcnQgRWNobyBmcm9tICdsYXJhdmVsLWVjaG8nXG53aW5kb3cuVnVlID0gcmVxdWlyZSgndnVlJylcblxud2luZG93LmF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG53aW5kb3cubHV4b24gPSByZXF1aXJlKCdsdXhvbicpXG5cbndpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbiA9IHtcbiAgJ1gtQ1NSRi1UT0tFTic6IHdpbmRvdy5MYXJhdmVsLmNzcmZUb2tlbixcbiAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnXG59XG5cbi8qKlxuICogRWNobyBleHBvc2VzIGFuIGV4cHJlc3NpdmUgQVBJIGZvciBzdWJzY3JpYmluZyB0byBjaGFubmVscyBhbmQgbGlzdGVuaW5nXG4gKiBmb3IgZXZlbnRzIHRoYXQgYXJlIGJyb2FkY2FzdCBieSBMYXJhdmVsLiBFY2hvIGFuZCBldmVudCBicm9hZGNhc3RpbmdcbiAqIGFsbG93cyB5b3VyIHRlYW0gdG8gZWFzaWx5IGJ1aWxkIHJvYnVzdCByZWFsLXRpbWUgd2ViIGFwcGxpY2F0aW9ucy5cbiAqL1xuXG5pZiAodHlwZW9mIGlvICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuRWNobyA9IG5ldyBFY2hvKHtcbiAgICBicm9hZGNhc3RlcjogJ3NvY2tldC5pbycsXG4gICAgaG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJzo2MDAxJ1xuICB9KVxufVxuXG53aW5kb3cuVnVlLm1peGluKHtcbiAgbWV0aG9kczoge1xuICAgIGdlbmVyYXRlVXJsOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybiAnaHR0cDovLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArICcvaW1hZ2UvYXZhdGFyLmpwZydcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArICcvJyArIHZhbHVlXG4gICAgfVxuICB9XG59KVxuXG53aW5kb3cuVnVlLmZpbHRlcignbG9jYWxpemUnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuICcnXG4gIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKVxuICByZXR1cm4gd2luZG93LmxhbmdbdmFsdWVdID8gd2luZG93LmxhbmdbdmFsdWVdIDogdmFsdWVcbn0pXG5cbndpbmRvdy5FdmVudEJ1cyA9IG5ldyBWdWUoKVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9ib290c3RyYXAuanMiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9ub3RpZmljYXRpb25Qb3B1cC52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWQwY2U0NWYyXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vbm90aWZpY2F0aW9uUG9wdXAudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL25vdGlmaWNhdGlvblBvcHVwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gV2Zxc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy1mdWxsIG1iLThcIixjbGFzczp7J2hpZGRlbic6IChfdm0uYWN0aXZlVGFiICE9ICdhdXRoJyl9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYmctd2hpdGUgc2hhZG93IHJvdW5kZWQtdCB0ZXh0LWdyZXktZGFya2VzdCBtdC00XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IHRleHQtY2VudGVyIHRleHQtZ3JleVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzIgZm9udC1zZW1pYm9sZCBwLTQgcm91bmRlZC10bFwiLGNsYXNzOltfdm0uYWN0aXZlQ29sdW1uID09PSAncm9sZXMnID8gJ3RleHQtaW5kaWdvIGJvcmRlci1pbmRpZ28gYm9yZGVyLWItMicgOiAnYmctd2hpdGUgY3Vyc29yLXBvaW50ZXInXSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmFjdGl2YXRlVGhpc0NvbHVtbigncm9sZXMnKX19fSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ1JvbGVzJykpK1wiXFxuICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LTEvMiBmb250LXNlbWlib2xkIHAtNFwiLGNsYXNzOltfdm0uYWN0aXZlQ29sdW1uID09PSAncGVybWlzc2lvbnMnID8gJ3RleHQtaW5kaWdvIGJvcmRlci1pbmRpZ28gYm9yZGVyLWItMicgOiAnYmctd2hpdGUgY3Vyc29yLXBvaW50ZXInXSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmFjdGl2YXRlVGhpc0NvbHVtbigncGVybWlzc2lvbnMnKX19fSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ1Blcm1pc3Npb25zJykpK1wiXFxuICAgICAgXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdyb2xlcy1ib2FyZCcse2F0dHJzOntcImFjdGl2ZUNvbHVtblwiOl92bS5hY3RpdmVDb2x1bW59fSksX3ZtLl92KFwiIFwiKSxfYygncGVybWlzc2lvbnMtYm9hcmQnLHthdHRyczp7XCJhY3RpdmVDb2x1bW5cIjpfdm0uYWN0aXZlQ29sdW1ufX0pXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTdkMWIzZjRiXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL2F1dGhCb2FyZC52dWVcbi8vIG1vZHVsZSBpZCA9IFp5VFZcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgOmNsYXNzPVwiW25vdGlmaWNhdGlvblNob3duID8gJycgOiAnaGlkZGVuJywgKG1lc3NhZ2VUeXBlID09PSAnc3VjY2VzcycpID8gJ3RleHQtdGVhbC1saWdodCcgOiAndGV4dC1yZWQnIF1cIiBjbGFzcz1cImZpeGVkIHBpbi10IGJnLXdoaXRlIHRleHQtbGcgcm91bmRlZCBjb250YWluZXIgbXgtYXV0byBtZDp3LTEvMiBtdC0xNiBweS02IHB4LTggc2hhZG93LWxnIHotNTBcIiBzdHlsZT1cImxlZnQ6IDA7IHJpZ2h0OiAwOyBtYXgtd2lkdGg6IDY0MHB4O1wiPlxuICAgICAgICB7e21lc3NhZ2V9fSBcbiAgICAgICAgPGRpdiBAY2xpY2s9XCJjbG9zZU5vdGlmaWNhdGlvblwiIGNsYXNzPVwiaW5saW5lXCI+PGkgY2xhc3M9XCJmYXMgZmEtdGltZXMgZmxvYXQtcmlnaHQgY3Vyc29yLXBvaW50ZXJcIj48L2k+PC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhOiAoKSA9PiAoe1xuICAgIG5vdGlmaWNhdGlvblNob3duOiBmYWxzZSxcbiAgICBtZXNzYWdlOiAnJyxcbiAgICBtZXNzYWdlVHlwZTogJycsXG4gIH0pLFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VOb3RpZmljYXRpb24gKCkge1xuICAgICAgdGhpcy5ub3RpZmljYXRpb25TaG93biA9IGZhbHNlXG4gICAgfSxcbiAgICBzaG93Tm90aWZpY2F0aW9uIChtZXNzYWdlLCBtZXNzYWdlVHlwZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgICAgdGhpcy5tZXNzYWdlVHlwZSA9IG1lc3NhZ2VUeXBlXG4gICAgICB0aGlzLm5vdGlmaWNhdGlvblNob3duID0gdHJ1ZVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xvc2VOb3RpZmljYXRpb24oKVxuICAgICAgfSwgMzAwMClcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQgKCkge1xuICAgIEV2ZW50QnVzLiRvbignbm90aWZpY2F0aW9uJywgdGhpcy5zaG93Tm90aWZpY2F0aW9uKVxuICB9LFxuICBiZWZvcmVEZXN0cm95ICgpIHtcbiAgICBFdmVudEJ1cy4kb2ZmKCdub3RpZmljYXRpb24nLCB0aGlzLnNob3dOb3RpZmljYXRpb24pXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9ub3RpZmljYXRpb25Qb3B1cC52dWUiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9hY3Rpdml0eUJvYXJkLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzU3YzZlMmRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9hY3Rpdml0eUJvYXJkLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9hY3Rpdml0eUJvYXJkLnZ1ZVxuLy8gbW9kdWxlIGlkID0gZDhlYVxuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9wcm9maWxlRHJvcGRvd24udnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi04M2EyYjM0NFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Byb2ZpbGVEcm9wZG93bi52dWVcIilcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvcHJvZmlsZURyb3Bkb3duLnZ1ZVxuLy8gbW9kdWxlIGlkID0gZEJaV1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDciLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9hdHRhY2hQZXJtaXNzaW9uRm9ybS52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTFjZDIxNGQwXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXR0YWNoUGVybWlzc2lvbkZvcm0udnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2F0dGFjaFBlcm1pc3Npb25Gb3JtLnZ1ZVxuLy8gbW9kdWxlIGlkID0gZGg1UVxuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9pbnZpdGVNb2RhbC52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTc0ZTZmYjZkXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vaW52aXRlTW9kYWwudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL2ludml0ZU1vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gZHBmd1xuLy8gbW9kdWxlIGNodW5rcyA9IDMiLCI8dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicHgtNCBib3JkZXItbCBmbGV4IGl0ZW1zLWNlbnRlciBjdXJzb3ItcG9pbnRlciBwLTRcIj5cbiAgPGRpdiBpZD1cInByb2ZpbGUtZHJvcGRvd25cIiBjbGFzcz1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCIgQGNsaWNrPVwidG9nZ2xlUHJvZmlsZURyb3Bkb3duXCI+XG4gICAgPGltZyBjbGFzcz1cInctMTAgaC0xMCByb3VuZGVkLWZ1bGwgbWQ6bXItMlwiIDpzcmM9XCJnZW5lcmF0ZVVybCh1c2VyLmF2YXRhcilcIj5cbiAgICA8c3BhbiBjbGFzcz1cInRleHQtZ3JleS1kYXJrZXIgdGV4dC1iYXNlIG5vLXVuZGVybGluZSBoaWRkZW4gbWQ6YmxvY2tcIj5cbiAgICAgIHt7IHVzZXIubmFtZSB9fVxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1kb3duXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgIDwvc3Bhbj5cbiAgPC9kaXY+XG4gIDxkaXYgdi1pZj1cInByb2ZpbGVEcm9wZG93blNob3duXCIgaWQ9XCJwcm9maWxlLW1lbnVcIiBjbGFzcz1cImFic29sdXRlIGJnLXdoaXRlIHctNDggcGluLXIgbXItMiBweS0xIHNoYWRvdy1sZyByb3VuZGVkIHotNTBcIiBzdHlsZT1cInRvcDozLjVyZW07XCI+XG4gICAgPGEgY2xhc3M9XCJweC00IHB5LTIgaG92ZXI6YmctdGVhbCBob3Zlcjp0ZXh0LXdoaXRlIG5vLXVuZGVybGluZSB0ZXh0LWdyZXktZGFyayBibG9jayBmb250LW1lZGl1bVwiIDpocmVmPVwicHJvZmlsZVVybFwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ3LTYgaW5saW5lLWJsb2NrXCI+PGkgY2xhc3M9XCJwci0xIGZhIGZhLXVzZXJcIj48L2k+PC9zcGFuPlxuICAgICAge3sgJ1lvdXIgUHJvZmlsZScgfCBsb2NhbGl6ZSB9fVxuICAgIDwvYT5cbiAgICA8YSBjbGFzcz1cInB4LTQgcHktMiBob3ZlcjpiZy10ZWFsIGhvdmVyOnRleHQtd2hpdGUgdGV4dC1ncmV5LWRhcmsgZm9udC1tZWRpdW0gbm8tdW5kZXJsaW5lIGJsb2NrXCIgaHJlZj1cIi9hZG1pblwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ3LTYgaW5saW5lLWJsb2NrXCI+PGkgY2xhc3M9XCJwci0xIGZhcyBmYS1zaGllbGQtYWx0IGZvbnQtcmVndWxhclwiPjwvaT48L3NwYW4+XG4gICAgICB7eyAnQWRtaW4nIHwgbG9jYWxpemUgfX1cbiAgICA8L2E+XG4gICAgPGEgY2xhc3M9XCJweC00IHB5LTIgaG92ZXI6YmctdGVhbCBob3Zlcjp0ZXh0LXdoaXRlIHRleHQtZ3JleS1kYXJrIGZvbnQtbWVkaXVtIG5vLXVuZGVybGluZSBibG9ja1wiIGhyZWY9XCIjXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInctNiBpbmxpbmUtYmxvY2tcIj48aSBjbGFzcz1cInByLTEgZmEgZmEtY29nIGZvbnQtcmVndWxhclwiPjwvaT48L3NwYW4+XG4gICAgICB7eyAnU2V0dGluZ3MnIHwgbG9jYWxpemUgfX1cbiAgICA8L2E+XG4gICAgPHNwYW4gY2xhc3M9XCJibG9jayBib3JkZXItdFwiPjwvc3Bhbj5cbiAgICA8YSBjbGFzcz1cInB4LTQgcHktMiBob3ZlcjpiZy10ZWFsIGhvdmVyOnRleHQtd2hpdGUgdGV4dC1ncmV5LWRhcmsgZm9udC1tZWRpdW0gbm8tdW5kZXJsaW5lIGJsb2NrXCIgOmhyZWY9XCJ1cmwubG9nb3V0XCIgQGNsaWNrPVwibG9nb3V0VXNlclwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ3LTYgaW5saW5lLWJsb2NrXCI+PGkgY2xhc3M9XCJwci0xIGZhcyBmYS1zaWduLW91dC1hbHQgZm9udC1yZWd1bGFyXCI+PC9pPjwvc3Bhbj5cbiAgICAgIHt7ICdMb2dvdXQnIHwgbG9jYWxpemUgfX1cbiAgICA8L2E+XG4gIDwvZGl2PiAgICAgICAgICAgIFxuICA8Zm9ybSBpZD1cImxvZ291dC1mb3JtXCIgOmFjdGlvbj1cInVybC5sb2dvdXRcIiBtZXRob2Q9XCJQT1NUXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiX3Rva2VuXCIgOnZhbHVlPVwidG9rZW5cIj5cbiAgPC9mb3JtPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhOiAoKSA9PiAoe1xuICAgIHVzZXI6IG5hdmJhci51c2VyLFxuICAgIHRva2VuOiBMYXJhdmVsLmNzcmZUb2tlbixcbiAgICB1cmw6IG5hdmJhci5uYXZVcmwsXG4gICAgYXZhdGFyOiBcIlwiLFxuICAgIHByb2ZpbGVVcmw6IG5hdmJhci5uYXZVcmwuc2l0ZSArIFwiL3VzZXJzL1wiICsgbmF2YmFyLnVzZXIudXNlcm5hbWUsXG4gICAgcHJvZmlsZURyb3Bkb3duU2hvd246IGZhbHNlXG4gIH0pLFxuICBtZXRob2RzOiB7XG4gICAgbG9nb3V0VXNlcihldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2dvdXQtZm9ybVwiKS5zdWJtaXQoKVxuICAgIH0sXG4gICAgdG9nZ2xlUHJvZmlsZURyb3Bkb3duKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5wcm9maWxlRHJvcGRvd25TaG93bikge1xuICAgICAgICB0aGlzLmhpZGVQcm9maWxlRHJvcGRvd24oZXZlbnQpXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuaGlkZVByb2ZpbGVEcm9wZG93bilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvd1Byb2ZpbGVEcm9wZG93bigpXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuaGlkZVByb2ZpbGVEcm9wZG93bilcbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dQcm9maWxlRHJvcGRvd24oZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLm5vdGlmaWNhdGlvblNob3duKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU2hvd24gPSBmYWxzZVxuICAgICAgfVxuICAgICAgdGhpcy5wcm9maWxlRHJvcGRvd25TaG93biA9IHRydWVcbiAgICB9LFxuICAgIGhpZGVQcm9maWxlRHJvcGRvd24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50eXBlID09PSBcImtleXVwXCIgJiYgZXZlbnQua2V5ICE9PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgdGhpcy5wcm9maWxlRHJvcGRvd25TaG93biA9IGZhbHNlXG4gICAgfVxuICB9LFxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL3BhcnRpYWxzL3Byb2ZpbGVEcm9wZG93bi52dWUiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJweC00IHNlbGYtY2VudGVyXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXRlYWwtbGlnaHQgdGV4dC1iYXNlIG5vLXVuZGVybGluZSBjdXJzb3ItcG9pbnRlclwiLGF0dHJzOntcImlkXCI6XCJub3RpZmljYXRpb25cIn0sb246e1wiY2xpY2tcIjpfdm0udG9nZ2xlTm90aWZpY2F0aW9ufX0sW19jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYXIgZmEtYmVsbCBmb250LWJvbGQgdGV4dC14bFwiLGF0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSksX3ZtLl92KFwiIFwiKSwoX3ZtLnVucmVhZE5vdGlmaWNhdGlvbik/X2MoJ2knLHtzdGF0aWNDbGFzczpcImZhIGZhLWNpcmNsZSB0ZXh0LXJlZC1saWdodCB0ZXh0LXNtIGFic29sdXRlIHBpbi10IG10LTMgbWwtM1wiLGF0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSk6X3ZtLl9lKCldKSxfdm0uX3YoXCIgXCIpLChfdm0ubm90aWZpY2F0aW9uU2hvd24pP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFic29sdXRlIGJnLXdoaXRlIHctNjQgbXQtNSBtci04IHB5LTQgc2hhZG93LWxnIHJvdW5kZWQgei01MFwiLHN0YXRpY1N0eWxlOntcInJpZ2h0XCI6XCI1JVwifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBsaXN0LXJlc2V0IHB4LTQgcHktMiB0ZXh0LWdyZXktZGFyayBuby11bmRlcmxpbmUgYmxvY2tcIixhdHRyczp7XCJocmVmXCI6XCIjXCJ9fSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOlwidy0xMCBoLTEwIHJvdW5kZWQtZnVsbCBtci0yXCIsYXR0cnM6e1wic3JjXCI6X3ZtLmdlbmVyYXRlVXJsKF92bS51c2VyLmF2YXRhcil9fSksX3ZtLl92KFwiIFwiKSxfdm0uX20oMCldKSxfdm0uX3YoXCIgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBsaXN0LXJlc2V0IHB4LTQgcHktMiB0ZXh0LWdyZXktZGFyayBuby11bmRlcmxpbmUgYmxvY2tcIixhdHRyczp7XCJocmVmXCI6XCIjXCJ9fSxbX2MoJ2ltZycse3N0YXRpY0NsYXNzOlwidy0xMCBoLTEwIHJvdW5kZWQtZnVsbCBtci0yXCIsYXR0cnM6e1wic3JjXCI6X3ZtLmdlbmVyYXRlVXJsKF92bS51c2VyLmF2YXRhcil9fSksX3ZtLl92KFwiIFwiKSxfdm0uX20oMSldKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJibG9jayBib3JkZXItdFwifSksX3ZtLl92KFwiIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwibGlzdC1yZXNldCBweC00IHB0LTIgdGV4dC1ibHVlLWxpZ2h0IHRleHQtY2VudGVyIG5vLXVuZGVybGluZSBibG9ja1wiLGF0dHJzOntcImhyZWZcIjpcIi9ub3RpZmljYXRpb25zXCJ9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgVmlldyBBbGxcXG4gICAgICAgIFwiKV0pXSk6X3ZtLl9lKCldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2JyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHktMSB0ZXh0LXNtXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRlZCBvbiB5b3VyIHBvc3RcXG4gICAgICAgICAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJweS0xIHRleHQteHNcIn0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgICAgMiBtaW4gYWdvXFxuICAgICAgICAgICAgICAgIFwiKV0pXSl9LGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2RpdicsW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB5LTEgdGV4dC1zbVwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ZWQgb24geW91ciBwb3N0XFxuICAgICAgICAgICAgICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHktMSB0ZXh0LXhzXCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIDIgbWluIGFnb1xcbiAgICAgICAgICAgICAgICBcIildKV0pfV1cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtN2FjNTg0ZDZcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbm90aWZpY2F0aW9uRHJvcGRvd24udnVlXG4vLyBtb2R1bGUgaWQgPSBmTjlQXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyIsIjx0ZW1wbGF0ZT5cbjxkaXY+XG4gIDxkaXYgOmNsYXNzPVwieydoaWRkZW4nOiAhZm9ybVNob3dufVwiIGNsYXNzPVwiYWJzb2x1dGUgY29udGFpbmVyIG14LWF1dG8gdy01LzYgbWQ6dy0zLzUgbGc6dy0yLzUgYmctd2hpdGUgcm91bmRlZCBzaGFkb3ctbGcgei0xMFwiIHN0eWxlPVwidG9wOiAyMHZoO2xlZnQ6IDA7cmlnaHQ6IDA7XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicC00XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtNFwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJibG9jayB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LWdyZXktZGFya2VyIHRleHQteHMgZm9udC1ib2xkIG1iLTJcIiBmb3I9XCJncmlkLWZpcnN0LW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgIFJvbGVzXG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3Qgdi1tb2RlbD1cInJvbGVJZFwiIGNsYXNzPVwidy01LzYgYmxvY2sgYXBwZWFyYW5jZS1ub25lIHctZnVsbCBiZy1ncmV5LWxpZ2h0ZXIgYm9yZGVyIGJvcmRlci1ncmV5LWxpZ2h0ZXIgdGV4dC1ncmV5LWRhcmtlciBweS0zIHB4LTQgcHItOCByb3VuZGVkXCIgaWQ9XCJ1c2VyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQgZGlzYWJsZWQgaGlkZGVuPlNlbGVjdCBQZXJtaXNzaW9uIHRvIEFkZCB0byBSb2xlPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInJvbGUgaW4gcm9sZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gOnZhbHVlPVwicm9sZS5pZFwiIGNsYXNzPVwibXktMiB0ZXh0LWxnXCI+e3sgcm9sZS5uYW1lIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ3LTEvNiBmYSBmYS1jaGV2cm9uLWRvd24gcG9pbnRlci1ldmVudHMtbm9uZSBmbGV4IGl0ZW1zLWNlbnRlciB0ZXh0LWdyZXktZGFya2VyIC1tbC04XCI+PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1yb3cganVzdGlmeS1iZXR3ZWVuIHB5LTQgcHgtOCBiZy1ncmV5LWxpZ2h0ZXIgcm91bmRlZFwiPlxuICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiY2xvc2VGb3JtXCIgY2xhc3M9XCJ0ZXh0LXJlZC1saWdodGVyIGhvdmVyOmZvbnQtYm9sZCBob3Zlcjp0ZXh0LXJlZC1saWdodFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gQGNsaWNrPVwiYXR0YWNoUGVybWlzc2lvblwiIGNsYXNzPVwiYmctdGVhbC1saWdodCB0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIGhvdmVyOmJnLXRlYWwtZGFyayBweS00IHB4LTggcm91bmRlZFwiPkF0dGFjaDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IEBjbGljaz1cImNsb3NlRm9ybVwiIDpjbGFzcz1cInsnaGlkZGVuJzogIWZvcm1TaG93bn1cIiBjbGFzcz1cImgtc2NyZWVuIHctc2NyZWVuIGZpeGVkIHBpbiBiZy1ncmV5LWRhcmtlc3Qgb3BhY2l0eS0yNVwiPjwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczogWydmb3JtU2hvd24nLCAncGVybWlzc2lvbklkJ10sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgcm9sZXM6IFtdLFxuICAgIHJvbGVJZDogbnVsbFxuICB9KSxcbiAgbW91bnRlZCAoKSB7XG4gICAgYXhpb3MuZ2V0KCdhZG1pbi9yb2xlcycpXG4gICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHRoaXMucm9sZXMgPSByZXNwb25zZS5kYXRhLnJvbGVzXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpXG4gICAgICAgIH0pXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBjbG9zZUZvcm0gKCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKVxuICAgIH0sXG4gICAgYXR0YWNoUGVybWlzc2lvbiAoKSB7XG4gICAgICBheGlvcy5wb3N0KCcvYWRtaW4vcm9sZXMvJyArIHRoaXMucm9sZUlkICsgJy9wZXJtaXNzaW9ucycsIHtwZXJtaXNzaW9uX2lkOiB0aGlzLnBlcm1pc3Npb25JZH0pXG4gICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgIHRoaXMucm9sZUlkID0gbnVsbFxuICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3Blcm1pc3Npb24tYXR0YWNoZWQnLCByZXNwb25zZS5kYXRhLnJvbGUpXG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICB9KVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Zvcm1zL2F0dGFjaFBlcm1pc3Npb25Gb3JtLnZ1ZSIsInZhciBhc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXdhaXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jR2VuZXJhdG9yKGdlbikge1xuICAgIHZhciBmcm9udCwgYmFjaztcblxuICAgIGZ1bmN0aW9uIHNlbmQoa2V5LCBhcmcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGFyZzogYXJnLFxuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChiYWNrKSB7XG4gICAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbnQgPSBiYWNrID0gcmVxdWVzdDtcbiAgICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUoa2V5LCBhcmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXdhaXRWYWx1ZSkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZS52YWx1ZSkudGhlbihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXN1bWUoXCJuZXh0XCIsIGFyZyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwidGhyb3dcIiwgYXJnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXR0bGUocmVzdWx0LmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgcmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICAgIGZyb250LnJlamVjdCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZyb250ID0gZnJvbnQubmV4dDtcblxuICAgICAgaWYgKGZyb250KSB7XG4gICAgICAgIHJlc3VtZShmcm9udC5rZXksIGZyb250LmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbnZva2UgPSBzZW5kO1xuXG4gICAgaWYgKHR5cGVvZiBnZW4ucmV0dXJuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfVxuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJuZXh0XCIsIGFyZyk7XG4gIH07XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcInJldHVyblwiLCBhcmcpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgd3JhcDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzeW5jR2VuZXJhdG9yKGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgQXdhaXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xufSgpO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbnZhciBDb25uZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29ubmVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdG9yKTtcblxuICAgICAgICB0aGlzLl9kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1dGhFbmRwb2ludDogJy9icm9hZGNhc3RpbmcvYXV0aCcsXG4gICAgICAgICAgICBicm9hZGNhc3RlcjogJ3B1c2hlcicsXG4gICAgICAgICAgICBjc3JmVG9rZW46IG51bGwsXG4gICAgICAgICAgICBob3N0OiBudWxsLFxuICAgICAgICAgICAga2V5OiBudWxsLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiAnQXBwLkV2ZW50cydcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhDb25uZWN0b3IsIFt7XG4gICAgICAgIGtleTogJ3NldE9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh0aGlzLl9kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAodGhpcy5jc3JmVG9rZW4oKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdXRoLmhlYWRlcnNbJ1gtQ1NSRi1UT0tFTiddID0gdGhpcy5jc3JmVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjc3JmVG9rZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3NyZlRva2VuKCkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1snTGFyYXZlbCddICYmIHdpbmRvd1snTGFyYXZlbCddLmNzcmZUb2tlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3dbJ0xhcmF2ZWwnXS5jc3JmVG9rZW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jc3JmVG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNzcmZUb2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAoc2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENvbm5lY3Rvcjtcbn0oKTtcblxudmFyIENoYW5uZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbCgpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbm5lbCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnbm90aWZpY2F0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vdGlmaWNhdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuKCcuSWxsdW1pbmF0ZVxcXFxOb3RpZmljYXRpb25zXFxcXEV2ZW50c1xcXFxCcm9hZGNhc3ROb3RpZmljYXRpb25DcmVhdGVkJywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsaXN0ZW5Gb3JXaGlzcGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbkZvcldoaXNwZXIoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW4oJy5jbGllbnQtJyArIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENoYW5uZWw7XG59KCk7XG5cbnZhciBFdmVudEZvcm1hdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudEZvcm1hdHRlcihuYW1lc3BhY2UpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRGb3JtYXR0ZXIpO1xuXG4gICAgICAgIHRoaXMuc2V0TmFtZXNwYWNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoRXZlbnRGb3JtYXR0ZXIsIFt7XG4gICAgICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5jaGFyQXQoMCkgPT09ICcuJyB8fCBldmVudC5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5zdWJzdHIoMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSB0aGlzLm5hbWVzcGFjZSArICcuJyArIGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnJlcGxhY2UoL1xcLi9nLCAnXFxcXCcpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXROYW1lc3BhY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmFtZXNwYWNlKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBFdmVudEZvcm1hdHRlcjtcbn0oKTtcblxudmFyIFB1c2hlckNoYW5uZWwgPSBmdW5jdGlvbiAoX0NoYW5uZWwpIHtcbiAgICBpbmhlcml0cyhQdXNoZXJDaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBQdXNoZXJDaGFubmVsKHB1c2hlciwgbmFtZSwgb3B0aW9ucykge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJDaGFubmVsKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQdXNoZXJDaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHVzaGVyQ2hhbm5lbCkpLmNhbGwodGhpcykpO1xuXG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5wdXNoZXIgPSBwdXNoZXI7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBfdGhpcy5ldmVudEZvcm1hdHRlciA9IG5ldyBFdmVudEZvcm1hdHRlcihfdGhpcy5vcHRpb25zLm5hbWVzcGFjZSk7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5wdXNoZXIuc3Vic2NyaWJlKHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Vuc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy5wdXNoZXIudW5zdWJzY3JpYmUodGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdGVuJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24odGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RvcExpc3RlbmluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bmJpbmQodGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmJpbmQoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBQdXNoZXJDaGFubmVsO1xufShDaGFubmVsKTtcblxudmFyIFB1c2hlclByaXZhdGVDaGFubmVsID0gZnVuY3Rpb24gKF9QdXNoZXJDaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoUHVzaGVyUHJpdmF0ZUNoYW5uZWwsIF9QdXNoZXJDaGFubmVsKTtcblxuICAgIGZ1bmN0aW9uIFB1c2hlclByaXZhdGVDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJQcml2YXRlQ2hhbm5lbCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQdXNoZXJQcml2YXRlQ2hhbm5lbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFB1c2hlclByaXZhdGVDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyUHJpdmF0ZUNoYW5uZWwsIFt7XG4gICAgICAgIGtleTogJ3doaXNwZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd2hpc3BlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyLmNoYW5uZWxzLmNoYW5uZWxzW3RoaXMubmFtZV0udHJpZ2dlcignY2xpZW50LScgKyBldmVudE5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFB1c2hlclByaXZhdGVDaGFubmVsO1xufShQdXNoZXJDaGFubmVsKTtcblxudmFyIFB1c2hlclByZXNlbmNlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfUHVzaGVyQ2hhbm5lbCkge1xuICAgIGluaGVyaXRzKFB1c2hlclByZXNlbmNlQ2hhbm5lbCwgX1B1c2hlckNoYW5uZWwpO1xuXG4gICAgZnVuY3Rpb24gUHVzaGVyUHJlc2VuY2VDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJQcmVzZW5jZUNoYW5uZWwpO1xuICAgICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHVzaGVyUHJlc2VuY2VDaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHVzaGVyUHJlc2VuY2VDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyUHJlc2VuY2VDaGFubmVsLCBbe1xuICAgICAgICBrZXk6ICdoZXJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhlcmUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3B1c2hlcjpzdWJzY3JpcHRpb25fc3VjY2VlZGVkJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhPYmplY3Qua2V5cyhkYXRhLm1lbWJlcnMpLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5tZW1iZXJzW2tdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2pvaW5pbmcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbmluZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHVzaGVyOm1lbWJlcl9hZGRlZCcsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtZW1iZXIuaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2aW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3B1c2hlcjptZW1iZXJfcmVtb3ZlZCcsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtZW1iZXIuaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd3aGlzcGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdoaXNwZXIoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2hlci5jaGFubmVscy5jaGFubmVsc1t0aGlzLm5hbWVdLnRyaWdnZXIoJ2NsaWVudC0nICsgZXZlbnROYW1lLCBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBQdXNoZXJQcmVzZW5jZUNoYW5uZWw7XG59KFB1c2hlckNoYW5uZWwpO1xuXG52YXIgU29ja2V0SW9DaGFubmVsID0gZnVuY3Rpb24gKF9DaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoU29ja2V0SW9DaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBTb2NrZXRJb0NoYW5uZWwoc29ja2V0LCBuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tldElvQ2hhbm5lbCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU29ja2V0SW9DaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU29ja2V0SW9DaGFubmVsKSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgX3RoaXMuZXZlbnRzID0ge307XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBfdGhpcy5ldmVudEZvcm1hdHRlciA9IG5ldyBFdmVudEZvcm1hdHRlcihfdGhpcy5vcHRpb25zLm5hbWVzcGFjZSk7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZSgpO1xuICAgICAgICBfdGhpcy5jb25maWd1cmVSZWNvbm5lY3RvcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9DaGFubmVsLCBbe1xuICAgICAgICBrZXk6ICdzdWJzY3JpYmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnc3Vic2NyaWJlJywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBhdXRoOiB0aGlzLm9wdGlvbnMuYXV0aCB8fCB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Vuc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3Vuc3Vic2NyaWJlJywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBhdXRoOiB0aGlzLm9wdGlvbnMuYXV0aCB8fCB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLm9uKHRoaXMuZXZlbnRGb3JtYXR0ZXIuZm9ybWF0KGV2ZW50KSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGNoYW5uZWwsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLm5hbWUgPT0gY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYmluZChldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb25maWd1cmVSZWNvbm5lY3RvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25maWd1cmVSZWNvbm5lY3RvcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBfdGhpczMuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub24oJ3JlY29ubmVjdCcsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYmluZCgncmVjb25uZWN0JywgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdiaW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmQoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB0aGlzLmV2ZW50c1tldmVudF0gfHwgW107XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VuYmluZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXM0LmV2ZW50c1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnNvY2tldC5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpczQuZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBTb2NrZXRJb0NoYW5uZWw7XG59KENoYW5uZWwpO1xuXG52YXIgU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfU29ja2V0SW9DaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCwgX1NvY2tldElvQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNvY2tldElvUHJpdmF0ZUNoYW5uZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTb2NrZXRJb1ByaXZhdGVDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnd2hpc3BlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3aGlzcGVyKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnY2xpZW50IGV2ZW50Jywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBldmVudDogJ2NsaWVudC0nICsgZXZlbnROYW1lLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNvY2tldElvUHJpdmF0ZUNoYW5uZWw7XG59KFNvY2tldElvQ2hhbm5lbCk7XG5cbnZhciBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfU29ja2V0SW9Qcml2YXRlQ2hhbm4pIHtcbiAgICBpbmhlcml0cyhTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCwgX1NvY2tldElvUHJpdmF0ZUNoYW5uKTtcblxuICAgIGZ1bmN0aW9uIFNvY2tldElvUHJlc2VuY2VDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNvY2tldElvUHJlc2VuY2VDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9QcmVzZW5jZUNoYW5uZWwsIFt7XG4gICAgICAgIGtleTogJ2hlcmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGVyZShjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHJlc2VuY2U6c3Vic2NyaWJlZCcsIGZ1bmN0aW9uIChtZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWVtYmVycy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0udXNlcl9pbmZvO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2pvaW5pbmcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbmluZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHJlc2VuY2U6am9pbmluZycsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVtYmVyLnVzZXJfaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2aW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3ByZXNlbmNlOmxlYXZpbmcnLCBmdW5jdGlvbiAobWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG1lbWJlci51c2VyX2luZm8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gU29ja2V0SW9QcmVzZW5jZUNoYW5uZWw7XG59KFNvY2tldElvUHJpdmF0ZUNoYW5uZWwpO1xuXG52YXIgUHVzaGVyQ29ubmVjdG9yID0gZnVuY3Rpb24gKF9Db25uZWN0b3IpIHtcbiAgICBpbmhlcml0cyhQdXNoZXJDb25uZWN0b3IsIF9Db25uZWN0b3IpO1xuXG4gICAgZnVuY3Rpb24gUHVzaGVyQ29ubmVjdG9yKCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJDb25uZWN0b3IpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFB1c2hlckNvbm5lY3Rvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFB1c2hlckNvbm5lY3RvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhQdXNoZXJDb25uZWN0b3IsIFt7XG4gICAgICAgIGtleTogJ2Nvbm5lY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyID0gbmV3IFB1c2hlcih0aGlzLm9wdGlvbnMua2V5LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsaXN0ZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKG5hbWUsIGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbChuYW1lKS5saXN0ZW4oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbm5lbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbbmFtZV0gPSBuZXcgUHVzaGVyQ2hhbm5lbCh0aGlzLnB1c2hlciwgbmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcml2YXRlQ2hhbm5lbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcml2YXRlQ2hhbm5lbChuYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJpdmF0ZS0nICsgbmFtZV0gPSBuZXcgUHVzaGVyUHJpdmF0ZUNoYW5uZWwodGhpcy5wdXNoZXIsICdwcml2YXRlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmVzZW5jZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc2VuY2VDaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdID0gbmV3IFB1c2hlclByZXNlbmNlQ2hhbm5lbCh0aGlzLnB1c2hlciwgJ3ByZXNlbmNlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGVhdmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGVhdmUobmFtZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBjaGFubmVscyA9IFtuYW1lLCAncHJpdmF0ZS0nICsgbmFtZSwgJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICAgICAgICAgIGNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMi5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuY2hhbm5lbHNbbmFtZV0udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5jaGFubmVsc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc29ja2V0SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc29ja2V0SWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5zb2NrZXRfaWQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rpc2Nvbm5lY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gUHVzaGVyQ29ubmVjdG9yO1xufShDb25uZWN0b3IpO1xuXG52YXIgU29ja2V0SW9Db25uZWN0b3IgPSBmdW5jdGlvbiAoX0Nvbm5lY3Rvcikge1xuICAgIGluaGVyaXRzKFNvY2tldElvQ29ubmVjdG9yLCBfQ29ubmVjdG9yKTtcblxuICAgIGZ1bmN0aW9uIFNvY2tldElvQ29ubmVjdG9yKCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb0Nvbm5lY3Rvcik7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU29ja2V0SW9Db25uZWN0b3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTb2NrZXRJb0Nvbm5lY3RvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhTb2NrZXRJb0Nvbm5lY3RvciwgW3tcbiAgICAgICAga2V5OiAnY29ubmVjdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgICAgICAgICAgdmFyIGlvID0gdGhpcy5nZXRTb2NrZXRJTygpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBpbyh0aGlzLm9wdGlvbnMuaG9zdCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvY2tldDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0U29ja2V0SU8nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U29ja2V0SU8oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xpZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb2NrZXQuaW8gY2xpZW50IG5vdCBmb3VuZC4gU2hvdWxkIGJlIGdsb2JhbGx5IGF2YWlsYWJsZSBvciBwYXNzZWQgdmlhIG9wdGlvbnMuY2xpZW50Jyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4obmFtZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsKG5hbWUpLmxpc3RlbihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFubmVsJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5uZWwobmFtZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1tuYW1lXSA9IG5ldyBTb2NrZXRJb0NoYW5uZWwodGhpcy5zb2NrZXQsIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsc1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJpdmF0ZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJpdmF0ZUNoYW5uZWwobmFtZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzWydwcml2YXRlLScgKyBuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdID0gbmV3IFNvY2tldElvUHJpdmF0ZUNoYW5uZWwodGhpcy5zb2NrZXQsICdwcml2YXRlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmVzZW5jZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc2VuY2VDaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdID0gbmV3IFNvY2tldElvUHJlc2VuY2VDaGFubmVsKHRoaXMuc29ja2V0LCAncHJlc2VuY2UtJyArIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2ZShuYW1lKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGNoYW5uZWxzID0gW25hbWUsICdwcml2YXRlLScgKyBuYW1lLCAncHJlc2VuY2UtJyArIG5hbWVdO1xuICAgICAgICAgICAgY2hhbm5lbHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczIuY2hhbm5lbHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmNoYW5uZWxzW25hbWVdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpczIuY2hhbm5lbHNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NvY2tldElkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNvY2tldElkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LmlkO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNjb25uZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNvY2tldElvQ29ubmVjdG9yO1xufShDb25uZWN0b3IpO1xuXG52YXIgRWNobyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFY2hvKG9wdGlvbnMpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRWNobyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKHR5cGVvZiBWdWUgPT09ICdmdW5jdGlvbicgJiYgVnVlLmh0dHApIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGF4aW9zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQXhpb3NSZXF1ZXN0SW50ZXJjZXB0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcmpRdWVyeUFqYXhTZXR1cCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJvYWRjYXN0ZXIgPT0gJ3B1c2hlcicpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yID0gbmV3IFB1c2hlckNvbm5lY3Rvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5icm9hZGNhc3RlciA9PSAnc29ja2V0LmlvJykge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgU29ja2V0SW9Db25uZWN0b3IodGhpcy5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNsYXNzKEVjaG8sIFt7XG4gICAgICAgIGtleTogJ3JlZ2lzdGVyVnVlUmVxdWVzdEludGVyY2VwdG9yJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVnVlUmVxdWVzdEludGVyY2VwdG9yKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgVnVlLmh0dHAuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24gKHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc29ja2V0SWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KCdYLVNvY2tldC1JRCcsIF90aGlzLnNvY2tldElkKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXJBeGlvc1JlcXVlc3RJbnRlcmNlcHRvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckF4aW9zUmVxdWVzdEludGVyY2VwdG9yKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGF4aW9zLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMi5zb2NrZXRJZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydYLVNvY2tldC1JZCddID0gX3RoaXMyLnNvY2tldElkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkuYWpheCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5hamF4U2V0dXAoe1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiBiZWZvcmVTZW5kKHhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5zb2NrZXRJZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtU29ja2V0LUlkJywgX3RoaXMzLnNvY2tldElkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oY2hhbm5lbCwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IubGlzdGVuKGNoYW5uZWwsIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbm5lbChfY2hhbm5lbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmNoYW5uZWwoX2NoYW5uZWwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcml2YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcml2YXRlKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5wcml2YXRlQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnam9pbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5wcmVzZW5jZUNoYW5uZWwoY2hhbm5lbCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xlYXZlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yLmxlYXZlKGNoYW5uZWwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzb2NrZXRJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzb2NrZXRJZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5zb2NrZXRJZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNjb25uZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rvci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEVjaG87XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWNobztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sYXJhdmVsLWVjaG8vZGlzdC9lY2hvLmpzXG4vLyBtb2R1bGUgaWQgPSBpdXpYXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyA4IDkiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2JyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWJzb2x1dGUgY29udGFpbmVyIG14LWF1dG8gdy01LzYgbWQ6dy0zLzUgbGc6dy0yLzUgYmctd2hpdGUgcm91bmRlZCBzaGFkb3ctbGcgei0xMFwiLGNsYXNzOnsnaGlkZGVuJzogIV92bS5mb3JtU2hvd259LHN0YXRpY1N0eWxlOntcInRvcFwiOlwiMjB2aFwiLFwibGVmdFwiOlwiMFwiLFwicmlnaHRcIjpcIjBcIn19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInAtNFwifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJibG9jayB1cHBlcmNhc2UgdHJhY2tpbmctd2lkZSB0ZXh0LWdyZXktZGFya2VyIHRleHQteHMgZm9udC1ib2xkIG1iLTJcIixhdHRyczp7XCJmb3JcIjpcImdyaWQtZmlyc3QtbmFtZVwifX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgIFBlcm1pc3Npb25zXFxuICAgICAgICAgICAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyXCJ9LFtfYygnc2VsZWN0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KF92bS5wZXJtaXNzaW9uX2lkKSxleHByZXNzaW9uOlwicGVybWlzc2lvbl9pZFwifV0sc3RhdGljQ2xhc3M6XCJ3LTUvNiBibG9jayBhcHBlYXJhbmNlLW5vbmUgdy1mdWxsIGJnLWdyZXktbGlnaHRlciBib3JkZXIgYm9yZGVyLWdyZXktbGlnaHRlciB0ZXh0LWdyZXktZGFya2VyIHB5LTMgcHgtNCBwci04IHJvdW5kZWRcIixhdHRyczp7XCJpZFwiOlwidXNlclwifSxvbjp7XCJjaGFuZ2VcIjpmdW5jdGlvbigkZXZlbnQpe3ZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pLm1hcChmdW5jdGlvbihvKXt2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO3JldHVybiB2YWx9KTsgX3ZtLnBlcm1pc3Npb25faWQ9JGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdfX19LFtfYygnb3B0aW9uJyx7YXR0cnM6e1wic2VsZWN0ZWRcIjpcIlwiLFwiZGlzYWJsZWRcIjpcIlwiLFwiaGlkZGVuXCI6XCJcIn19LFtfdm0uX3YoXCJTZWxlY3QgUGVybWlzc2lvbiB0byBBZGQgdG8gUm9sZVwiKV0pLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0ucGVybWlzc2lvbnMpLGZ1bmN0aW9uKHBlcm1pc3Npb24pe3JldHVybiBbX2MoJ29wdGlvbicse3N0YXRpY0NsYXNzOlwibXktMiB0ZXh0LWxnXCIsZG9tUHJvcHM6e1widmFsdWVcIjpwZXJtaXNzaW9uLmlkfX0sW192bS5fdihfdm0uX3MocGVybWlzc2lvbi5uYW1lKSldKV19KV0sMiksX3ZtLl92KFwiIFwiKSxfYygnaScse3N0YXRpY0NsYXNzOlwidy0xLzYgZmEgZmEtY2hldnJvbi1kb3duIHBvaW50ZXItZXZlbnRzLW5vbmUgZmxleCBpdGVtcy1jZW50ZXIgdGV4dC1ncmV5LWRhcmtlciAtbWwtOFwifSldKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBweS00IHB4LTggYmctZ3JleS1saWdodGVyIHJvdW5kZWRcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcInRleHQtcmVkLWxpZ2h0ZXIgaG92ZXI6Zm9udC1ib2xkIGhvdmVyOnRleHQtcmVkLWxpZ2h0XCIsb246e1wiY2xpY2tcIjpfdm0uY2xvc2VGb3JtfX0sW192bS5fdihcIkNhbmNlbFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYmctdGVhbC1saWdodCB0ZXh0LXdoaXRlIGZvbnQtbWVkaXVtIGhvdmVyOmJnLXRlYWwtZGFyayBweS00IHB4LTggcm91bmRlZFwiLG9uOntcImNsaWNrXCI6X3ZtLmFzc2lnblBlcm1pc3Npb259fSxbX3ZtLl92KFwiQXNzaWduXCIpXSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaC1zY3JlZW4gdy1zY3JlZW4gZml4ZWQgcGluIGJnLWdyZXktZGFya2VzdCBvcGFjaXR5LTI1XCIsY2xhc3M6eydoaWRkZW4nOiAhX3ZtLmZvcm1TaG93bn0sb246e1wiY2xpY2tcIjpfdm0uY2xvc2VGb3JtfX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNTBmYWIyNmFcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZm9ybXMvYXNzaWduUGVybWlzc2lvbkZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSBqSzlEXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNvbnRhaW5lciBtZDpteC1hdXRvIG1kOnB4LTQgbWQ6bXktNiB3LWZ1bGwgbWQ6dy1tZCBsZzp3LWxnIHhsOncteGwgeHhsOnctMnhsIGJvcmRlci10IG1kOmJvcmRlci0wXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBtZDpqdXN0aWZ5LWFyb3VuZCBtZDpteS02IHB5LTIgbWQ6cHktNCBiZy13aGl0ZSBzaGFkb3cgbWQ6cm91bmRlZCB0ZXh0LWdyZXlcIn0sW19jKCdkaXYnLHtjbGFzczpbKF92bS5hY3RpdmUgPT09ICd1c2VycycpID8gJ3RleHQtdGVhbC1kYXJrIGZvbnQtc2VtaWJvbGQgYm9yZGVyLXRlYWwgYm9yZGVyLWItMiBwYi0yIG1kOnBiLTQgLW1iLTIgbWQ6LW1iLTQnIDogJ2N1cnNvci1wb2ludGVyJywgJ3RleHQtY2VudGVyIHctMS8yJ10sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5hY3RpdmF0ZVRoaXNUYWIoJ3VzZXJzJyl9fX0sW19jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYXMgZmEtdXNlcnMgdGV4dC14bCBtZDp0ZXh0LTJ4bFwifSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYmxvY2sgdGV4dC14cyBmb250LXJlZ3VsYXIgcHQtMlwifSxbX3ZtLl92KF92bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnVXNlcnMnKSkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtjbGFzczpbKF92bS5hY3RpdmUgPT09ICdhdXRoJykgPyAndGV4dC10ZWFsLWRhcmsgZm9udC1zZW1pYm9sZCBib3JkZXItdGVhbCBib3JkZXItYi0yIHBiLTIgbWQ6cGItNCAtbWItMiBtZDotbWItNCcgOiAnY3Vyc29yLXBvaW50ZXInLCAndGV4dC1jZW50ZXIgdy0xLzInXSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmFjdGl2YXRlVGhpc1RhYignYXV0aCcpfX19LFtfYygnaScse3N0YXRpY0NsYXNzOlwiZmFzIGZhLWxvY2stb3BlbiB0ZXh0LXhsIG1kOnRleHQtMnhsXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJibG9jayB0ZXh0LXhzIGZvbnQtcmVndWxhciBwdC0yXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5fZihcImxvY2FsaXplXCIpKCdSb2xlcyAmIFBlcm1pc3Npb25zJykpKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7Y2xhc3M6Wyhfdm0uYWN0aXZlID09PSAnYWN0aXZpdHknKSA/ICd0ZXh0LXRlYWwtZGFyayBmb250LXNlbWlib2xkIGJvcmRlci10ZWFsIGJvcmRlci1iLTIgcGItMiBtZDpwYi00IC1tYi0yIG1kOi1tYi00JyA6ICdjdXJzb3ItcG9pbnRlcicsICd0ZXh0LWNlbnRlciB3LTEvMiddLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uYWN0aXZhdGVUaGlzVGFiKCdhY3Rpdml0eScpfX19LFtfYygnaScse3N0YXRpY0NsYXNzOlwiZmFzIGZhLWJvbHQgdGV4dC14bCBtZDp0ZXh0LTJ4bFwifSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYmxvY2sgdGV4dC14cyBmb250LXJlZ3VsYXIgcHQtMlwifSxbX3ZtLl92KF92bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnQWN0aXZpdGllcycpKSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse2NsYXNzOlsoX3ZtLmFjdGl2ZSA9PT0gJ2Fib3V0JykgPyAndGV4dC10ZWFsLWRhcmsgZm9udC1zZW1pYm9sZCBib3JkZXItdGVhbCBib3JkZXItYi0yIHBiLTQgLW1iLTIgbWQ6LW1iLTQnIDogJ2N1cnNvci1wb2ludGVyJywgJ3RleHQtY2VudGVyIHctMS8yJ10sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5hY3RpdmF0ZVRoaXNUYWIoJ2Fib3V0Jyl9fX0sW19jKCdpJyx7c3RhdGljQ2xhc3M6XCJmYXMgZmEtaW5mby1jaXJjbGUgdGV4dC14bCBtZDp0ZXh0LTJ4bFwifSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiYmxvY2sgdGV4dC14cyBmb250LXJlZ3VsYXIgcHQtMlwifSxbX3ZtLl92KF92bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnQWJvdXQnKSkpXSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAganVzdGlmeS1zdGFydCBtdC00XCJ9LFtfYygndXNlcnNCb2FyZCcse2F0dHJzOntcInVzZXJzXCI6X3ZtLnVzZXJzLFwiYWN0aXZlVGFiXCI6X3ZtLmFjdGl2ZX19KSxfdm0uX3YoXCIgXCIpLF9jKCdhdXRoQm9hcmQnLHthdHRyczp7XCJ1c2Vyc1wiOl92bS51c2VycyxcImFjdGl2ZVRhYlwiOl92bS5hY3RpdmV9fSksX3ZtLl92KFwiIFwiKSxfYygnYWN0aXZpdHlCb2FyZCcse2F0dHJzOntcImFjdGl2ZVRhYlwiOl92bS5hY3RpdmV9fSksX3ZtLl92KFwiIFwiKSxfYygnYWJvdXRCb2FyZCcse2F0dHJzOntcImFjdGl2ZVRhYlwiOl92bS5hY3RpdmV9fSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMjI1ODUyNWNcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vaW5kZXgudnVlXG4vLyBtb2R1bGUgaWQgPSBqejNpXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2F1dGhCb2FyZC52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTdkMWIzZjRiXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXV0aEJvYXJkLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hZG1pbi9hdXRoQm9hcmQudnVlXG4vLyBtb2R1bGUgaWQgPSBrb21rXG4vLyBtb2R1bGUgY2h1bmtzID0gMyIsImltcG9ydCAnLi8uLi8uLi9ib290c3RyYXAnXG5pbXBvcnQgaW5kZXggZnJvbSAnLi8uLi8uLi9jb21wb25lbnRzL2FkbWluL2luZGV4LnZ1ZSdcbmltcG9ydCBuYXZiYXIgZnJvbSAnLi8uLi8uLi9jb21wb25lbnRzL3BhcnRpYWxzL25hdmJhci52dWUnXG5pbXBvcnQgbm90aWZpY2F0aW9uUG9wdXAgZnJvbSAnLi8uLi8uLi9jb21wb25lbnRzL3BhcnRpYWxzL25vdGlmaWNhdGlvblBvcHVwLnZ1ZSdcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xuICBlbDogJyNhcHAnLFxuICBjb21wb25lbnRzOiB7XG4gICAgaW5kZXgsIG5hdmJhciwgbm90aWZpY2F0aW9uUG9wdXBcbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvYWRtaW4vaW5kZXguanMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtYi00IHRleHQtY2VudGVyXCJ9LFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJuby11bmRlcmxpbmUgcC0yIG15LTQgbWItMCBiZy13aGl0ZSB0ZXh0LWJhc2UgdGV4dC10ZWFsIHJvdW5kZWQgc2hhZG93XCIsb246e1wiY2xpY2tcIjpfdm0ub3Blbk1vZGFsfX0sW192bS5fdihcIkludml0ZSBOZXcgTWVtYmVyXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7Y2xhc3M6eydoaWRkZW4nOiAhX3ZtLnNob3dJbnZpdGVNZW1iZXJGb3JtfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFic29sdXRlIHBpbiBvcGFjaXR5LTc1IGJnLWdyZXkgei0xMFwiLG9uOntcImNsaWNrXCI6X3ZtLmNsb3NlTW9kYWx9fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmaXhlZCBwaW4teCBtZDp3LTEvMyB6LTEwIGJnLWdyZXktbGlnaHRlciBteC0yIG1kOm14LWF1dG8gcC04IHJvdW5kZWRcIn0sW19jKCdwJyx7c3RhdGljQ2xhc3M6XCJweS0yXCJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLm5hbWUpLGV4cHJlc3Npb246XCJuYW1lXCJ9XSxzdGF0aWNDbGFzczpcInctZnVsbCBzaGFkb3cgYXBwZWFyYW5jZS1ub25lIGJvcmRlciByb3VuZGVkIHB5LTIgcHgtMyB0ZXh0LWdyZXktZGFya2VyXCIsYXR0cnM6e1widHlwZVwiOlwidGV4dFwiLFwicGxhY2Vob2xkZXJcIjpcIkpvaG4gRG9lXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5uYW1lKX0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLm5hbWU9JGV2ZW50LnRhcmdldC52YWx1ZX19fSldKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyx7c3RhdGljQ2xhc3M6XCJweS0yXCJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmVtYWlsKSxleHByZXNzaW9uOlwiZW1haWxcIn1dLHN0YXRpY0NsYXNzOlwidy1mdWxsIHNoYWRvdyBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgcHktMiBweC0zIHRleHQtZ3JleS1kYXJrZXJcIixhdHRyczp7XCJ0eXBlXCI6XCJ0ZXh0XCIsXCJwbGFjZWhvbGRlclwiOlwiam9obkBleGFtcGxlLmNvbVwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOihfdm0uZW1haWwpfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uZW1haWw9JGV2ZW50LnRhcmdldC52YWx1ZX19fSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXggZmxleC1yb3cganVzdGlmeS1iZXR3ZWVuIHB0LTggYmctZ3JleS1saWdodGVyIHJvdW5kZWRcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcInRleHQtcmVkLWxpZ2h0IGhvdmVyOmZvbnQtYm9sZFwiLG9uOntcImNsaWNrXCI6X3ZtLmNsb3NlTW9kYWx9fSxbX3ZtLl92KFwiQ2FuY2VsXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJiZy10ZWFsLWxpZ2h0IHRleHQtd2hpdGUgZm9udC1tZWRpdW0gaG92ZXI6YmctdGVhbC1kYXJrIHB5LTMgcHgtNCByb3VuZGVkXCIsb246e1wiY2xpY2tcIjpfdm0uc2VuZEludml0YXRpb259fSxbX3ZtLl92KFwiU2VuZCBJbnZpdGF0aW9uXCIpXSldKV0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi03NGU2ZmI2ZFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9pbnZpdGVNb2RhbC52dWVcbi8vIG1vZHVsZSBpZCA9IG0zMXlcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwiPHRlbXBsYXRlPlxuPGRpdj5cbiAgPGRpdiA6Y2xhc3M9XCJ7J2hpZGRlbic6ICFmb3JtU2hvd259XCIgY2xhc3M9XCJhYnNvbHV0ZSBjb250YWluZXIgbXgtYXV0byB3LTUvNiBtZDp3LTMvNSBsZzp3LTIvNSBiZy13aGl0ZSByb3VuZGVkIHNoYWRvdy1sZyB6LTEwXCIgc3R5bGU9XCJ0b3A6IDEydmg7bGVmdDogMDtyaWdodDogMDtcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwLTRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC00XCI+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJsb2NrIHVwcGVyY2FzZSB0cmFja2luZy13aWRlIHRleHQtZ3JleS1kYXJrZXIgdGV4dC14cyBmb250LWJvbGQgbWItMlwiIGZvcj1cImdyaWQtZmlyc3QtbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgTmFtZSA8c3BhbiBjbGFzcz1cInRleHQtZ3JleSBjYXBpdGFsaXplXCI+KHJlcXVpcmVkKTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJuYW1lXCIgY2xhc3M9XCJhcHBlYXJhbmNlLW5vbmUgYmxvY2sgdy1mdWxsIGJnLWdyZXktbGlnaHRlciB0ZXh0LWdyZXktZGFya2VyIGJvcmRlciBib3JkZXItZ3JleS1saWdodGVyIHJvdW5kZWQgcHktMyBweC00XCIgaWQ9XCJncmlkLWxhc3QtbmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJOZXcgUm9sZVwiIHJlcXVpcmVkPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXJvdyBqdXN0aWZ5LWJldHdlZW4gcHktNCBweC04IGJnLWdyZXktbGlnaHRlciByb3VuZGVkXCI+XG4gICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJjbG9zZUZvcm1cIiBjbGFzcz1cInRleHQtcmVkLWxpZ2h0ZXIgaG92ZXI6Zm9udC1ib2xkIGhvdmVyOnRleHQtcmVkLWxpZ2h0XCI+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJjcmVhdGVSb2xlXCIgY2xhc3M9XCJiZy10ZWFsLWxpZ2h0IHRleHQtd2hpdGUgZm9udC1tZWRpdW0gaG92ZXI6YmctdGVhbC1kYXJrIHB5LTQgcHgtOCByb3VuZGVkXCI+Q3JlYXRlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgQGNsaWNrPVwiY2xvc2VGb3JtXCIgOmNsYXNzPVwieydoaWRkZW4nOiAhZm9ybVNob3dufVwiIGNsYXNzPVwiaC1zY3JlZW4gdy1zY3JlZW4gZml4ZWQgcGluIGJnLWdyZXktZGFya2VzdCBvcGFjaXR5LTI1XCI+PC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiBbJ2Zvcm1TaG93biddLFxuICBkYXRhOiAoKSA9PiAoe1xuICAgIG5hbWU6ICcnXG4gIH0pLFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VGb3JtICgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJylcbiAgICB9LFxuICAgIGNyZWF0ZVJvbGUgKCkge1xuICAgICAgYXhpb3MucG9zdCgnL2FkbWluL3JvbGVzJywge25hbWU6IHRoaXMubmFtZX0pXG4gICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgIHRoaXMubmFtZSA9ICcnXG4gICAgICAgICAgICAgdGhpcy4kZW1pdCgncm9sZS1jcmVhdGVkJywgcmVzcG9uc2UuZGF0YS5yb2xlKVxuICAgICAgICAgICB9KVxuICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9mb3Jtcy9jcmVhdGVSb2xlRm9ybS52dWUiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZX1dXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XV0sXFxcImVudlxcXCI6e1xcXCJ0ZXN0XFxcIjp7XFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJ0YXJnZXRzXFxcIjp7XFxcIm5vZGVcXFwiOlxcXCJjdXJyZW50XFxcIn19XV19fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9uYXZiYXIudnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01MmFlZWFhOFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL25hdmJhci52dWVcIilcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvcGFydGlhbHMvbmF2YmFyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gcFFFK1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDciLCI8dGVtcGxhdGU+XG4gIDxuYXYgY2xhc3M9XCJiZy13aGl0ZSBmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBoLTEyIHBsLTQgbWQ6cHgtNCBzaGFkb3dcIj5cbiAgICA8YSBjbGFzcz1cInRleHQtdGVhbCB0ZXh0LTJ4bCBuby11bmRlcmxpbmUgc2VsZi1jZW50ZXJcIiA6aHJlZj1cInVybC5zaXRlXCI+XG4gICAgICAgIEdPT0RXT1JLXG4gICAgPC9hPlxuXG4gICAgPGRpdiBjbGFzcz1cIm1kOmZsZXhcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtcm93IGJvcmRlci1sIGgtZnVsbFwiPlxuICAgICAgICA8bm90aWZpY2F0aW9uLWRyb3Bkb3duPjwvbm90aWZpY2F0aW9uLWRyb3Bkb3duPlxuICAgICAgICA8cHJvZmlsZS1kcm9wZG93bj48L3Byb2ZpbGUtZHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9uYXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IG5vdGlmaWNhdGlvbkRyb3Bkb3duIGZyb20gXCIuL25vdGlmaWNhdGlvbkRyb3Bkb3duXCI7XG5pbXBvcnQgcHJvZmlsZURyb3Bkb3duIGZyb20gXCIuL3Byb2ZpbGVEcm9wZG93blwiO1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7bm90aWZpY2F0aW9uRHJvcGRvd24sIHByb2ZpbGVEcm9wZG93bn0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgdXNlcjogbmF2YmFyLnVzZXIsXG4gICAgdG9rZW46IExhcmF2ZWwuY3NyZlRva2VuLFxuICAgIHVybDogbmF2YmFyLm5hdlVybCxcbiAgfSlcbn1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9wYXJ0aWFscy9uYXZiYXIudnVlIiwiPHRlbXBsYXRlPlxuPGRpdiA6Y2xhc3M9XCJ7J2hpZGRlbic6IChhY3RpdmVDb2x1bW4gIT09ICdwZXJtaXNzaW9ucycpfVwiIGNsYXNzPVwiYmctd2hpdGUgcm91bmRlZC1iXCI+XG4gIDxhdHRhY2gtcGVybWlzc2lvbi1mb3JtIDpwZXJtaXNzaW9uSWQ9XCJwZXJtaXNzaW9uSWRcIiA6Zm9ybS1zaG93bj1cImF0dGFjaFBlcm1pc3Npb25Gb3JtU2hvd25cIiBAY2xvc2U9XCJjbG9zZUF0dGFjaFBlcm1pc3Npb25Gb3JtXCIgQHBlcm1pc3Npb24tYXR0YWNoZWQ9XCJwZXJtaXNzaW9uQXR0YWNoZWRUb1JvbGVcIj48L2F0dGFjaC1wZXJtaXNzaW9uLWZvcm0+XG5cbiAgPGRpdiBjbGFzcz1cIiBweC02IHB5LTggZmxleCBmbGV4LXJvdyBmbGV4LXdyYXAganVzdGlmeS1jZW50ZXIgdGV4dC1ncmV5LWRhcmtlclwiPlxuICAgIDxkaXYgdi1mb3I9XCJwZXJtaXNzaW9uIGluIHBlcm1pc3Npb25zXCIgY2xhc3M9XCJiZy13aGl0ZSBzaGFkb3cteGwgdy04MCBteS00IG1kOm0tNiByb3VuZGVkLWxnXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicC00IHRleHQteGwgdXBwZXJjYXNlIHRleHQtaW5kaWdvIGJnLWdyZXktbGlnaHRlciByb3VuZGVkLXQtbGdcIj5cbiAgICAgICAge3sgcGVybWlzc2lvbi5uYW1lIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJweC00IHBiLTIgYmctZ3JleS1saWdodGVyIHRleHQtc20gZmxleCBmbGV4LXJvd1wiPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICB7eyAnUm9sZXMnIHwgbG9jYWxpemUgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8ZGl2IEBjbGljaz1cInNob3dBdHRhY2hQZXJtaXNzaW9uRm9ybShwZXJtaXNzaW9uLmlkKVwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwibWwtMiBmYXMgZmEtcGx1cy1jaXJjbGUgdGV4dC1pbmRpZ28gY3Vyc29yLXBvaW50ZXJcIj48L2k+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtaWY9XCJwZXJtaXNzaW9uLnJvbGVzLmxlbmd0aCA+IDBcIiBjbGFzcz1cImZsZXggZmxleC1yb3cgZmxleC13cmFwIG0tMlwiPlxuICAgICAgICA8ZGl2IHYtZm9yPVwicm9sZSBpbiBwZXJtaXNzaW9uLnJvbGVzXCIgY2xhc3M9XCJweS0xIHB4LTIgbS0yIHJvdW5kZWQtZnVsbCBmb250LW1lZGl1bSBiZy1waW5rIHRleHQtd2hpdGUgdGV4dC1zbSBmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgIHt7IHJvbGUubmFtZSB9fSA8aSBjbGFzcz1cIm1sLTEgcGwtMSBmYXMgZmEtdHJhc2gtYWx0IGN1cnNvci1wb2ludGVyXCI+PC9pPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJweS0xIHB4LTIgbS0yIGZvbnQtbWVkaXVtIHRleHQtZ3JleS1kYXJrZXJcIj5cbiAgICAgICAge3sgJ0RvblxcJ3QgYmVsb25ncyB0byBhbnkgcm9sZSB5ZXQnIHwgbG9jYWxpemUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PiAgICAgIFxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBhdHRhY2hQZXJtaXNzaW9uRm9ybSBmcm9tICcuLy4uL2Zvcm1zL2F0dGFjaFBlcm1pc3Npb25Gb3JtJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7YXR0YWNoUGVybWlzc2lvbkZvcm19LFxuICBwcm9wczoge1xuICAgIGFjdGl2ZUNvbHVtbjoge1xuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9XG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgcGVybWlzc2lvbnM6IFtdLFxuICAgIGF0dGFjaFBlcm1pc3Npb25Gb3JtU2hvd246IGZhbHNlLFxuICAgIHBlcm1pc3Npb25JZDogbnVsbFxuICB9KSxcbiAgd2F0Y2g6IHtcbiAgICBhY3RpdmVDb2x1bW46ICdnZXRQZXJtaXNzaW9ucydcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFBlcm1pc3Npb25zICgpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZUNvbHVtbiA9PT0gJ3Blcm1pc3Npb25zJyAmJiB0aGlzLnBlcm1pc3Npb25zLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgYXhpb3MuZ2V0KCcvYWRtaW4vcGVybWlzc2lvbnMnKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucGVybWlzc2lvbnMgPSByZXNwb25zZS5kYXRhLnBlcm1pc3Npb25zXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93QXR0YWNoUGVybWlzc2lvbkZvcm0gKGlkKSB7XG4gICAgICB0aGlzLnBlcm1pc3Npb25JZCA9IGlkXG4gICAgICB0aGlzLmF0dGFjaFBlcm1pc3Npb25Gb3JtU2hvd24gPSB0cnVlXG4gICAgfSxcbiAgICBjbG9zZUF0dGFjaFBlcm1pc3Npb25Gb3JtICgpIHtcbiAgICAgIHRoaXMuYXR0YWNoUGVybWlzc2lvbkZvcm1TaG93biA9IGZhbHNlXG4gICAgfSxcbiAgICBwZXJtaXNzaW9uQXR0YWNoZWRUb1JvbGUgKHJvbGUpIHtcbiAgICAgIGlmICghIHRoaXMucGVybWlzc2lvbnMuZmlsdGVyKHBlcm1pc3Npb24gPT4gcGVybWlzc2lvbi5pZCA9PT0gdGhpcy5wZXJtaXNzaW9uSWQpWzBdLnJvbGVzLnNvbWUoaXRlbSA9PiBpdGVtLmlkID09PSByb2xlLmlkKSkge1xuICAgICAgICB0aGlzLnBlcm1pc3Npb25zLmZpbHRlcihwZXJtaXNzaW9uID0+IHBlcm1pc3Npb24uaWQgPT09IHRoaXMucGVybWlzc2lvbklkKVswXS5yb2xlcy5wdXNoKHJvbGUpXG4gICAgICB9XG4gICAgICB0aGlzLmF0dGFjaFBlcm1pc3Npb25Gb3JtU2hvd24gPSBmYWxzZVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2FkbWluL3Blcm1pc3Npb25zQm9hcmQudnVlIiwidmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV0sW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2V9XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dLFxcXCJlbnZcXFwiOntcXFwidGVzdFxcXCI6e1xcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwidGFyZ2V0c1xcXCI6e1xcXCJub2RlXFxcIjpcXFwiY3VycmVudFxcXCJ9fV1dfX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vY3JlYXRlUm9sZUZvcm0udnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1kYzZiNWQ5NlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2NyZWF0ZVJvbGVGb3JtLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9mb3Jtcy9jcmVhdGVSb2xlRm9ybS52dWVcbi8vIG1vZHVsZSBpZCA9IHVsUlBcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwidmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV0sW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2V9XV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV1dLFxcXCJlbnZcXFwiOntcXFwidGVzdFxcXCI6e1xcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwidGFyZ2V0c1xcXCI6e1xcXCJub2RlXFxcIjpcXFwiY3VycmVudFxcXCJ9fV1dfX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vYXNzaWduUGVybWlzc2lvbkZvcm0udnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi01MGZhYjI2YVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL2Fzc2lnblBlcm1pc3Npb25Gb3JtLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9mb3Jtcy9hc3NpZ25QZXJtaXNzaW9uRm9ybS52dWVcbi8vIG1vZHVsZSBpZCA9IHdsYUdcbi8vIG1vZHVsZSBjaHVua3MgPSAzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy1mdWxsIG1iLThcIixjbGFzczp7J2hpZGRlbic6IChfdm0uYWN0aXZlVGFiICE9ICdhYm91dCcpfX0sW19jKCdkaXYnLHtjbGFzczp7J2hpZGRlbic6ICFfdm0uc2hvd1VwZGF0ZU1vZGFsfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFic29sdXRlIHBpbiBvcGFjaXR5LTc1IGJnLWdyZXlcIixvbjp7XCJjbGlja1wiOl92bS5jbG9zZVVwZGF0ZU1vZGFsfX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZml4ZWQgcGluLXggdy0xLzMgei0xMCBiZy1ncmV5LWxpZ2h0ZXIgbXgtYXV0byBwLTggcm91bmRlZFwifSxbX2MoJ3AnLHtzdGF0aWNDbGFzczpcInB5LTJcIn0sW192bS5fdihcIlxcbiAgICAgICAgICAgIFwiK192bS5fcyhfdm0ubWVzc2FnZSkrXCJcXG4gICAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4IGZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBwdC04IGJnLWdyZXktbGlnaHRlciByb3VuZGVkXCJ9LFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXJlZC1saWdodGVyIGhvdmVyOmZvbnQtYm9sZCBob3Zlcjp0ZXh0LXJlZC1saWdodCBob3Zlcjpib3JkZXItcmVkLWxpZ2h0IGJvcmRlci1yZWQtbGlnaHRlciBib3JkZXIgcHgtNCBweS0zIHJvdW5kZWRcIixvbjp7XCJjbGlja1wiOl92bS5jbG9zZVVwZGF0ZU1vZGFsfX0sW192bS5fdihcIk9rXCIpXSldKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb250YWluZXIgbXgtNCBtZDpteC1hdXRvIHB5LTggYmctd2hpdGUgcm91bmRlZCBzaGFkb3cgdGV4dC1jZW50ZXIgdGV4dC1ncmV5LWRhcmtlclwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicGItNCB0ZXh0LTN4bFwifSxbX3ZtLl92KFwiXFxuICAgICAgR29vZHdvcmtcXG4gICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwLTJcIn0sW192bS5fdihcIlxcbiAgICAgIFZlcnNpb246IFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwicGwtMiB0ZXh0LXhsIHRleHQtZ3JleS1kYXJrZXN0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS52ZXJzaW9uKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcIm5vLXVuZGVybGluZSBwLTQgbS00IG1iLTAgYmctd2hpdGUgdGV4dC1iYXNlIHRleHQtdGVhbCByb3VuZGVkIGJvcmRlciBib3JkZXItZ3JleS1saWdodFwiLG9uOntcImNsaWNrXCI6X3ZtLmNoZWNrRm9yVXBkYXRlc319LFtfdm0uX3YoXCJcXG4gICAgICAgIFwiK192bS5fcyhfdm0uX2YoXCJsb2NhbGl6ZVwiKSgnQ2hlY2sgZm9yIFVwZGF0ZXMnKSkrXCJcXG4gICAgICAgIFwiKSwoX3ZtLmxvYWRpbmcpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImlubGluZVwifSxbX2MoJ2knLHtzdGF0aWNDbGFzczpcImZhcyBmYS1zcGlubmVyIGZhLXNwaW5cIn0pXSk6X3ZtLl9lKCldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicC0yXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0xhc3QgVXBkYXRlZCcpKStcIjogXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJwbC0yIHRleHQteGwgdGV4dC1ncmV5LWRhcmtlc3RcIn0sW192bS5fdihfdm0uX3MoX3ZtLmxhc3RVcGRhdGVkKSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicC0yXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ0F1dGhvcicpKStcIjogXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJwbC0yIHRleHQteGwgdGV4dC1ibHVlLWxpZ2h0IG5vLXVuZGVybGluZVwiLGF0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vaGFzbmF5ZWVuLmdpdGh1Yi5pby9cIn19LFtfdm0uX3YoXCJOZWhhbCBIYXNuYXllZW5cIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicC0yXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLl9mKFwibG9jYWxpemVcIikoJ1N1Ym1pdCBpc3N1ZSAmIGZlZWRiYWNrIGF0JykpK1wiOiBcIiksX2MoJ2EnLHtzdGF0aWNDbGFzczpcInBsLTIgdGV4dC14bCB0ZXh0LWJsdWUtbGlnaHQgbm8tdW5kZXJsaW5lXCIsYXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2lsdW1pbmFyL2dvb2R3b3JrL2lzc3Vlc1wifX0sW192bS5fdihcIkdvb2R3b3JrIElzc3Vlc1wiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwdC04XCJ9LFtfdm0uX3YoXCJcXG4gICAgICDCqSBcIitfdm0uX3MoKG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCkpK1wiIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwidGV4dC14bCB0ZXh0LWJsdWUtbGlnaHQgbm8tdW5kZXJsaW5lXCIsYXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2lsdW1pbmFyL1wifX0sW192bS5fdihcIklsdW1pbmFyXCIpXSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNWRjM2ExNDJcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYWRtaW4vYWJvdXRCb2FyZC52dWVcbi8vIG1vZHVsZSBpZCA9IHorUmZcbi8vIG1vZHVsZSBjaHVua3MgPSAzIl0sInNvdXJjZVJvb3QiOiIifQ==