webpackJsonp([5],{"4JSI":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n("WRGp");var s=n("LZ1W"),i=n.n(s),r=n("pQE+"),o=n.n(r),a=n("Wfqs"),c=n.n(a);new Vue({el:"#app",components:{home:i.a,navbar:o.a,notificationPopup:c.a}})},"6HJS":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"container mx-auto w-3/4 2xl:w-3/5 mt-8"},[n("div",{staticClass:"flex flex-row justify-around mb-8 pb-3 border-b-2 text-grey"},[n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"projects"===t.active,"cursor-pointer":"projects"!=t.active},on:{click:function(e){t.activeThisTab("projects")}}},[t._v("\n            Projects\n        ")]),t._v(" "),n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"teams"===t.active,"cursor-pointer":"teams"!=t.active},on:{click:function(e){t.activeThisTab("teams")}}},[t._v("\n            Teams\n        ")]),t._v(" "),n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"offices"===t.active,"cursor-pointer":"offices"!=t.active},on:{click:function(e){t.activeThisTab("offices")}}},[t._v("\n            Offices\n        ")])]),t._v(" "),n("projects",{attrs:{"active-tab":t.active}}),t._v(" "),n("teams",{attrs:{"active-tab":t.active}}),t._v(" "),n("offices",{attrs:{"active-tab":t.active}})],1)},staticRenderFns:[]}},"7EUu":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(t){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(t)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(t){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(t){if("keyup"===t.type&&"Escape"!==t.key)return!1;this.notificationShown=!1}}}},8:function(t,e,n){t.exports=n("4JSI")},"8tCw":function(t,e,n){var s=n("VU/8")(n("7EUu"),n("sCng"),!1,null,null,null);t.exports=s.exports},"A/6H":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:{hidden:"teams"!=t.activeTab}},[n("div",{class:{hidden:!t.showCreateTeamForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),t._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded",attrs:{id:"create-project-form"}},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:t.name},on:{input:function(e){e.target.composing||(t.name=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:t.description},on:{input:function(e){e.target.composing||(t.description=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:t.closeCreateTeamModal}},[t._v("Cancel")]),t._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:t.createNewTeam}},[t._v("Create")])])])]),t._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:t.openCreateTeamModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),t._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[t._v("Add a new team")])]),t._v(" "),t._l(t.teams,function(e){return n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center items-center text-center rounded m-4"},[t._m(0,!0),t._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.url}},[t._v(t._s(e.name))])]),t._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[t._v(t._s(e.description))]),t._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-around items-center px-2"},[t._l(e.members,function(e,s){return s<5?n("a",{attrs:{href:"/users/"+e.username}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-1",attrs:{src:t.generateUrl(e.avatar)}})]):t._e()}),t._v(" "),e.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[t._v(t._s(e.members.length-5)+"+")]):t._e(),t._v(" "),e.members.length<1?n("span",{staticClass:"text-grey-dark text-center"},[t._v("No members yet")]):t._e()],2)])})],2)])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-full h-8 pr-4 pt-2"},[e("i",{staticClass:"fa fa-ellipsis-h float-right text-grey-darker cursor-pointer"})])}]}},BDRz:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[e("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),e("div",{staticClass:"md:flex"},[e("div",{staticClass:"flex flex-row border-l h-full"},[e("notification-dropdown"),this._v(" "),e("profile-dropdown")],1)])])},staticRenderFns:[]}},CPX9:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("VlWA"),i=n.n(s),r=n("qc3Z"),o=n.n(r),a=n("SOQA"),c=n.n(a),l=n("wmlM"),u=n.n(l);e.default={components:{projects:i.a,teams:o.a,offices:c.a,activity:u.a},data:function(){return{active:"projects"}},methods:{activeThisTab:function(t){t!=this.active&&(this.active=t)}}}},JmKc:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){return{projects:data.projects.map(function(t){return t.url="projects/"+t.id,t}),showCreateProjectForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{openCreateProjectModal:function(){this.showCreateProjectForm=!0},closeCreateProjectModal:function(){this.showCreateProjectForm=!1},createProject:function(){var t=this;axios.post("/projects",{name:this.name,description:this.description}).then(function(e){"success"==e.data.status&&(EventBus.$emit("notification",e.data.message,e.data.status),e.data.project.url="projects/"+e.data.project.id,t.projects.push(e.data.project),t.closeCreateProjectModal())}).catch(function(t){console.log(t)})}}}},LZ1W:function(t,e,n){var s=n("VU/8")(n("CPX9"),n("6HJS"),!1,null,null,null);t.exports=s.exports},SOQA:function(t,e,n){var s=n("VU/8")(n("uRl7"),n("eVtc"),!1,null,null,null);t.exports=s.exports},"VU/8":function(t,e){t.exports=function(t,e,n,s,i,r){var o,a=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(o=t,a=t.default);var l,u="function"==typeof a?a.options:a;if(e&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),i&&(u._scopeId=i),r?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),s&&s.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(r)},u._ssrRegister=l):s&&(l=s),l){var f=u.functional,d=f?u.render:u.beforeCreate;f?(u._injectStyles=l,u.render=function(t,e){return l.call(e),d(t,e)}):u.beforeCreate=d?[].concat(d,l):[l]}return{esModule:o,exports:a,options:u}}},VlWA:function(t,e,n){var s=n("VU/8")(n("JmKc"),n("vf2P"),!1,null,null,null);t.exports=s.exports},WRGp:function(t,e,n){"use strict";var s=n("iuzX"),i=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(t){return t?(t=t.toString(),window.location.protocol+"//"+window.location.host+"/"+t):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.EventBus=new Vue},Wfqs:function(t,e,n){var s=n("VU/8")(n("aWzK"),n("ZU4r"),!1,null,null,null);t.exports=s.exports},XpHU:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center text-center rounded m-4"},[e("header",{staticClass:"w-full relative border-b h-12 pt-4"},[e("a",{staticClass:"text-grey-darker font-medium no-underline",attrs:{href:"/"+this.resourceType+"/"+this.resource.id+"/activities"}},[this._v("\n            Activities\n        ")]),this._v(" "),this._m(0)]),this._v(" "),this._m(1)])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"text-grey-darker absolute pin-r mr-2"},[e("i",{staticClass:"fa fa-ellipsis-h"})])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"w-full h-48 self-start text-left"},[n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),t._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[t._v("John")]),n("span",[t._v(" added a new task")])]),t._v(" "),n("p",{staticClass:"text-xs"},[t._v("15 min ago")])])]),t._v(" "),n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),t._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[t._v("John")]),n("span",[t._v(" commented in ")]),n("span",{staticClass:"text-pink"},[t._v("Review Meeting")])]),t._v(" "),n("p",{staticClass:"text-xs"},[t._v("20 min ago")])])]),t._v(" "),n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),t._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[t._v("James")]),n("span",[t._v(" archived a discussion")])]),t._v(" "),n("p",{staticClass:"text-xs"},[t._v("1 hr ago")])])])])}]}},Yl9i:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:["resource","resourceType"]}},ZU4r:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),e("div",{staticClass:"inline",on:{click:this.closeNotification}},[e("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},aWzK:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(t,e){var n=this;this.message=t,this.messageType=e,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},dBZW:function(t,e,n){var s=n("VU/8")(n("fDZG"),n("kz33"),!1,null,null,null);t.exports=s.exports},eVtc:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:{hidden:"offices"!=t.activeTab}},[n("div",{class:{hidden:!t.showCreateOfficeForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),t._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded",attrs:{id:"create-project-form"}},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:t.name},on:{input:function(e){e.target.composing||(t.name=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:t.description},on:{input:function(e){e.target.composing||(t.description=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:t.closeCreateOfficeModal}},[t._v("Cancel")]),t._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:t.createNewOffice}},[t._v("Create")])])])]),t._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:t.openCreateOfficeModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),t._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[t._v("Add a new office")])]),t._v(" "),t._l(t.offices,function(e){return n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center items-center text-center rounded m-4"},[t._m(0,!0),t._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.url}},[t._v(t._s(e.name))])]),t._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[t._v(t._s(e.description))]),t._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-around items-center px-2"},[t._l(e.members,function(e,s){return s<5?n("a",{attrs:{href:"/users/"+e.username}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-1",attrs:{src:t.generateUrl(e.avatar)}})]):t._e()}),t._v(" "),e.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[t._v(t._s(e.members.length-5)+"+")]):t._e(),t._v(" "),0==e.members.length?n("span",{staticClass:"text-grey-dark text-center"},[t._v("No members yet")]):t._e()],2)])})],2)])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-full h-8 pr-4 pt-2"},[e("i",{staticClass:"fa fa-ellipsis-h float-right text-grey-darker cursor-pointer"})])}]}},fDZG:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(t){t.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(t){this.profileDropdownShown?(this.hideProfileDropdown(t),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(t){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(t){if("keyup"===t.type&&"Escape"!==t.key)return!1;this.profileDropdownShown=!1}}}},iuzX:function(t,e){!function(){function t(t){this.value=t}function e(e){var n,s;function i(n,s){try{var o=e[n](s),a=o.value;a instanceof t?Promise.resolve(a.value).then(function(t){i("next",t)},function(t){i("throw",t)}):r(o.done?"return":"normal",o.value)}catch(t){r("throw",t)}}function r(t,e){switch(t){case"return":n.resolve({value:e,done:!0});break;case"throw":n.reject(e);break;default:n.resolve({value:e,done:!1})}(n=n.next)?i(n.key,n.arg):s=null}this._invoke=function(t,e){return new Promise(function(r,o){var a={key:t,arg:e,resolve:r,reject:o,next:null};s?s=s.next=a:(n=s=a,i(t,e))})},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}();var n=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s=function(){function t(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,n,s){return n&&t(e.prototype,n),s&&t(e,s),e}}(),i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},r=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},a=function(){function t(e){n(this,t),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(e),this.connect()}return s(t,[{key:"setOptions",value:function(t){return this.options=i(this._defaultOptions,t),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),t}},{key:"csrfToken",value:function(){var t=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(t=document.querySelector('meta[name="csrf-token"]'))?t.getAttribute("content"):null}}]),t}(),c=function(){function t(){n(this,t)}return s(t,[{key:"notification",value:function(t){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",t)}},{key:"listenForWhisper",value:function(t,e){return this.listen(".client-"+t,e)}}]),t}(),l=function(){function t(e){n(this,t),this.setNamespace(e)}return s(t,[{key:"format",value:function(t){return"."===t.charAt(0)||"\\"===t.charAt(0)?t.substr(1):(this.namespace&&(t=this.namespace+"."+t),t.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(t){this.namespace=t}}]),t}(),u=function(t){function e(t,s,i){n(this,e);var r=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.name=s,r.pusher=t,r.options=i,r.eventFormatter=new l(r.options.namespace),r.subscribe(),r}return r(e,c),s(e,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"stopListening",value:function(t){return this.subscription.unbind(this.eventFormatter.format(t)),this}},{key:"on",value:function(t,e){return this.subscription.bind(t,e),this}}]),e}(),f=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,u),s(e,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,u),s(e,[{key:"here",value:function(t){return this.on("pusher:subscription_succeeded",function(e){t(Object.keys(e.members).map(function(t){return e.members[t]}))}),this}},{key:"joining",value:function(t){return this.on("pusher:member_added",function(e){t(e.info)}),this}},{key:"leaving",value:function(t){return this.on("pusher:member_removed",function(e){t(e.info)}),this}},{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),h=function(t){function e(t,s,i){n(this,e);var r=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return r.events={},r.name=s,r.socket=t,r.options=i,r.eventFormatter=new l(r.options.namespace),r.subscribe(),r.configureReconnector(),r}return r(e,c),s(e,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"on",value:function(t,e){var n=this,s=function(t,s){n.name==t&&e(s)};this.socket.on(t,s),this.bind(t,s)}},{key:"configureReconnector",value:function(){var t=this,e=function(){t.subscribe()};this.socket.on("reconnect",e),this.bind("reconnect",e)}},{key:"bind",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"unbind",value:function(){var t=this;Object.keys(this.events).forEach(function(e){t.events[e].forEach(function(n){t.socket.removeListener(e,n)}),delete t.events[e]})}}]),e}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,h),s(e,[{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-"+t,data:e}),this}}]),e}(),v=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return r(e,p),s(e,[{key:"here",value:function(t){return this.on("presence:subscribed",function(e){t(e.map(function(t){return t.user_info}))}),this}},{key:"joining",value:function(t){return this.on("presence:joining",function(e){return t(e.user_info)}),this}},{key:"leaving",value:function(t){return this.on("presence:leaving",function(e){return t(e.user_info)}),this}}]),e}(),m=function(t){function e(){var t;n(this,e);for(var s=arguments.length,i=Array(s),r=0;r<s;r++)i[r]=arguments[r];var a=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return a.channels={},a}return r(e,a),s(e,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new u(this.pusher,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new f(this.pusher,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new d(this.pusher,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t,n){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),e}(),_=function(t){function e(){var t;n(this,e);for(var s=arguments.length,i=Array(s),r=0;r<s;r++)i[r]=arguments[r];var a=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return a.channels={},a}return r(e,a),s(e,[{key:"connect",value:function(){var t=this.getSocketIO();return this.socket=t(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new h(this.socket,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new p(this.socket,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new v(this.socket,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),e}(),x=function(){function t(e){n(this,t),this.options=e,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new _(this.options))}return s(t,[{key:"registerVueRequestInterceptor",value:function(){var t=this;Vue.http.interceptors.push(function(e,n){t.socketId()&&e.headers.set("X-Socket-ID",t.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var t=this;axios.interceptors.request.use(function(e){return t.socketId()&&(e.headers["X-Socket-Id"]=t.socketId()),e})}},{key:"registerjQueryAjaxSetup",value:function(){var t=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(e){t.socketId()&&e.setRequestHeader("X-Socket-Id",t.socketId())}})}},{key:"listen",value:function(t,e,n){return this.connector.listen(t,e,n)}},{key:"channel",value:function(t){return this.connector.channel(t)}},{key:"private",value:function(t){return this.connector.privateChannel(t)}},{key:"join",value:function(t){return this.connector.presenceChannel(t)}},{key:"leave",value:function(t){this.connector.leave(t)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),t}();t.exports=x},kz33:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:t.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[t._v("\n      "+t._s(t.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),t._v(" "),t.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:t.profileUrl}},[t._m(0),t._v("\n          Your profile\n    ")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("span",{staticClass:"block border-t"}),t._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:t.url.logout},on:{click:t.logoutUser}},[t._m(3),t._v("\n      Logout\n    ")])]):t._e(),t._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:t.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:t.token}})])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fa fa-user"})])},function(){var t=this.$createElement,e=this._self._c||t;return e("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})]),this._v("\n      Admin\n    ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fa fa-cog font-regular"})]),this._v("\n      Settings\n    ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},"pQE+":function(t,e,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);t.exports=s.exports},qc3Z:function(t,e,n){var s=n("VU/8")(n("vMhf"),n("A/6H"),!1,null,null,null);t.exports=s.exports},qjuG:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("8tCw"),i=n.n(s),r=n("dBZW"),o=n.n(r);e.default={components:{notificationDropdown:i.a,profileDropdown:o.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},sCng:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:t.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),t._v(" "),t.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):t._e()]),t._v(" "),t.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-6 mr-8 py-4 shadow-lg rounded",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),t._m(0)]),t._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),t._m(1)]),t._v(" "),n("span",{staticClass:"block border-t"}),t._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[t._v("\n            View All\n        ")])]):t._e()])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),e("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),e("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},uRl7:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){return{offices:data.offices.map(function(t){return t.url="offices/"+t.id,t}),showCreateOfficeForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{createNewOffice:function(){},closeCreateOfficeModal:function(){this.showCreateOfficeForm=!1},openCreateOfficeModal:function(){this.showCreateOfficeForm=!0}}}},vMhf:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){return{teams:data.teams.map(function(t){return t.url="teams/"+t.id,t}),showCreateTeamForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{openCreateTeamModal:function(){this.showCreateTeamForm=!0},closeCreateTeamModal:function(){this.showCreateTeamForm=!1},createNewTeam:function(){var t=this;axios.post("/teams",{name:this.name,description:this.description}).then(function(e){"success"==e.data.status&&(EventBus.$emit("notification",e.data.message,e.data.status),e.data.project.url="projects/"+e.data.project.id,t.teams.push(e.data.team),t.showCreateTeamForm=!1)}).catch(function(e){console.log(e),t.showCreateTeamForm=!1})}}}},vf2P:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:{hidden:"projects"!=t.activeTab}},[n("div",{class:{hidden:!t.showCreateProjectForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),t._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:t.name},on:{input:function(e){e.target.composing||(t.name=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:t.description},on:{input:function(e){e.target.composing||(t.description=e.target.value)}}}),t._v(" "),n("span",{staticClass:"hidden"})]),t._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:t.closeCreateProjectModal}},[t._v("Cancel")]),t._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:t.createProject}},[t._v("Create")])])])]),t._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:t.openCreateProjectModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),t._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[t._v("Add a new project")])]),t._v(" "),t._l(t.projects,function(e){return n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4"},[t._m(0,!0),t._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.url}},[t._v(t._s(e.name))])]),t._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[t._v(t._s(e.description))]),t._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-around items-center px-2"},[t._l(e.members,function(e,s){return s<5?n("a",{attrs:{href:"/users/"+e.username}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-1",attrs:{src:t.generateUrl(e.avatar)}})]):t._e()}),t._v(" "),e.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[t._v(t._s(e.members.length-5)+"+")]):t._e(),t._v(" "),0==e.members.length?n("span",{staticClass:"text-grey-dark text-center"},[t._v("No members yet")]):t._e()],2)])})],2)])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-full h-8 pr-4 pt-2"},[e("i",{staticClass:"fas fa-ellipsis-h float-right text-grey-darker cursor-pointer"})])}]}},wmlM:function(t,e,n){var s=n("VU/8")(n("Yl9i"),n("XpHU"),!1,null,null,null);t.exports=s.exports}},[8]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,