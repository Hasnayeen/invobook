webpackJsonp([4],{"1tk+":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"relative bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center items-center text-center rounded m-4"},[n("span",{staticClass:"w-full h-8 pr-4 pt-2",on:{click:e.toggleMenu}},[n("i",{staticClass:"fa fa-ellipsis-h float-right text-grey-darker cursor-pointer"})]),e._v(" "),e.dropdownMenuShown?n("div",{staticClass:"absolute rounded shadow-lg pin-r pin-t mt-8 mr-2 p-3 text-grey-darker hover:bg-grey-light"},[n("div",{staticClass:"cursor-pointer",on:{click:function(t){e.deleteOffice(e.office)}}},[e._v("\n\t\t\tDelete\n\t\t")])]):e._e(),e._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.office.url}},[e._v(e._s(e.office.name))])]),e._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[e._v(e._s(e.office.description))]),e._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-around items-center px-2"},[e._l(e.office.members,function(t,s){return s<5?n("a",{key:s,staticClass:"px-1",attrs:{href:"/users/"+t.username}},[n("img",{staticClass:"rounded-full w-8 h-8",attrs:{src:e.generateUrl(t.avatar)}})]):e._e()}),e._v(" "),e.office.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[e._v(e._s(e.office.members.length-5)+"+")]):e._e(),e._v(" "),0==e.office.members.length?n("span",{staticClass:"text-grey-dark text-center"},[e._v("No members yet")]):e._e()],2)])},staticRenderFns:[]}},"3nKw":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container mx-auto w-3/4 2xl:w-3/5 mt-8"},[n("div",{staticClass:"flex flex-row justify-around mb-8 pb-3 border-b-2 text-grey"},[n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"projects"===e.active,"cursor-pointer":"projects"!=e.active},on:{click:function(t){e.activeThisTab("projects")}}},[e._v("\n            "+e._s(e._f("localize")("Projects"))+"\n        ")]),e._v(" "),n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"teams"===e.active,"cursor-pointer":"teams"!=e.active},on:{click:function(t){e.activeThisTab("teams")}}},[e._v("\n            "+e._s(e._f("localize")("Teams"))+"\n        ")]),e._v(" "),n("span",{class:{"text-grey-darker font-semibold border-teal border-b-4 pb-3 -mb-4":"offices"===e.active,"cursor-pointer":"offices"!=e.active},on:{click:function(t){e.activeThisTab("offices")}}},[e._v("\n            "+e._s(e._f("localize")("Offices"))+"\n        ")])]),e._v(" "),n("projects",{attrs:{"active-tab":e.active}}),e._v(" "),n("teams",{attrs:{"active-tab":e.active}}),e._v(" "),n("offices",{attrs:{"active-tab":e.active}})],1)},staticRenderFns:[]}},"4JSI":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("WRGp");var s=n("LZ1W"),i=n.n(s),r=n("pQE+"),o=n.n(r),a=n("Wfqs"),c=n.n(a);new Vue({el:"#app",components:{home:i.a,navbar:o.a,notificationPopup:c.a}})},"7EUu":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(e){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(e)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(e){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.notificationShown=!1}}}},8:function(e,t,n){e.exports=n("4JSI")},"8Fer":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{class:{hidden:"offices"!=e.activeTab}},[n("div",{class:{hidden:!e.showCreateOfficeForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),e._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded",attrs:{id:"create-project-form"}},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:e.description},on:{input:function(t){t.target.composing||(e.description=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeCreateOfficeModal}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:e.createNewOffice}},[e._v("Create")])])])]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:e.openCreateOfficeModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),e._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[e._v(e._s(e._f("localize")("Add a new office")))])]),e._v(" "),e._l(e.offices,function(t,s){return n("office",{key:s,attrs:{details:t},on:{deleted:function(t){e.deleteOffice(s)}}})})],2)])},staticRenderFns:[]}},"8tCw":function(e,t,n){var s=n("VU/8")(n("7EUu"),n("fN9P"),!1,null,null,null);e.exports=s.exports},BDRz:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[t("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),t("div",{staticClass:"md:flex"},[t("div",{staticClass:"flex flex-row border-l h-full"},[t("notification-dropdown"),this._v(" "),t("profile-dropdown")],1)])])},staticRenderFns:[]}},CPX9:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("VlWA"),i=n.n(s),r=n("qc3Z"),o=n.n(r),a=n("SOQA"),c=n.n(a),l=n("wmlM"),u=n.n(l);t.default={components:{projects:i.a,teams:o.a,offices:c.a,activity:u.a},data:function(){return{active:"projects"}},methods:{activeThisTab:function(e){e!=this.active&&(this.active=e)}}}},EoC5:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["details"],data:function(){return{office:this.details,dropdownMenuShown:!1}},methods:{toggleMenu:function(){this.dropdownMenuShown=!this.dropdownMenuShown},deleteOffice:function(e){var t=this;axios.delete("/offices/"+e.id).then(function(e){t.$emit("deleted"),t.dropdownMenuShown=!1,EventBus.$emit("notification",e.data.message,e.data.status)}).catch(function(e){t.dropdownMenuShown=!1,EventBus.$emit("notification",e.response.data.message,e.response.data.status)})}}}},FByL:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg z-50",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),t("div",{staticClass:"inline",on:{click:this.closeNotification}},[t("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},GExr:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:e.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[e._v("\n      "+e._s(e.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),e._v(" "),e.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded z-50",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:e.profileUrl}},[e._m(0),e._v("\n      "+e._s(e._f("localize")("Your Profile"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[e._m(1),e._v("\n      "+e._s(e._f("localize")("Admin"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[e._m(2),e._v("\n      "+e._s(e._f("localize")("Settings"))+"\n    ")]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:e.url.logout},on:{click:e.logoutUser}},[e._m(3),e._v("\n      "+e._s(e._f("localize")("Logout"))+"\n    ")])]):e._e(),e._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:e.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}})])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-user"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-cog font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},J08h:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{class:{hidden:"teams"!=e.activeTab}},[n("div",{class:{hidden:!e.showCreateTeamForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),e._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded",attrs:{id:"create-project-form"}},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:e.description},on:{input:function(t){t.target.composing||(e.description=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeCreateTeamModal}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:e.createNewTeam}},[e._v("Create")])])])]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:e.openCreateTeamModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),e._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[e._v(e._s(e._f("localize")("Add a new team")))])]),e._v(" "),e._l(e.teams,function(t,s){return n("team",{key:s,attrs:{details:t},on:{deleted:function(t){e.deleteTeam(s)}}})})],2)])},staticRenderFns:[]}},JmKc:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("MRFT"),i=n.n(s);t.default={components:{project:i.a},data:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){return{projects:data.projects.map(function(e){return e.url="projects/"+e.id,e}),showCreateProjectForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{openCreateProjectModal:function(){this.showCreateProjectForm=!0},closeCreateProjectModal:function(){this.showCreateProjectForm=!1},createProject:function(){var e=this;axios.post("/projects",{name:this.name,description:this.description}).then(function(t){"success"==t.data.status&&(EventBus.$emit("notification",t.data.message,t.data.status),t.data.project.url="projects/"+t.data.project.id,e.projects.push(t.data.project),e.closeCreateProjectModal())}).catch(function(e){EventBus.$emit("notification",e.response.data.message,e.response.data.status)})},deleteProject:function(e){this.projects.splice(e,1)}}}},KPti:function(e,t,n){var s=n("VU/8")(n("weJB"),n("cb7N"),!1,null,null,null);e.exports=s.exports},LZ1W:function(e,t,n){var s=n("VU/8")(n("CPX9"),n("3nKw"),!1,null,null,null);e.exports=s.exports},MRFT:function(e,t,n){var s=n("VU/8")(n("eHFB"),n("c5YF"),!1,null,null,null);e.exports=s.exports},SOQA:function(e,t,n){var s=n("VU/8")(n("uRl7"),n("8Fer"),!1,null,null,null);e.exports=s.exports},"VU/8":function(e,t){e.exports=function(e,t,n,s,i,r){var o,a=e=e||{},c=typeof e.default;"object"!==c&&"function"!==c||(o=e,a=e.default);var l,u="function"==typeof a?a.options:a;if(t&&(u.render=t.render,u.staticRenderFns=t.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),i&&(u._scopeId=i),r?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},u._ssrRegister=l):s&&(l=s),l){var f=u.functional,d=f?u.render:u.beforeCreate;f?(u._injectStyles=l,u.render=function(e,t){return l.call(t),d(e,t)}):u.beforeCreate=d?[].concat(d,l):[l]}return{esModule:o,exports:a,options:u}}},VlWA:function(e,t,n){var s=n("VU/8")(n("JmKc"),n("hY86"),!1,null,null,null);e.exports=s.exports},WRGp:function(e,t,n){"use strict";var s=n("iuzX"),i=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(e){return e?(e=e.toString(),window.location.protocol+"//"+window.location.host+"/"+e):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(e){return e?(e=e.toString(),window.lang[e]?window.lang[e]:e):""}),window.EventBus=new Vue},Wfqs:function(e,t,n){var s=n("VU/8")(n("aWzK"),n("FByL"),!1,null,null,null);e.exports=s.exports},XpHU:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center text-center rounded m-4"},[t("header",{staticClass:"w-full relative border-b h-12 pt-4"},[t("a",{staticClass:"text-grey-darker font-medium no-underline",attrs:{href:"/"+this.resourceType+"/"+this.resource.id+"/activities"}},[this._v("\n            Activities\n        ")]),this._v(" "),this._m(0)]),this._v(" "),this._m(1)])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"text-grey-darker absolute pin-r mr-2"},[t("i",{staticClass:"fa fa-ellipsis-h"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full h-48 self-start text-left"},[n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),e._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[e._v("John")]),n("span",[e._v(" added a new task")])]),e._v(" "),n("p",{staticClass:"text-xs"},[e._v("15 min ago")])])]),e._v(" "),n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),e._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[e._v("John")]),n("span",[e._v(" commented in ")]),n("span",{staticClass:"text-pink"},[e._v("Review Meeting")])]),e._v(" "),n("p",{staticClass:"text-xs"},[e._v("20 min ago")])])]),e._v(" "),n("a",{staticClass:"flex flex-row p-4 no-underline text-grey-darker",attrs:{href:"#"}},[n("img",{staticClass:"rounded-full w-8 h-8 mr-2",attrs:{src:"http://placehold.it/34x34"}}),e._v(" "),n("div",{staticClass:"text-sm"},[n("p",[n("span",{staticClass:"text-pink"},[e._v("James")]),n("span",[e._v(" archived a discussion")])]),e._v(" "),n("p",{staticClass:"text-xs"},[e._v("1 hr ago")])])])])}]}},Yl9i:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["resource","resourceType"]}},aWzK:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(e,t){var n=this;this.message=e,this.messageType=t,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},c5YF:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"relative bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4"},[n("span",{staticClass:"w-full h-8 pr-4 pt-2",on:{click:e.toggleMenu}},[n("i",{staticClass:"fas fa-ellipsis-h float-right text-grey-darker cursor-pointer"})]),e._v(" "),e.dropdownMenuShown?n("div",{staticClass:"absolute rounded shadow-lg pin-r pin-t mt-8 mr-2 p-3 text-grey-darker hover:bg-grey-light"},[n("div",{staticClass:"cursor-pointer",on:{click:function(t){e.deleteProject(e.project)}}},[e._v("\n            Delete\n        ")])]):e._e(),e._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.project.url}},[e._v(e._s(e.project.name))])]),e._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[e._v(e._s(e.project.description))]),e._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-start items-center px-4"},[e._l(e.project.members,function(t,s){return s<5?n("a",{key:s,staticClass:"px-1",attrs:{href:"/users/"+t.username}},[n("img",{staticClass:"rounded-full w-8 h-8",attrs:{src:e.generateUrl(t.avatar)}})]):e._e()}),e._v(" "),e.project.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[e._v(e._s(e.project.members.length-5)+"+")]):e._e(),e._v(" "),0==e.project.members.length?n("span",{staticClass:"text-grey-dark text-center"},[e._v("No members yet")]):e._e()],2)])},staticRenderFns:[]}},cb7N:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"relative bg-white shadow-md w-64 h-64 flex flex-row flex-wrap justify-center items-center text-center rounded m-4"},[n("span",{staticClass:"w-full h-8 pr-4 pt-2",on:{click:e.toggleMenu}},[n("i",{staticClass:"fa fa-ellipsis-h float-right text-grey-darker cursor-pointer"})]),e._v(" "),e.dropdownMenuShown?n("div",{staticClass:"absolute rounded shadow-lg pin-r pin-t mt-8 mr-2 p-3 text-grey-darker hover:bg-grey-light"},[n("div",{staticClass:"cursor-pointer",on:{click:function(t){e.deleteTeam(e.team)}}},[e._v("\n            Delete\n        ")])]):e._e(),e._v(" "),n("div",{staticClass:"w-full p-2 h-24 flex flex-col justify-end"},[n("a",{staticClass:"text-pink text-xl no-underline",attrs:{href:e.team.url}},[e._v(e._s(e.team.name))])]),e._v(" "),n("span",{staticClass:"text-grey text-sm w-full px-2 h-16 self-start"},[e._v(e._s(e.team.description))]),e._v(" "),n("div",{staticClass:"border-t w-full h-16 flex flex-row justify-around items-center px-2"},[e._l(e.team.members,function(t,s){return s<5?n("a",{key:s,staticClass:"px-1",attrs:{href:"/users/"+t.username}},[n("img",{staticClass:"rounded-full w-8 h-8",attrs:{src:e.generateUrl(t.avatar)}})]):e._e()}),e._v(" "),e.team.members.length>5?n("span",{staticClass:"bg-grey-lighter border-teal border p-2 rounded-full"},[e._v(e._s(e.team.members.length-5)+"+")]):e._e(),e._v(" "),e.team.members.length<1?n("span",{staticClass:"text-grey-dark text-center"},[e._v("No members yet")]):e._e()],2)])},staticRenderFns:[]}},dBZW:function(e,t,n){var s=n("VU/8")(n("fDZG"),n("GExr"),!1,null,null,null);e.exports=s.exports},eHFB:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["details"],data:function(){return{project:this.details,dropdownMenuShown:!1}},methods:{toggleMenu:function(){this.dropdownMenuShown=!this.dropdownMenuShown},deleteProject:function(e){var t=this;axios.delete("/projects/"+e.id).then(function(e){t.$emit("deleted"),t.dropdownMenuShown=!1,EventBus.$emit("notification",e.data.message,e.data.status)}).catch(function(e){t.dropdownMenuShown=!1,EventBus.$emit("notification",e.response.data.message,e.response.data.status)})}}}},fDZG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(e){e.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(e){this.profileDropdownShown?(this.hideProfileDropdown(e),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(e){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.profileDropdownShown=!1}}}},fN9P:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:e.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),e._v(" "),e.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):e._e()]),e._v(" "),e.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-5 mr-8 py-4 shadow-lg rounded z-50",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(0)]),e._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(1)]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[e._v("\n            View All\n        ")])]):e._e()])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},hY86:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{class:{hidden:"projects"!=e.activeTab}},[n("div",{class:{hidden:!e.showCreateProjectForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey"}),e._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Name"},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.description,expression:"description"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"Description"},domProps:{value:e.description},on:{input:function(t){t.target.composing||(e.description=t.target.value)}}}),e._v(" "),n("span",{staticClass:"hidden"})]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeCreateProjectModal}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:e.createProject}},[e._v("Create")])])])]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-center"},[n("div",{staticClass:"bg-white shadow-md w-64 h-64 flex flex-col justify-center items-center text-center rounded m-4 cursor-pointer",on:{click:e.openCreateProjectModal}},[n("i",{staticClass:"fa fa-plus text-grey-dark text-4xl"}),e._v(" "),n("span",{staticClass:"text-grey-darker pt-4"},[e._v(e._s(e._f("localize")("Add a new project")))])]),e._v(" "),e._l(e.projects,function(t,s){return n("project",{key:s,attrs:{details:t},on:{deleted:function(t){e.deleteProject(s)}}})})],2)])},staticRenderFns:[]}},iuzX:function(e,t){!function(){function e(e){this.value=e}function t(t){var n,s;function i(n,s){try{var o=t[n](s),a=o.value;a instanceof e?Promise.resolve(a.value).then(function(e){i("next",e)},function(e){i("throw",e)}):r(o.done?"return":"normal",o.value)}catch(e){r("throw",e)}}function r(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):s=null}this._invoke=function(e,t){return new Promise(function(r,o){var a={key:e,arg:t,resolve:r,reject:o,next:null};s?s=s.next=a:(n=s=a,i(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();var n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},r=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},a=function(){function e(t){n(this,e),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(t),this.connect()}return s(e,[{key:"setOptions",value:function(e){return this.options=i(this._defaultOptions,e),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),e}},{key:"csrfToken",value:function(){var e=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(e=document.querySelector('meta[name="csrf-token"]'))?e.getAttribute("content"):null}}]),e}(),c=function(){function e(){n(this,e)}return s(e,[{key:"notification",value:function(e){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",e)}},{key:"listenForWhisper",value:function(e,t){return this.listen(".client-"+e,t)}}]),e}(),l=function(){function e(t){n(this,e),this.setNamespace(t)}return s(e,[{key:"format",value:function(e){return"."===e.charAt(0)||"\\"===e.charAt(0)?e.substr(1):(this.namespace&&(e=this.namespace+"."+e),e.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(e){this.namespace=e}}]),e}(),u=function(e){function t(e,s,i){n(this,t);var r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.name=s,r.pusher=e,r.options=i,r.eventFormatter=new l(r.options.namespace),r.subscribe(),r}return r(t,c),s(t,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"stopListening",value:function(e){return this.subscription.unbind(this.eventFormatter.format(e)),this}},{key:"on",value:function(e,t){return this.subscription.bind(e,t),this}}]),t}(),f=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,u),s(t,[{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),d=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,u),s(t,[{key:"here",value:function(e){return this.on("pusher:subscription_succeeded",function(t){e(Object.keys(t.members).map(function(e){return t.members[e]}))}),this}},{key:"joining",value:function(e){return this.on("pusher:member_added",function(t){e(t.info)}),this}},{key:"leaving",value:function(e){return this.on("pusher:member_removed",function(t){e(t.info)}),this}},{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),p=function(e){function t(e,s,i){n(this,t);var r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.events={},r.name=s,r.socket=e,r.options=i,r.eventFormatter=new l(r.options.namespace),r.subscribe(),r.configureReconnector(),r}return r(t,c),s(t,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"on",value:function(e,t){var n=this,s=function(e,s){n.name==e&&t(s)};this.socket.on(e,s),this.bind(e,s)}},{key:"configureReconnector",value:function(){var e=this,t=function(){e.subscribe()};this.socket.on("reconnect",t),this.bind("reconnect",t)}},{key:"bind",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"unbind",value:function(){var e=this;Object.keys(this.events).forEach(function(t){e.events[t].forEach(function(n){e.socket.removeListener(t,n)}),delete e.events[t]})}}]),t}(),h=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,p),s(t,[{key:"whisper",value:function(e,t){return this.socket.emit("client event",{channel:this.name,event:"client-"+e,data:t}),this}}]),t}(),v=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return r(t,h),s(t,[{key:"here",value:function(e){return this.on("presence:subscribed",function(t){e(t.map(function(e){return e.user_info}))}),this}},{key:"joining",value:function(e){return this.on("presence:joining",function(t){return e(t.user_info)}),this}},{key:"leaving",value:function(e){return this.on("presence:leaving",function(t){return e(t.user_info)}),this}}]),t}(),m=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),r=0;r<s;r++)i[r]=arguments[r];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return r(t,a),s(t,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new u(this.pusher,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new f(this.pusher,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new d(this.pusher,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e,n){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),t}(),_=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),r=0;r<s;r++)i[r]=arguments[r];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return r(t,a),s(t,[{key:"connect",value:function(){var e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new p(this.socket,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new h(this.socket,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new v(this.socket,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),t}(),w=function(){function e(t){n(this,e),this.options=t,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new _(this.options))}return s(e,[{key:"registerVueRequestInterceptor",value:function(){var e=this;Vue.http.interceptors.push(function(t,n){e.socketId()&&t.headers.set("X-Socket-ID",e.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var e=this;axios.interceptors.request.use(function(t){return e.socketId()&&(t.headers["X-Socket-Id"]=e.socketId()),t})}},{key:"registerjQueryAjaxSetup",value:function(){var e=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(t){e.socketId()&&t.setRequestHeader("X-Socket-Id",e.socketId())}})}},{key:"listen",value:function(e,t,n){return this.connector.listen(e,t,n)}},{key:"channel",value:function(e){return this.connector.channel(e)}},{key:"private",value:function(e){return this.connector.privateChannel(e)}},{key:"join",value:function(e){return this.connector.presenceChannel(e)}},{key:"leave",value:function(e){this.connector.leave(e)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),e}();e.exports=w},liym:function(e,t,n){var s=n("VU/8")(n("EoC5"),n("1tk+"),!1,null,null,null);e.exports=s.exports},"pQE+":function(e,t,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);e.exports=s.exports},qc3Z:function(e,t,n){var s=n("VU/8")(n("vMhf"),n("J08h"),!1,null,null,null);e.exports=s.exports},qjuG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("8tCw"),i=n.n(s),r=n("dBZW"),o=n.n(r);t.default={components:{notificationDropdown:i.a,profileDropdown:o.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},uRl7:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("liym"),i=n.n(s);t.default={components:{office:i.a},data:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){return{offices:data.offices.map(function(e){return e.url="offices/"+e.id,e}),showCreateOfficeForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{createNewOffice:function(){var e=this;axios.post("/offices",{name:this.name,description:this.description}).then(function(t){"success"==t.data.status&&(EventBus.$emit("notification",t.data.message,t.data.status),t.data.office.url="offices/"+t.data.office.id,e.offices.push(t.data.office),e.showCreateOfficeForm=!1)}).catch(function(e){EventBus.$emit("notification",e.response.data.message,e.response.data.status)})},closeCreateOfficeModal:function(){this.showCreateOfficeForm=!1},openCreateOfficeModal:function(){this.showCreateOfficeForm=!0},deleteOffice:function(e){this.offices.splice(e,1)}}}},vMhf:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("KPti"),i=n.n(s);t.default={components:{team:i.a},data:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){return{teams:data.teams.map(function(e){return e.url="teams/"+e.id,e}),showCreateTeamForm:!1,name:"",description:""}}),props:{activeTab:{required:!0,type:String}},methods:{openCreateTeamModal:function(){this.showCreateTeamForm=!0},closeCreateTeamModal:function(){this.showCreateTeamForm=!1},createNewTeam:function(){var e=this;axios.post("/teams",{name:this.name,description:this.description}).then(function(t){"success"==t.data.status&&(EventBus.$emit("notification",t.data.message,t.data.status),t.data.project.url="projects/"+t.data.project.id,e.teams.push(t.data.team),e.showCreateTeamForm=!1)}).catch(function(t){console.log(t),e.showCreateTeamForm=!1})},deleteTeam:function(e){this.teams.splice(e,1)}}}},weJB:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["details"],data:function(){return{team:this.details,dropdownMenuShown:!1}},methods:{toggleMenu:function(){this.dropdownMenuShown=!this.dropdownMenuShown},deleteTeam:function(e){var t=this;axios.delete("/teams/"+e.id).then(function(e){t.$emit("deleted"),t.dropdownMenuShown=!1,EventBus.$emit("notification",e.data.message,e.data.status)}).catch(function(e){t.dropdownMenuShown=!1,EventBus.$emit("notification",e.response.data.message,e.response.data.status)})}}}},wmlM:function(e,t,n){var s=n("VU/8")(n("Yl9i"),n("XpHU"),!1,null,null,null);e.exports=s.exports}},[8]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,