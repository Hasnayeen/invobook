webpackJsonp([9],{"0G9P":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("WRGp");var s=n("OTac"),r=n.n(s);new Vue({el:"#app",components:{register:r.a}})},"0fpF":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white container mx-4 md:mx-auto shadow-lg mt-32 flex flex-row md:w-3/5 xxl:w-2/5 justify-between"},[e._m(0),e._v(" "),n("div",{}),e._v(" "),n("div",{staticClass:"w-full md:w-1/2 p-8"},[n("form",{attrs:{role:"form",method:"POST",action:e.url}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}}),e._v(" "),n("div",{},[n("div",{staticClass:"card-content"},[n("div",{staticClass:"content"},[n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"name",type:"text",name:"name",placeholder:"Full Name"}}),e._v(" "),e.errors?n("span",{staticClass:"text-red-light block pt-2"},[e._v(e._s(e.errors.name))]):e._e()]),e._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"username",type:"text",name:"username",placeholder:"Username"}}),e._v(" "),e.errors?n("span",{staticClass:"text-red-light block pt-2"},[e._v(e._s(e.errors.username))]):e._e()]),e._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"email",type:"text",name:"email",placeholder:"E-mail"}}),e._v(" "),e.errors?n("span",{staticClass:"text-red-light block pt-2"},[e._v(e._s(e.errors.email))]):e._e()]),e._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"password",type:"password",name:"password",placeholder:"Password"}}),e._v(" "),e.errors?n("span",{staticClass:"text-red-light block pt-2"},[e._v(e._s(e.errors.password))]):e._e()]),e._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"password_confirmation",type:"password",name:"password_confirmation",placeholder:"Confirm Your Password"}}),e._v(" "),e.errors?n("span",{staticClass:"text-red-light block pt-2"},[e._v(e._s(e.errors.password_confirmation))]):e._e()]),e._v(" "),e._m(1)])]),e._v(" "),n("footer",{staticClass:"card-footer"})])])])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"w-1/2 text-center bg-teal-light p-4 hidden md:block"},[t("p",{staticClass:"text-white font-bold text-4xl pt-8 mt-8"},[this._v("GOODWORK")]),this._v(" "),t("p",{staticClass:"text-white text-xl pt-4"},[this._v("Sane way to manage work")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",{staticClass:"py-4"},[t("button",{staticClass:"btn",attrs:{type:"submit"}},[this._v("Register")])])}]}},1:function(e,t,n){e.exports=n("0G9P")},CZ1O:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{token:Laravel.csrfToken,errors:errors,url:url}}}},OTac:function(e,t,n){var s=n("VU/8")(n("CZ1O"),n("0fpF"),!1,null,null,null);e.exports=s.exports},"VU/8":function(e,t){e.exports=function(e,t,n,s,r,i){var o,a=e=e||{},c=typeof e.default;"object"!==c&&"function"!==c||(o=e,a=e.default);var u,h="function"==typeof a?a.options:a;if(t&&(h.render=t.render,h.staticRenderFns=t.staticRenderFns,h._compiled=!0),n&&(h.functional=!0),r&&(h._scopeId=r),i?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},h._ssrRegister=u):s&&(u=s),u){var l=h.functional,p=l?h.render:h.beforeCreate;l?(h._injectStyles=u,h.render=function(e,t){return u.call(t),p(e,t)}):h.beforeCreate=p?[].concat(p,u):[u]}return{esModule:o,exports:a,options:h}}},WRGp:function(e,t,n){"use strict";var s=n("iuzX"),r=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new r.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(e){return e?(e=e.toString(),window.location.protocol+"//"+window.location.host+"/"+e):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(e){return e?(e=e.toString(),window.lang[e]?window.lang[e]:e):""}),window.EventBus=new Vue},iuzX:function(e,t){!function(){function e(e){this.value=e}function t(t){var n,s;function r(n,s){try{var o=t[n](s),a=o.value;a instanceof e?Promise.resolve(a.value).then(function(e){r("next",e)},function(e){r("throw",e)}):i(o.done?"return":"normal",o.value)}catch(e){i("throw",e)}}function i(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?r(n.key,n.arg):s=null}this._invoke=function(e,t){return new Promise(function(i,o){var a={key:e,arg:t,resolve:i,reject:o,next:null};s?s=s.next=a:(n=s=a,r(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();var n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},i=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},a=function(){function e(t){n(this,e),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(t),this.connect()}return s(e,[{key:"setOptions",value:function(e){return this.options=r(this._defaultOptions,e),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),e}},{key:"csrfToken",value:function(){var e=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(e=document.querySelector('meta[name="csrf-token"]'))?e.getAttribute("content"):null}}]),e}(),c=function(){function e(){n(this,e)}return s(e,[{key:"notification",value:function(e){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",e)}},{key:"listenForWhisper",value:function(e,t){return this.listen(".client-"+e,t)}}]),e}(),u=function(){function e(t){n(this,e),this.setNamespace(t)}return s(e,[{key:"format",value:function(e){return"."===e.charAt(0)||"\\"===e.charAt(0)?e.substr(1):(this.namespace&&(e=this.namespace+"."+e),e.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(e){this.namespace=e}}]),e}(),h=function(e){function t(e,s,r){n(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i.name=s,i.pusher=e,i.options=r,i.eventFormatter=new u(i.options.namespace),i.subscribe(),i}return i(t,c),s(t,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"stopListening",value:function(e){return this.subscription.unbind(this.eventFormatter.format(e)),this}},{key:"on",value:function(e,t){return this.subscription.bind(e,t),this}}]),t}(),l=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,h),s(t,[{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),p=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,h),s(t,[{key:"here",value:function(e){return this.on("pusher:subscription_succeeded",function(t){e(Object.keys(t.members).map(function(e){return t.members[e]}))}),this}},{key:"joining",value:function(e){return this.on("pusher:member_added",function(t){e(t.info)}),this}},{key:"leaving",value:function(e){return this.on("pusher:member_removed",function(t){e(t.info)}),this}},{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),f=function(e){function t(e,s,r){n(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i.events={},i.name=s,i.socket=e,i.options=r,i.eventFormatter=new u(i.options.namespace),i.subscribe(),i.configureReconnector(),i}return i(t,c),s(t,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"on",value:function(e,t){var n=this,s=function(e,s){n.name==e&&t(s)};this.socket.on(e,s),this.bind(e,s)}},{key:"configureReconnector",value:function(){var e=this,t=function(){e.subscribe()};this.socket.on("reconnect",t),this.bind("reconnect",t)}},{key:"bind",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"unbind",value:function(){var e=this;Object.keys(this.events).forEach(function(t){e.events[t].forEach(function(n){e.socket.removeListener(t,n)}),delete e.events[t]})}}]),t}(),d=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,f),s(t,[{key:"whisper",value:function(e,t){return this.socket.emit("client event",{channel:this.name,event:"client-"+e,data:t}),this}}]),t}(),v=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,d),s(t,[{key:"here",value:function(e){return this.on("presence:subscribed",function(t){e(t.map(function(e){return e.user_info}))}),this}},{key:"joining",value:function(e){return this.on("presence:joining",function(t){return e(t.user_info)}),this}},{key:"leaving",value:function(e){return this.on("presence:leaving",function(t){return e(t.user_info)}),this}}]),t}(),y=function(e){function t(){var e;n(this,t);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a.channels={},a}return i(t,a),s(t,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new h(this.pusher,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new l(this.pusher,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new p(this.pusher,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e,n){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),t}(),k=function(e){function t(){var e;n(this,t);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a.channels={},a}return i(t,a),s(t,[{key:"connect",value:function(){var e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new f(this.socket,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new d(this.socket,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new v(this.socket,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),t}(),_=function(){function e(t){n(this,e),this.options=t,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new y(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new k(this.options))}return s(e,[{key:"registerVueRequestInterceptor",value:function(){var e=this;Vue.http.interceptors.push(function(t,n){e.socketId()&&t.headers.set("X-Socket-ID",e.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var e=this;axios.interceptors.request.use(function(t){return e.socketId()&&(t.headers["X-Socket-Id"]=e.socketId()),t})}},{key:"registerjQueryAjaxSetup",value:function(){var e=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(t){e.socketId()&&t.setRequestHeader("X-Socket-Id",e.socketId())}})}},{key:"listen",value:function(e,t,n){return this.connector.listen(e,t,n)}},{key:"channel",value:function(e){return this.connector.channel(e)}},{key:"private",value:function(e){return this.connector.privateChannel(e)}},{key:"join",value:function(e){return this.connector.presenceChannel(e)}},{key:"leave",value:function(e){this.connector.leave(e)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),e}();e.exports=_}},[1]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,