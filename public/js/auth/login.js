webpackJsonp([8],{0:function(t,e,n){n("sStE"),t.exports=n("2I+f")},"2I+f":function(t,e){},BKuf:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bg-white container mx-4 md:mx-auto shadow-lg mt-32 flex flex-row md:w-3/5 xxl:w-2/5 justify-between"},[t._m(0),t._v(" "),n("div",{}),t._v(" "),n("div",{staticClass:"w-full md:w-1/2 p-8"},[n("form",{attrs:{method:"POST",action:t.url}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:t.token}}),t._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"email","aria-label":"email",type:"text",name:"email",placeholder:"E-mail"},domProps:{value:t.oldEmail}}),t._v(" "),t.errors.email?n("span",{staticClass:"text-red-light block pt-2"},[t._v(t._s(t.errors.email[0]))]):t._e()]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),n("a",{staticClass:"no-underline text-teal text-sm",attrs:{href:"password/reset"}},[t._v("Forgot Your Password?")])])])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"w-1/2 text-center bg-teal-light p-4 hidden md:block"},[e("p",{staticClass:"text-white font-bold text-4xl pt-8 mt-8"},[this._v("GOODWORK")]),this._v(" "),e("p",{staticClass:"text-white text-xl pt-4"},[this._v("Sane way to manage work")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"py-4"},[e("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"password","aria-label":"password",type:"password",name:"password",placeholder:"Password"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"py-4 text-grey"},[e("input",{attrs:{type:"checkbox","aria-label":"remember me",name:"remember"}}),this._v("\n        Remember Me\n      ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"py-4"},[e("button",{staticClass:"btn",attrs:{type:"submit"}},[this._v("LOGIN")])])}]}},"C/JF":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"icon",function(){return le}),n.d(e,"noAuto",function(){return oe}),n.d(e,"config",function(){return T}),n.d(e,"toHtml",function(){return kt}),n.d(e,"layer",function(){return de}),n.d(e,"text",function(){return fe}),n.d(e,"counter",function(){return pe}),n.d(e,"library",function(){return ae}),n.d(e,"dom",function(){return ce}),n.d(e,"parse",function(){return ue}),n.d(e,"findIconDefinition",function(){return re});var r=function(){},i={},a={},o=null,s={mark:r,measure:r};try{"undefined"!=typeof window&&(i=window),"undefined"!=typeof document&&(a=document),"undefined"!=typeof MutationObserver&&(o=MutationObserver),"undefined"!=typeof performance&&(s=performance)}catch(t){}var c=(i.navigator||{}).userAgent,u=void 0===c?"":c,l=i,f=a,p=o,d=s,h=!!f.documentElement&&!!f.head&&"function"==typeof f.addEventListener&&"function"==typeof f.createElement,m=~u.indexOf("MSIE")||~u.indexOf("Trident/"),v=16,g="data-fa-i2svg",y="data-fa-pseudo-element",b="data-prefix",w="data-icon",k="fontawesome-i2svg",x=["HTML","HEAD","STYLE","SCRIPT"],_=function(){try{return!0}catch(t){return!1}}(),O=[1,2,3,4,5,6,7,8,9,10],C=O.concat([11,12,13,14,15,16,17,18,19,20]),A=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],S=["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter"].concat(O.map(function(t){return t+"x"})).concat(C.map(function(t){return"w-"+t})),j=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),N=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},z=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),M=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},P=l.FontAwesomeConfig||{};if(f&&"function"==typeof f.querySelector){[["data-family-prefix","familyPrefix"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach(function(t){var e=z(t,2),n=e[0],r=e[1],i=function(t){return""===t||"false"!==t&&("true"===t||t)}(function(t){var e=f.querySelector("script["+t+"]");if(e)return e.getAttribute(t)}(n));void 0!==i&&null!==i&&(P[r]=i)})}var I=N({familyPrefix:"fa",replacementClass:"svg-inline--fa",autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},P);I.autoReplaceSvg||(I.observeMutations=!1);var T=N({},I);l.FontAwesomeConfig=T;var L=l||{};L.___FONT_AWESOME___||(L.___FONT_AWESOME___={}),L.___FONT_AWESOME___.styles||(L.___FONT_AWESOME___.styles={}),L.___FONT_AWESOME___.hooks||(L.___FONT_AWESOME___.hooks={}),L.___FONT_AWESOME___.shims||(L.___FONT_AWESOME___.shims=[]);var R=L.___FONT_AWESOME___,F=[],X=!1;h&&((X=(f.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(f.readyState))||f.addEventListener("DOMContentLoaded",function t(){f.removeEventListener("DOMContentLoaded",t),X=1,F.map(function(t){return t()})}));var B=v,W={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function V(t){if(t&&h){var e=f.createElement("style");e.setAttribute("type","text/css"),e.innerHTML=t;for(var n=f.head.childNodes,r=null,i=n.length-1;i>-1;i--){var a=n[i],o=(a.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(o)>-1&&(r=a)}return f.head.insertBefore(e,r),t}}var D="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";function H(){for(var t=12,e="";t-- >0;)e+=D[62*Math.random()|0];return e}function q(t){for(var e=[],n=(t||[]).length>>>0;n--;)e[n]=t[n];return e}function U(t){return t.classList?q(t.classList):(t.getAttribute("class")||"").split(" ").filter(function(t){return t})}function K(t,e){var n,r=e.split("-"),i=r[0],a=r.slice(1).join("-");return i!==t||""===a||(n=a,~S.indexOf(n))?null:a}function Y(t){return(""+t).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function $(t){return Object.keys(t||{}).reduce(function(e,n){return e+(n+": ")+t[n]+";"},"")}function G(t){return t.size!==W.size||t.x!==W.x||t.y!==W.y||t.rotate!==W.rotate||t.flipX||t.flipY}function Q(t){var e=t.transform,n=t.containerWidth,r=t.iconWidth;return{outer:{transform:"translate("+n/2+" 256)"},inner:{transform:"translate("+32*e.x+", "+32*e.y+") "+" "+("scale("+e.size/16*(e.flipX?-1:1)+", "+e.size/16*(e.flipY?-1:1)+") ")+" "+("rotate("+e.rotate+" 0 0)")},path:{transform:"translate("+r/2*-1+" -256)"}}}var J={x:0,y:0,width:"100%",height:"100%"},Z=function(t){var e=t.children,n=t.attributes,r=t.main,i=t.mask,a=t.transform,o=r.width,s=r.icon,c=i.width,u=i.icon,l=Q({transform:a,containerWidth:c,iconWidth:o}),f={tag:"rect",attributes:N({},J,{fill:"white"})},p={tag:"g",attributes:N({},l.inner),children:[{tag:"path",attributes:N({},s.attributes,l.path,{fill:"black"})}]},d={tag:"g",attributes:N({},l.outer),children:[p]},h="mask-"+H(),m="clip-"+H(),v={tag:"defs",children:[{tag:"clipPath",attributes:{id:m},children:[u]},{tag:"mask",attributes:N({},J,{id:h,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[f,d]}]};return e.push(v,{tag:"rect",attributes:N({fill:"currentColor","clip-path":"url(#"+m+")",mask:"url(#"+h+")"},J)}),{children:e,attributes:n}},tt=function(t){var e=t.children,n=t.attributes,r=t.main,i=t.transform,a=$(t.styles);if(a.length>0&&(n.style=a),G(i)){var o=Q({transform:i,containerWidth:r.width,iconWidth:r.width});e.push({tag:"g",attributes:N({},o.outer),children:[{tag:"g",attributes:N({},o.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:N({},r.icon.attributes,o.path)}]}]})}else e.push(r.icon);return{children:e,attributes:n}},et=function(t){var e=t.children,n=t.main,r=t.mask,i=t.attributes,a=t.styles,o=t.transform;if(G(o)&&n.found&&!r.found){var s={x:n.width/n.height/2,y:.5};i.style=$(N({},a,{"transform-origin":s.x+o.x/16+"em "+(s.y+o.y/16)+"em"}))}return[{tag:"svg",attributes:i,children:e}]},nt=function(t){var e=t.prefix,n=t.iconName,r=t.children,i=t.attributes,a=t.symbol,o=!0===a?e+"-"+T.familyPrefix+"-"+n:a;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:N({},i,{id:o}),children:r}]}]};function rt(t){var e=t.icons,n=e.main,r=e.mask,i=t.prefix,a=t.iconName,o=t.transform,s=t.symbol,c=t.title,u=t.extra,l=t.watchable,f=void 0!==l&&l,p=r.found?r:n,d=p.width,h=p.height,m="fa-w-"+Math.ceil(d/h*16),v=[T.replacementClass,a?T.familyPrefix+"-"+a:"",m].filter(function(t){return-1===u.classes.indexOf(t)}).concat(u.classes).join(" "),y={children:[],attributes:N({},u.attributes,{"data-prefix":i,"data-icon":a,class:v,role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+d+" "+h})};f&&(y.attributes[g]=""),c&&y.children.push({tag:"title",attributes:{id:y.attributes["aria-labelledby"]||"title-"+H()},children:[c]});var b=N({},y,{prefix:i,iconName:a,main:n,mask:r,transform:o,symbol:s,styles:u.styles}),w=r.found&&n.found?Z(b):tt(b),k=w.children,x=w.attributes;return b.children=k,b.attributes=x,s?nt(b):et(b)}function it(t){var e=t.content,n=t.width,r=t.height,i=t.transform,a=t.title,o=t.extra,s=t.watchable,c=void 0!==s&&s,u=N({},o.attributes,a?{title:a}:{},{class:o.classes.join(" ")});c&&(u[g]="");var l=N({},o.styles);G(i)&&(l.transform=function(t){var e=t.transform,n=t.width,r=void 0===n?v:n,i=t.height,a=void 0===i?v:i,o=t.startCentered,s=void 0!==o&&o,c="";return c+=s&&m?"translate("+(e.x/B-r/2)+"em, "+(e.y/B-a/2)+"em) ":s?"translate(calc(-50% + "+e.x/B+"em), calc(-50% + "+e.y/B+"em)) ":"translate("+e.x/B+"em, "+e.y/B+"em) ",c+="scale("+e.size/B*(e.flipX?-1:1)+", "+e.size/B*(e.flipY?-1:1)+") ",c+="rotate("+e.rotate+"deg) "}({transform:i,startCentered:!0,width:n,height:r}),l["-webkit-transform"]=l.transform);var f=$(l);f.length>0&&(u.style=f);var p=[];return p.push({tag:"span",attributes:u,children:[e]}),a&&p.push({tag:"span",attributes:{class:"sr-only"},children:[a]}),p}var at=function(){},ot=T.measurePerformance&&d&&d.mark&&d.measure?d:{mark:at,measure:at},st=function(t){ot.mark('FA "5.4.1" '+t+" ends"),ot.measure('FA "5.4.1" '+t,'FA "5.4.1" '+t+" begins",'FA "5.4.1" '+t+" ends")},ct={begin:function(t){return ot.mark('FA "5.4.1" '+t+" begins"),function(){return st(t)}},end:st},ut=function(t,e,n,r){var i,a,o,s=Object.keys(t),c=s.length,u=void 0!==r?function(t,e){return function(n,r,i,a){return t.call(e,n,r,i,a)}}(e,r):e;for(void 0===n?(i=1,o=t[s[0]]):(i=0,o=n);i<c;i++)o=u(o,t[a=s[i]],a,t);return o},lt=R.styles,ft=R.shims,pt={},dt={},ht={},mt=function(){var t=function(t){return ut(lt,function(e,n,r){return e[r]=ut(n,t,{}),e},{})};pt=t(function(t,e,n){return t[e[3]]=n,t}),dt=t(function(t,e,n){var r=e[2];return t[n]=n,r.forEach(function(e){t[e]=n}),t});var e="far"in lt;ht=ut(ft,function(t,n){var r=n[0],i=n[1],a=n[2];return"far"!==i||e||(i="fas"),t[r]={prefix:i,iconName:a},t},{})};function vt(t,e){return pt[t][e]}mt();var gt=R.styles,yt=function(){return{prefix:null,iconName:null,rest:[]}};function bt(t){return t.reduce(function(t,e){var n=K(T.familyPrefix,e);if(gt[e])t.prefix=e;else if(n){var r="fa"===t.prefix?ht[n]||{prefix:null,iconName:null}:{};t.iconName=r.iconName||n,t.prefix=r.prefix||t.prefix}else e!==T.replacementClass&&0!==e.indexOf("fa-w-")&&t.rest.push(e);return t},yt())}function wt(t,e,n){if(t&&t[e]&&t[e][n])return{prefix:e,iconName:n,icon:t[e][n]}}function kt(t){var e=t.tag,n=t.attributes,r=void 0===n?{}:n,i=t.children,a=void 0===i?[]:i;return"string"==typeof t?Y(t):"<"+e+" "+function(t){return Object.keys(t||{}).reduce(function(e,n){return e+(n+'="')+Y(t[n])+'" '},"").trim()}(r)+">"+a.map(kt).join("")+"</"+e+">"}var xt=function(){};function _t(t){return"string"==typeof(t.getAttribute?t.getAttribute(g):null)}var Ot={replace:function(t){var e=t[0],n=t[1].map(function(t){return kt(t)}).join("\n");if(e.parentNode&&e.outerHTML)e.outerHTML=n+(T.keepOriginalSource&&"svg"!==e.tagName.toLowerCase()?"\x3c!-- "+e.outerHTML+" --\x3e":"");else if(e.parentNode){var r=document.createElement("span");e.parentNode.replaceChild(r,e),r.outerHTML=n}},nest:function(t){var e=t[0],n=t[1];if(~U(e).indexOf(T.replacementClass))return Ot.replace(t);var r=new RegExp(T.familyPrefix+"-.*");delete n[0].attributes.style;var i=n[0].attributes.class.split(" ").reduce(function(t,e){return e===T.replacementClass||e.match(r)?t.toSvg.push(e):t.toNode.push(e),t},{toNode:[],toSvg:[]});n[0].attributes.class=i.toSvg.join(" ");var a=n.map(function(t){return kt(t)}).join("\n");e.setAttribute("class",i.toNode.join(" ")),e.setAttribute(g,""),e.innerHTML=a}};function Ct(t,e){var n="function"==typeof e?e:xt;0===t.length?n():(l.requestAnimationFrame||function(t){return t()})(function(){var e=!0===T.autoReplaceSvg?Ot.replace:Ot[T.autoReplaceSvg]||Ot.replace,r=ct.begin("mutate");t.map(e),r(),n()})}var At=!1;var St=null;var jt=function(t){var e=t.getAttribute("style"),n=[];return e&&(n=e.split(";").reduce(function(t,e){var n=e.split(":"),r=n[0],i=n.slice(1);return r&&i.length>0&&(t[r]=i.join(":").trim()),t},{})),n};function Et(t){for(var e="",n=0;n<t.length;n++){e+=("000"+t.charCodeAt(n).toString(16)).slice(-4)}return e}var Nt=function(t){var e,n,r=t.getAttribute("data-prefix"),i=t.getAttribute("data-icon"),a=void 0!==t.innerText?t.innerText.trim():"",o=bt(U(t));return r&&i&&(o.prefix=r,o.iconName=i),o.prefix&&a.length>1?o.iconName=(e=o.prefix,n=t.innerText,dt[e][n]):o.prefix&&1===a.length&&(o.iconName=vt(o.prefix,Et(t.innerText))),o},zt=function(t){var e={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return t?t.toLowerCase().split(" ").reduce(function(t,e){var n=e.toLowerCase().split("-"),r=n[0],i=n.slice(1).join("-");if(r&&"h"===i)return t.flipX=!0,t;if(r&&"v"===i)return t.flipY=!0,t;if(i=parseFloat(i),isNaN(i))return t;switch(r){case"grow":t.size=t.size+i;break;case"shrink":t.size=t.size-i;break;case"left":t.x=t.x-i;break;case"right":t.x=t.x+i;break;case"up":t.y=t.y-i;break;case"down":t.y=t.y+i;break;case"rotate":t.rotate=t.rotate+i}return t},e):e},Mt=function(t){return zt(t.getAttribute("data-fa-transform"))},Pt=function(t){var e=t.getAttribute("data-fa-symbol");return null!==e&&(""===e||e)},It=function(t){var e=q(t.attributes).reduce(function(t,e){return"class"!==t.name&&"style"!==t.name&&(t[e.name]=e.value),t},{}),n=t.getAttribute("title");return T.autoA11y&&(n?e["aria-labelledby"]=T.replacementClass+"-title-"+H():e["aria-hidden"]="true"),e},Tt=function(t){var e=t.getAttribute("data-fa-mask");return e?bt(e.split(" ").map(function(t){return t.trim()})):yt()},Lt={iconName:null,title:null,prefix:null,transform:W,symbol:!1,mask:null,extra:{classes:[],styles:{},attributes:{}}};function Rt(t){this.name="MissingIcon",this.message=t||"Icon unavailable",this.stack=(new Error).stack}Rt.prototype=Object.create(Error.prototype),Rt.prototype.constructor=Rt;var Ft={fill:"currentColor"},Xt={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},Bt={tag:"path",attributes:N({},Ft,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})},Wt=N({},Xt,{attributeName:"opacity"}),Vt={tag:"g",children:[Bt,{tag:"circle",attributes:N({},Ft,{cx:"256",cy:"364",r:"28"}),children:[{tag:"animate",attributes:N({},Xt,{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:N({},Wt,{values:"1;0;1;1;0;1;"})}]},{tag:"path",attributes:N({},Ft,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:[{tag:"animate",attributes:N({},Wt,{values:"1;0;0;0;0;1;"})}]},{tag:"path",attributes:N({},Ft,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:N({},Wt,{values:"0;0;1;1;0;0;"})}]}]},Dt=R.styles,Ht="fa-layers-text",qt=/Font Awesome 5 (Solid|Regular|Light|Brands|Free|Pro)/,Ut={Solid:"fas",Regular:"far",Light:"fal",Brands:"fab"},Kt={900:"fas",400:"far",300:"fal"};function Yt(t,e){var n={found:!1,width:512,height:512,icon:Vt};if(t&&e&&Dt[e]&&Dt[e][t]){var r=Dt[e][t];n={found:!0,width:r[0],height:r[1],icon:{tag:"path",attributes:{fill:"currentColor",d:r.slice(4)[0]}}}}else if(t&&e&&!T.showMissingIcons)throw new Rt("Icon is missing for prefix "+e+" with icon name "+t);return n}function $t(t){var e=function(t){var e=Nt(t),n=e.iconName,r=e.prefix,i=e.rest,a=jt(t),o=Mt(t),s=Pt(t),c=It(t),u=Tt(t);return{iconName:n,title:t.getAttribute("title"),prefix:r,transform:o,symbol:s,mask:u,extra:{classes:i,styles:a,attributes:c}}}(t);return~e.extra.classes.indexOf(Ht)?function(t,e){var n=e.title,r=e.transform,i=e.extra,a=null,o=null;if(m){var s=parseInt(getComputedStyle(t).fontSize,10),c=t.getBoundingClientRect();a=c.width/s,o=c.height/s}return T.autoA11y&&!n&&(i.attributes["aria-hidden"]="true"),[t,it({content:t.innerHTML,width:a,height:o,transform:r,title:n,extra:i,watchable:!0})]}(t,e):function(t,e){var n=e.iconName,r=e.title,i=e.prefix,a=e.transform,o=e.symbol,s=e.mask,c=e.extra;return[t,rt({icons:{main:Yt(n,i),mask:Yt(s.iconName,s.prefix)},prefix:i,iconName:n,transform:a,symbol:o,mask:s,title:r,extra:c,watchable:!0})]}(t,e)}function Gt(t){if(h){var e=ct.begin("searchPseudoElements");At=!0,function(){q(t.querySelectorAll("*")).filter(function(t){return!(t.parentNode===document.head||~x.indexOf(t.tagName.toUpperCase())||t.getAttribute(y)||t.parentNode&&"svg"===t.parentNode.tagName)}).forEach(function(t){[":before",":after"].forEach(function(e){var n=q(t.children).filter(function(t){return t.getAttribute(y)===e})[0],r=l.getComputedStyle(t,e),i=r.getPropertyValue("font-family").match(qt),a=r.getPropertyValue("font-weight");if(n&&!i)t.removeChild(n);else if(i){var o=r.getPropertyValue("content"),s=~["Light","Regular","Solid","Brands"].indexOf(i[1])?Ut[i[1]]:Kt[a],c=vt(s,Et(3===o.length?o.substr(1,1):o));if(!n||n.getAttribute(b)!==s||n.getAttribute(w)!==c){n&&t.removeChild(n);var u=Lt.extra;u.attributes[y]=e;var p=rt(N({},Lt,{icons:{main:Yt(c,s),mask:yt()},prefix:s,iconName:c,extra:u,watchable:!0})),d=f.createElement("svg");":before"===e?t.insertBefore(d,t.firstChild):t.appendChild(d),d.outerHTML=p.map(function(t){return kt(t)}).join("\n")}}})})}(),At=!1,e()}}function Qt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(h){var n=f.documentElement.classList,r=function(t){return n.add(k+"-"+t)},i=function(t){return n.remove(k+"-"+t)},a=Object.keys(Dt),o=["."+Ht+":not(["+g+"])"].concat(a.map(function(t){return"."+t+":not(["+g+"])"})).join(", ");if(0!==o.length){var s=q(t.querySelectorAll(o));if(s.length>0){r("pending"),i("complete");var c=ct.begin("onTree"),u=s.reduce(function(t,e){try{var n=$t(e);n&&t.push(n)}catch(t){_||t instanceof Rt&&console.error(t)}return t},[]);c(),Ct(u,function(){r("active"),r("complete"),i("pending"),"function"==typeof e&&e()})}}}}function Jt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=$t(t);n&&Ct([n],e)}var Zt=function(){var t="svg-inline--fa",e=T.familyPrefix,n=T.replacementClass,r='svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n';if("fa"!==e||n!==t){var i=new RegExp("\\.fa\\-","g"),a=new RegExp("\\."+t,"g");r=r.replace(i,"."+e+"-").replace(a,"."+n)}return r};function te(t){return{found:!0,width:t[0],height:t[1],icon:{tag:"path",attributes:{fill:"currentColor",d:t.slice(4)[0]}}}}function ee(){T.autoAddCss&&!se&&(V(Zt()),se=!0)}function ne(t,e){return Object.defineProperty(t,"abstract",{get:e}),Object.defineProperty(t,"html",{get:function(){return t.abstract.map(function(t){return kt(t)})}}),Object.defineProperty(t,"node",{get:function(){if(h){var e=f.createElement("div");return e.innerHTML=t.html,e.children}}}),t}function re(t){var e=t.prefix,n=void 0===e?"fa":e,r=t.iconName;if(r)return wt(ae.definitions,n,r)||wt(R.styles,n,r)}var ie,ae=new(function(){function t(){j(this,t),this.definitions={}}return E(t,[{key:"add",value:function(){for(var t=this,e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=n.reduce(this._pullDefinitions,{});Object.keys(i).forEach(function(e){t.definitions[e]=N({},t.definitions[e]||{},i[e]),function t(e,n){var r=Object.keys(n).reduce(function(t,e){var r=n[e];return r.icon?t[r.iconName]=r.icon:t[e]=r,t},{});"function"==typeof R.hooks.addPack?R.hooks.addPack(e,r):R.styles[e]=N({},R.styles[e]||{},r),"fas"===e&&t("fa",n)}(e,i[e]),mt()})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(t,e){var n=e.prefix&&e.iconName&&e.icon?{0:e}:e;return Object.keys(n).map(function(e){var r=n[e],i=r.prefix,a=r.iconName,o=r.icon;t[i]||(t[i]={}),t[i][a]=o}),t}}]),t}()),oe=function(){T.autoReplaceSvg=!1,T.observeMutations=!1,St&&St.disconnect()},se=!1,ce={i2svg:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(h){ee();var e=t.node,n=void 0===e?f:e,r=t.callback,i=void 0===r?function(){}:r;T.searchPseudoElements&&Gt(n),Qt(n,i)}},css:Zt,insertCss:function(){se||(V(Zt()),se=!0)},watch:function(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.autoReplaceSvgRoot,r=e.observeMutationsRoot;!1===T.autoReplaceSvg&&(T.autoReplaceSvg=!0),T.observeMutations=!0,t=function(){me({autoReplaceSvgRoot:n}),function(t){if(p&&T.observeMutations){var e=t.treeCallback,n=t.nodeCallback,r=t.pseudoElementsCallback,i=t.observeMutationsRoot,a=void 0===i?f.body:i;St=new p(function(t){At||q(t).forEach(function(t){if("childList"===t.type&&t.addedNodes.length>0&&!_t(t.addedNodes[0])&&(T.searchPseudoElements&&r(t.target),e(t.target)),"attributes"===t.type&&t.target.parentNode&&T.searchPseudoElements&&r(t.target.parentNode),"attributes"===t.type&&_t(t.target)&&~A.indexOf(t.attributeName))if("class"===t.attributeName){var i=bt(U(t.target)),a=i.prefix,o=i.iconName;a&&t.target.setAttribute("data-prefix",a),o&&t.target.setAttribute("data-icon",o)}else n(t.target)})}),h&&St.observe(a,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}({treeCallback:Qt,nodeCallback:Jt,pseudoElementsCallback:Gt,observeMutationsRoot:r})},h&&(X?setTimeout(t,0):F.push(t))}},ue={transform:function(t){return zt(t)}},le=(ie=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.transform,r=void 0===n?W:n,i=e.symbol,a=void 0!==i&&i,o=e.mask,s=void 0===o?null:o,c=e.title,u=void 0===c?null:c,l=e.classes,f=void 0===l?[]:l,p=e.attributes,d=void 0===p?{}:p,h=e.styles,m=void 0===h?{}:h;if(t){var v=t.prefix,g=t.iconName,y=t.icon;return ne(N({type:"icon"},t),function(){return ee(),T.autoA11y&&(u?d["aria-labelledby"]=T.replacementClass+"-title-"+H():d["aria-hidden"]="true"),rt({icons:{main:te(y),mask:s?te(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:v,iconName:g,transform:N({},W,r),symbol:a,title:u,extra:{attributes:d,styles:m,classes:f}})})}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(t||{}).icon?t:re(t||{}),r=e.mask;return r&&(r=(r||{}).icon?r:re(r||{})),ie(n,N({},e,{mask:r}))}),fe=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.transform,r=void 0===n?W:n,i=e.title,a=void 0===i?null:i,o=e.classes,s=void 0===o?[]:o,c=e.attributes,u=void 0===c?{}:c,l=e.styles,f=void 0===l?{}:l;return ne({type:"text",content:t},function(){return ee(),it({content:t,transform:N({},W,r),title:a,extra:{attributes:u,styles:f,classes:[T.familyPrefix+"-layers-text"].concat(M(s))}})})},pe=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.title,r=void 0===n?null:n,i=e.classes,a=void 0===i?[]:i,o=e.attributes,s=void 0===o?{}:o,c=e.styles,u=void 0===c?{}:c;return ne({type:"counter",content:t},function(){return ee(),function(t){var e=t.content,n=t.title,r=t.extra,i=N({},r.attributes,n?{title:n}:{},{class:r.classes.join(" ")}),a=$(r.styles);a.length>0&&(i.style=a);var o=[];return o.push({tag:"span",attributes:i,children:[e]}),n&&o.push({tag:"span",attributes:{class:"sr-only"},children:[n]}),o}({content:t.toString(),title:r,extra:{attributes:s,styles:u,classes:[T.familyPrefix+"-layers-counter"].concat(M(a))}})})},de=function(t){return ne({type:"layer"},function(){ee();var e=[];return t(function(t){Array.isArray(t)?t.map(function(t){e=e.concat(t.abstract)}):e=e.concat(t.abstract)}),[{tag:"span",attributes:{class:T.familyPrefix+"-layers"},children:e}]})},he={noAuto:oe,config:T,dom:ce,library:ae,parse:ue,findIconDefinition:re,icon:le,text:fe,counter:pe,layer:de,toHtml:kt},me=function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).autoReplaceSvgRoot,e=void 0===t?f:t;Object.keys(R.styles).length>0&&h&&T.autoReplaceSvg&&he.dom.i2svg({node:e})}},DGaX:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{token:Laravel.csrfToken,errors:errors,oldEmail:oldEmail,url:url}}}},U0v6:function(t,e,n){(function(t){(function(e,n){"use strict";var r="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{};var i,a=(function(t){var e,n,i,a,o,s,c,u,l,f,p,d,h,m,v;e=r,n=function(t,e,r){if(!u(e)||f(e)||p(e)||d(e)||c(e))return e;var i,a=0,o=0;if(l(e))for(i=[],o=e.length;a<o;a++)i.push(n(t,e[a],r));else for(var s in i={},e)Object.prototype.hasOwnProperty.call(e,s)&&(i[t(s,r)]=n(t,e[s],r));return i},i=function(t){return h(t)?t:(t=t.replace(/[\-_\s]+(.)?/g,function(t,e){return e?e.toUpperCase():""})).substr(0,1).toLowerCase()+t.substr(1)},a=function(t){var e=i(t);return e.substr(0,1).toUpperCase()+e.substr(1)},o=function(t,e){return function(t,e){var n=(e=e||{}).separator||"_",r=e.split||/(?=[A-Z])/;return t.split(r).join(n)}(t,e).toLowerCase()},s=Object.prototype.toString,c=function(t){return"function"==typeof t},u=function(t){return t===Object(t)},l=function(t){return"[object Array]"==s.call(t)},f=function(t){return"[object Date]"==s.call(t)},p=function(t){return"[object RegExp]"==s.call(t)},d=function(t){return"[object Boolean]"==s.call(t)},h=function(t){return(t-=0)==t},m=function(t,e){var n=e&&"process"in e?e.process:e;return"function"!=typeof n?t:function(e,r){return n(e,t,r)}},v={camelize:i,decamelize:o,pascalize:a,depascalize:o,camelizeKeys:function(t,e){return n(m(i,e),t)},decamelizeKeys:function(t,e){return n(m(o,e),t,e)},pascalizeKeys:function(t,e){return n(m(a,e),t)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}},t.exports?t.exports=v:e.humps=v}(i={exports:{}},i.exports),i.exports),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},c=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n};function l(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(e.children||[]).map(l.bind(null,t)),o=Object.keys(e.attributes||{}).reduce(function(t,n){var r=e.attributes[n];switch(n){case"class":t.class=r.split(/\s+/).reduce(function(t,e){return t[e]=!0,t},{});break;case"style":t.style=r.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,e){var n=e.indexOf(":"),r=a.camelize(e.slice(0,n)),i=e.slice(n+1).trim();return t[r]=i,t},{});break;default:t.attrs[n]=r}return t},{class:{},style:{},attrs:{}}),s=r.class,f=void 0===s?{}:s,p=r.style,d=void 0===p?{}:p,h=r.attrs,m=void 0===h?{}:h,v=u(r,["class","style","attrs"]);return"string"==typeof e?e:t(e.tag,c({class:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.reduce(function(t,e){return Array.isArray(e)?t=t.concat(e):t.push(e),t},[])}(o.class,f),style:c({},o.style,d),attrs:c({},o.attrs,m)},v,{props:n}),i)}var f=!1;try{f=!0}catch(t){}function p(t,e){return Array.isArray(e)&&e.length>0||!Array.isArray(e)&&e?s({},t,e):{}}function d(t){return null===t?null:"object"===(void 0===t?"undefined":o(t))&&t.prefix&&t.iconName?t:Array.isArray(t)&&2===t.length?{prefix:t[0],iconName:t[1]}:"string"==typeof t?{prefix:"fas",iconName:t}:void 0}var h={name:"FontAwesomeIcon",functional:!0,props:{border:{type:Boolean,default:!1},fixedWidth:{type:Boolean,default:!1},flip:{type:String,default:null,validator:function(t){return["horizontal","vertical","both"].indexOf(t)>-1}},icon:{type:[Object,Array,String],required:!0},mask:{type:[Object,Array,String],default:null},listItem:{type:Boolean,default:!1},pull:{type:String,default:null,validator:function(t){return["right","left"].indexOf(t)>-1}},pulse:{type:Boolean,default:!1},rotation:{type:Number,default:null,validator:function(t){return[90,180,270].indexOf(t)>-1}},size:{type:String,default:null,validator:function(t){return["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"].indexOf(t)>-1}},spin:{type:Boolean,default:!1},transform:{type:[String,Object],default:null},symbol:{type:[Boolean,String],default:!1}},render:function(t,e){var r=e.props,i=r.icon,a=r.mask,o=r.symbol,u=d(i),h=p("classes",function(t){var e,n=(e={"fa-spin":t.spin,"fa-pulse":t.pulse,"fa-fw":t.fixedWidth,"fa-border":t.border,"fa-li":t.listItem,"fa-flip-horizontal":"horizontal"===t.flip||"both"===t.flip,"fa-flip-vertical":"vertical"===t.flip||"both"===t.flip},s(e,"fa-"+t.size,null!==t.size),s(e,"fa-rotate-"+t.rotation,null!==t.rotation),s(e,"fa-pull-"+t.pull,null!==t.pull),e);return Object.keys(n).map(function(t){return n[t]?t:null}).filter(function(t){return t})}(r)),m=p("transform","string"==typeof r.transform?n.parse.transform(r.transform):r.transform),v=p("mask",d(a)),g=n.icon(u,c({},h,m,v,{symbol:o}));if(!g)return function(){var t;!f&&console&&"function"==typeof console.error&&(t=console).error.apply(t,arguments)}("Could not find one or more icon(s)",u,v);var y=g.abstract;return l.bind(null,t)(y[0],{},e.data)}},m={name:"FontAwesomeLayers",functional:!0,props:{fixedWidth:{type:Boolean,default:!1}},render:function(t,e){var r,i,a=n.config.familyPrefix,o=e.data.staticClass,s=[a+"-layers"].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(e.props.fixedWidth?[a+"-fw"]:[]));return t("div",c({},e.data,{staticClass:(r=o,i=s,(0===(r||"").length?[]:[r]).concat(i).join(" "))}),e.children)}},v={name:"FontAwesomeLayersText",functional:!0,props:{value:{type:[String,Number],default:""},transform:{type:[String,Object],default:null}},render:function(t,e){var r=e.props,i=p("transform","string"==typeof r.transform?n.parse.transform(r.transform):r.transform),a=n.text(r.value.toString(),c({},i)).abstract;return l.bind(null,t)(a[0],{},e.data)}};e.FontAwesomeIcon=h,e.FontAwesomeLayers=m,e.FontAwesomeLayersText=v,Object.defineProperty(e,"__esModule",{value:!0})})(e,n("C/JF"))}).call(e,n("DuR2"))},"VU/8":function(t,e){t.exports=function(t,e,n,r,i,a){var o,s=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(o=t,s=t.default);var u,l="function"==typeof s?s.options:s;if(e&&(l.render=e.render,l.staticRenderFns=e.staticRenderFns,l._compiled=!0),n&&(l.functional=!0),i&&(l._scopeId=i),a?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},l._ssrRegister=u):r&&(u=r),u){var f=l.functional,p=f?l.render:l.beforeCreate;f?(l._injectStyles=u,l.render=function(t,e){return u.call(e),p(t,e)}):l.beforeCreate=p?[].concat(p,u):[u]}return{esModule:o,exports:s,options:l}}},WRGp:function(t,e,n){"use strict";var r=n("iuzX"),i=n.n(r),a=n("U0v6"),o=(n.n(a),n("dDoS")),s=n.n(o);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(t){return t?(t=t.toString(),window.location.protocol+"//"+window.location.host+"/"+t):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(t){return t?(t=t.toString(),window.lang[t]?window.lang[t]:t):""}),window.Vue.directive("click-outside",s.a),window.Vue.component("font-awesome-icon",a.FontAwesomeIcon),window.EventBus=new Vue},dDoS:function(t,e){function n(t){return"function"==typeof t.value||(console.warn("[Vue-click-outside:] provided expression",t.expression,"is not a function."),!1)}function r(t){return void 0!==t.componentInstance&&t.componentInstance.$isServer}t.exports={bind:function(t,e,i){function a(e){if(i.context){var n=e.path||e.composedPath&&e.composedPath();n&&n.length>0&&n.unshift(e.target),t.contains(e.target)||function(t,e){if(!t||!e)return!1;for(var n=0,r=e.length;n<r;n++)try{if(t.contains(e[n]))return!0;if(e[n].contains(t))return!1}catch(t){return!1}return!1}(i.context.popupItem,n)||t.__vueClickOutside__.callback(e)}}n(e)&&(t.__vueClickOutside__={handler:a,callback:e.value},!r(i)&&document.addEventListener("click",a))},update:function(t,e){n(e)&&(t.__vueClickOutside__.callback=e.value)},unbind:function(t,e,n){!r(n)&&document.removeEventListener("click",t.__vueClickOutside__.handler),delete t.__vueClickOutside__}}},iuzX:function(t,e){!function(){function t(t){this.value=t}function e(e){var n,r;function i(n,r){try{var o=e[n](r),s=o.value;s instanceof t?Promise.resolve(s.value).then(function(t){i("next",t)},function(t){i("throw",t)}):a(o.done?"return":"normal",o.value)}catch(t){a("throw",t)}}function a(t,e){switch(t){case"return":n.resolve({value:e,done:!0});break;case"throw":n.reject(e);break;default:n.resolve({value:e,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=function(t,e){return new Promise(function(a,o){var s={key:t,arg:e,resolve:a,reject:o,next:null};r?r=r.next=s:(n=r=s,i(t,e))})},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}();var n=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},s=function(){function t(e){n(this,t),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(e),this.connect()}return r(t,[{key:"setOptions",value:function(t){return this.options=i(this._defaultOptions,t),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),t}},{key:"csrfToken",value:function(){var t=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(t=document.querySelector('meta[name="csrf-token"]'))?t.getAttribute("content"):null}}]),t}(),c=function(){function t(){n(this,t)}return r(t,[{key:"notification",value:function(t){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",t)}},{key:"listenForWhisper",value:function(t,e){return this.listen(".client-"+t,e)}}]),t}(),u=function(){function t(e){n(this,t),this.setNamespace(e)}return r(t,[{key:"format",value:function(t){return"."===t.charAt(0)||"\\"===t.charAt(0)?t.substr(1):(this.namespace&&(t=this.namespace+"."+t),t.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(t){this.namespace=t}}]),t}(),l=function(t){function e(t,r,i){n(this,e);var a=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return a.name=r,a.pusher=t,a.options=i,a.eventFormatter=new u(a.options.namespace),a.subscribe(),a}return a(e,c),r(e,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"stopListening",value:function(t){return this.subscription.unbind(this.eventFormatter.format(t)),this}},{key:"on",value:function(t,e){return this.subscription.bind(t,e),this}}]),e}(),f=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,l),r(e,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,l),r(e,[{key:"here",value:function(t){return this.on("pusher:subscription_succeeded",function(e){t(Object.keys(e.members).map(function(t){return e.members[t]}))}),this}},{key:"joining",value:function(t){return this.on("pusher:member_added",function(e){t(e.info)}),this}},{key:"leaving",value:function(t){return this.on("pusher:member_removed",function(e){t(e.info)}),this}},{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),d=function(t){function e(t,r,i){n(this,e);var a=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return a.events={},a.name=r,a.socket=t,a.options=i,a.eventFormatter=new u(a.options.namespace),a.subscribe(),a.configureReconnector(),a}return a(e,c),r(e,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"on",value:function(t,e){var n=this,r=function(t,r){n.name==t&&e(r)};this.socket.on(t,r),this.bind(t,r)}},{key:"configureReconnector",value:function(){var t=this,e=function(){t.subscribe()};this.socket.on("reconnect",e),this.bind("reconnect",e)}},{key:"bind",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"unbind",value:function(){var t=this;Object.keys(this.events).forEach(function(e){t.events[e].forEach(function(n){t.socket.removeListener(e,n)}),delete t.events[e]})}}]),e}(),h=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,d),r(e,[{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-"+t,data:e}),this}}]),e}(),m=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,h),r(e,[{key:"here",value:function(t){return this.on("presence:subscribed",function(e){t(e.map(function(t){return t.user_info}))}),this}},{key:"joining",value:function(t){return this.on("presence:joining",function(e){return t(e.user_info)}),this}},{key:"leaving",value:function(t){return this.on("presence:leaving",function(e){return t(e.user_info)}),this}}]),e}(),v=function(t){function e(){var t;n(this,e);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return s.channels={},s}return a(e,s),r(e,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new l(this.pusher,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new f(this.pusher,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new p(this.pusher,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t,n){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),e}(),g=function(t){function e(){var t;n(this,e);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return s.channels={},s}return a(e,s),r(e,[{key:"connect",value:function(){var t=this.getSocketIO();return this.socket=t(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new d(this.socket,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new h(this.socket,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new m(this.socket,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),e}(),y=function(){function t(e){n(this,t),this.options=e,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new v(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new g(this.options))}return r(t,[{key:"registerVueRequestInterceptor",value:function(){var t=this;Vue.http.interceptors.push(function(e,n){t.socketId()&&e.headers.set("X-Socket-ID",t.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var t=this;axios.interceptors.request.use(function(e){return t.socketId()&&(e.headers["X-Socket-Id"]=t.socketId()),e})}},{key:"registerjQueryAjaxSetup",value:function(){var t=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(e){t.socketId()&&e.setRequestHeader("X-Socket-Id",t.socketId())}})}},{key:"listen",value:function(t,e,n){return this.connector.listen(t,e,n)}},{key:"channel",value:function(t){return this.connector.channel(t)}},{key:"private",value:function(t){return this.connector.privateChannel(t)}},{key:"join",value:function(t){return this.connector.presenceChannel(t)}},{key:"leave",value:function(t){this.connector.leave(t)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),t}();t.exports=y},sStE:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n("WRGp");var r=n("yzCX"),i=n.n(r);new Vue({el:"#app",components:{login:i.a}})},yzCX:function(t,e,n){var r=n("VU/8")(n("DGaX"),n("BKuf"),!1,null,null,null);t.exports=r.exports}},[0]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,